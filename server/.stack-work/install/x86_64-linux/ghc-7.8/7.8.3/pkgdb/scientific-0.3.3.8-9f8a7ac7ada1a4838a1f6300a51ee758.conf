name: scientific
version: 0.3.3.8
id: scientific-0.3.3.8-9f8a7ac7ada1a4838a1f6300a51ee758
license: BSD3
copyright:
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
stability:
homepage: https://github.com/basvandijk/scientific
package-url:
synopsis: Numbers represented using scientific notation
description: @Data.Scientific@ provides a space efficient and arbitrary precision
             scientific number type.
             .
             'Scientific' numbers are represented using
             <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>. It
             uses a coefficient @c :: 'Integer'@ and a base-10 exponent @e :: 'Int'@ (do
             note that since we're using an 'Int' to represent the exponent these numbers
             aren't truly arbitrary precision). A scientific number corresponds to the
             'Fractional' number: @'fromInteger' c * 10 '^^' e@.
             .
             The main application of 'Scientific' is to be used as the target of parsing
             arbitrary precision numbers coming from an untrusted source. The advantages
             over using 'Rational' for this are that:
             .
             * A 'Scientific' is more efficient to construct. Rational numbers need to be
             constructed using '%' which has to compute the 'gcd' of the 'numerator' and
             'denominator'.
             .
             * 'Scientific' is safe against numbers with huge exponents. For example:
             @1e1000000000 :: 'Rational'@ will fill up all space and crash your
             program. Scientific works as expected:
             .
             > > read "1e1000000000" :: Scientific
             > 1.0e1000000000
             .
             * Also, the space usage of converting scientific numbers with huge exponents to
             @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
             will always be bounded by the target type.
category: Data
author: Bas van Dijk
exposed: True
exposed-modules: Data.Scientific Data.Text.Lazy.Builder.Scientific
                 Data.ByteString.Builder.Scientific
hidden-modules: Math.NumberTheory.Logarithms
trusted: False
import-dirs: /home/anand/Development/as/backend/ws-as-instance/.stack-work/install/x86_64-linux/ghc-7.8/7.8.3/lib/x86_64-linux-ghc-7.8.3/scientific-0.3.3.8
library-dirs: /home/anand/Development/as/backend/ws-as-instance/.stack-work/install/x86_64-linux/ghc-7.8/7.8.3/lib/x86_64-linux-ghc-7.8.3/scientific-0.3.3.8
hs-libraries: HSscientific-0.3.3.8
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: array-0.5.0.0-b8a3e03cc1fe2faa719c34f245086f0e
         base-4.7.0.1-1a55ebc8256b39ccbff004d48b3eb834
         bytestring-0.10.4.0-aeb2ba35f192516ed4298f0656cc3a85
         deepseq-1.3.0.2-8f63133c1b77f3b3190f04893cf340e4
         ghc-prim-0.3.1.0-954cb57749cf319beafdc89b3415422c
         hashable-1.2.3.3-ec0a0a43ab2b3bfaeb089bd345c361ed
         integer-gmp-0.5.1.0-d42e6a7874a019e6a0d1c7305ebc83c4
         text-1.2.1.1-c8af310d32a70368010aa9ac9cc4c9f6
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: /home/anand/Development/as/backend/ws-as-instance/.stack-work/install/x86_64-linux/ghc-7.8/7.8.3/doc/scientific-0.3.3.8/scientific.haddock
haddock-html: /home/anand/Development/as/backend/ws-as-instance/.stack-work/install/x86_64-linux/ghc-7.8/7.8.3/doc/scientific-0.3.3.8
