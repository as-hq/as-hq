-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Initial project template from stack
--   
--   Please see README.md
@package alphasheets
@version 0.1.0.0

module AS.Config.Settings
frontend_url :: String
wsAddress :: String
wsPort :: Int
graphDbHost :: String
isDebug :: Bool

module AS.Types

-- | Sheets
type ASSheetId = Text
data ASSheet
Sheet :: ASSheetId -> String -> ASPermissions -> ASSheet
sheetId :: ASSheet -> ASSheetId
sheetName :: ASSheet -> String
sheetPermissions :: ASSheet -> ASPermissions
data ASWorkbook
Workbook :: String -> [ASSheetId] -> ASWorkbook
workbookName :: ASWorkbook -> String
workbookSheets :: ASWorkbook -> [ASSheetId]
data WorkbookSheet
WorkbookSheet :: String -> [ASSheet] -> WorkbookSheet
wsName :: WorkbookSheet -> String
wsSheets :: WorkbookSheet -> [ASSheet]

-- | Core cell types
data ASLocation
Index :: ASSheetId -> (Int, Int) -> ASLocation
locSheetId :: ASLocation -> ASSheetId
index :: ASLocation -> (Int, Int)
Range :: ASSheetId -> ((Int, Int), (Int, Int)) -> ASLocation
locSheetId :: ASLocation -> ASSheetId
range :: ASLocation -> ((Int, Int), (Int, Int))
Column :: ASSheetId -> Int -> ASLocation
locSheetId :: ASLocation -> ASSheetId
column :: ASLocation -> Int
data ASValue
NoValue :: ASValue
ValueNaN :: () -> ASValue
ValueS :: String -> ASValue
ValueI :: Int -> ASValue
ValueD :: Double -> ASValue
ValueB :: Bool -> ASValue
ValueL :: [ASValue] -> ASValue
ExcelSheet :: ASValue -> ASValue -> ASValue -> ASValue
locs :: ASValue -> ASValue
exprs :: ASValue -> ASValue
vals :: ASValue -> ASValue
Rickshaw :: ASValue -> ASValue
rickshawData :: ASValue -> ASValue
ValueError :: String -> String -> String -> Int -> ASValue
error :: ASValue -> String
err_type :: ASValue -> String
file :: ASValue -> String
position :: ASValue -> Int
ValueImage :: String -> ASValue
imagePath :: ASValue -> String
StockChart :: ASValue -> String -> ASValue
stockPrices :: ASValue -> ASValue
stockName :: ASValue -> String
ObjectValue :: String -> String -> ASValue
objectType :: ASValue -> String
jsonRepresentation :: ASValue -> String
StyledValue :: String -> ASValue -> ASValue
style :: ASValue -> String
value :: ASValue -> ASValue
DisplayValue :: String -> ASValue -> ASValue
displayValue :: ASValue -> String
actualValue :: ASValue -> ASValue
ValueE :: ASEvalError -> ASValue
data ASLangValue
LangValue :: ASValue -> ASLanguage -> ASLangValue
langValue :: ASLangValue -> ASValue
lang :: ASLangValue -> ASLanguage
type ASEvalError = String
data ASLanguage
R :: ASLanguage
Python :: ASLanguage
OCaml :: ASLanguage
CPP :: ASLanguage
Java :: ASLanguage
SQL :: ASLanguage
Excel :: ASLanguage
data ASExpression
Expression :: String -> ASLanguage -> ASExpression
expression :: ASExpression -> String
language :: ASExpression -> ASLanguage
Reference :: ASLocation -> (Int, Int) -> ASExpression
location :: ASExpression -> ASLocation
referenceIndex :: ASExpression -> (Int, Int)
data ASCellTag
Color :: String -> ASCellTag
Size :: Int -> ASCellTag
Money :: ASCellTag
Percentage :: ASCellTag
StreamTag :: Stream -> ASCellTag
Tracking :: ASCellTag
Volatile :: ASCellTag
ReadOnly :: [ASUserId] -> ASCellTag
data ASCell
Cell :: ASLocation -> ASExpression -> ASValue -> [ASCellTag] -> ASCell
cellLocation :: ASCell -> ASLocation
cellExpression :: ASCell -> ASExpression
cellValue :: ASCell -> ASValue
cellTags :: ASCell -> [ASCellTag]

-- | Excel
data ExLoc
ExSheet :: String -> ExLoc -> ExLoc
name :: ExLoc -> String
sheetLoc :: ExLoc -> ExLoc
ExRange :: ExLoc -> ExLoc -> ExLoc
first :: ExLoc -> ExLoc
second :: ExLoc -> ExLoc
ExIndex :: String -> String -> String -> String -> ExLoc
d1 :: ExLoc -> String
col :: ExLoc -> String
d2 :: ExLoc -> String
row :: ExLoc -> String
data ExcelAction
Lookup :: ExcelAction
CheckIndirectRef :: ExcelAction
LookupSheets :: ExcelAction
LookupWorkbooks :: ExcelAction
CurrentLocation :: ExcelAction
data ExcelPayload
NoPayload :: ExcelPayload

-- | Streaming | Stream sources
data Bloomberg
Bloomberg :: String -> String -> Bloomberg
url :: Bloomberg -> String
key :: Bloomberg -> String
data StreamSource
StreamB :: Bloomberg -> StreamSource
NoSource :: StreamSource

-- | A stream just needs a source and a frequency
data Stream
Stream :: StreamSource -> Int -> Stream
streamSource :: Stream -> StreamSource
streamFreq :: Stream -> Int

-- | Message Types
data ASMessage
Message :: ASUserId -> ASAction -> ASResult -> ASPayload -> ASMessage
messageUserId :: ASMessage -> ASUserId
action :: ASMessage -> ASAction
result :: ASMessage -> ASResult
payload :: ASMessage -> ASPayload
data ASAction
NoAction :: ASAction
Acknowledge :: ASAction
New :: ASAction
Import :: ASAction
Open :: ASAction
Close :: ASAction
Evaluate :: ASAction
EvaluateRepl :: ASAction
Update :: ASAction
Get :: ASAction
Delete :: ASAction
Copy :: ASAction
CopyForced :: ASAction
Undo :: ASAction
Redo :: ASAction
Clear :: ASAction
UpdateWindow :: ASAction
AddTags :: ASAction
RemoveTags :: ASAction
data ASResult
Success :: ASResult
Failure :: String -> ASResult
failDesc :: ASResult -> String
NoResult :: ASResult
data QueryList
Sheets :: QueryList
Workbooks :: QueryList
WorkbookSheets :: QueryList
data ASPayload
PayloadN :: () -> ASPayload
PayloadInit :: ASInitConnection -> ASPayload
PayloadDaemonInit :: ASInitDaemonConnection -> ASPayload
PayloadC :: ASCell -> ASPayload
PayloadCL :: [ASCell] -> ASPayload
PayloadL :: ASLocation -> ASPayload
PayloadLL :: [ASLocation] -> ASPayload
PayloadS :: ASSheet -> ASPayload
PayloadSS :: [ASSheet] -> ASPayload
PayloadWB :: ASWorkbook -> ASPayload
PayloadWBS :: [ASWorkbook] -> ASPayload
PayloadWorkbookSheets :: [WorkbookSheet] -> ASPayload
PayloadW :: ASWindow -> ASPayload
PayloadU :: ASUserId -> ASPayload
PayloadE :: ASExecError -> ASPayload
PayloadCommit :: ASCommit -> ASPayload
PayloadTags :: [ASCellTag] -> ASLocation -> ASPayload
tags :: ASPayload -> [ASCellTag]
tagsLoc :: ASPayload -> ASLocation
PayloadXp :: ASExpression -> ASPayload
PayloadLangValue :: ASLangValue -> ASPayload
PayloadList :: QueryList -> ASPayload

-- | Eval Types
data ASExecError
Timeout :: ASExecError
EvaluationError :: String -> ASExecError
evalErrorDesc :: ASExecError -> String
DependenciesLocked :: ASUserId -> ASExecError
lockUserId :: ASExecError -> ASUserId
DBNothingException :: [ASLocation] -> ASExecError
badLocs :: ASExecError -> [ASLocation]
DBGraphUnreachable :: ASExecError
NetworkDown :: ASExecError
ResourceLimitReached :: ASExecError
InsufficientPermissions :: ASExecError
NonUniqueIdentifier :: ASExecError
CopyNonexistentDependencies :: ASExecError
type EitherCells = Either ASExecError [ASCell]

-- | Websocket types
data ASInitConnection
ASInitConnection :: ASUserId -> ASInitConnection
connUserId :: ASInitConnection -> ASUserId
data ASInitDaemonConnection
ASInitDaemonConnection :: ASUserId -> ASLocation -> ASInitDaemonConnection
parentUserId :: ASInitDaemonConnection -> ASUserId
initDaemonLoc :: ASInitDaemonConnection -> ASLocation
data ASDaemon
ASDaemon :: ASLocation -> Connection -> ASDaemon
daemonLoc :: ASDaemon -> ASLocation
daemonConn :: ASDaemon -> Connection

-- | Database and state
data ServerState
State :: [(ASUser, [ASDaemon])] -> Connection -> ServerState
userList :: ServerState -> [(ASUser, [ASDaemon])]
dbConn :: ServerState -> Connection
data GraphQuery
GetDescendants :: GraphQuery
GetImmediateAncestors :: GraphQuery
SetRelations :: GraphQuery

-- | Users
data ASWindow
Window :: ASSheetId -> (Int, Int) -> (Int, Int) -> ASWindow
windowSheetId :: ASWindow -> ASSheetId
topLeft :: ASWindow -> (Int, Int)
bottomRight :: ASWindow -> (Int, Int)
type ASUserId = Text
data ASUser
User :: ASUserId -> Connection -> [ASWindow] -> ASUser
userId :: ASUser -> ASUserId
userConn :: ASUser -> Connection
userWindows :: ASUser -> [ASWindow]
data ASUserGroup
Group :: [ASUserId] -> [ASUserId] -> Text -> ASUserGroup
groupMembers :: ASUserGroup -> [ASUserId]
groupAdmins :: ASUserGroup -> [ASUserId]
groupName :: ASUserGroup -> Text
data ASEntity
EntityGroup :: ASUserGroup -> ASEntity
EntityUser :: ASUserId -> ASEntity
data ASPermissions
Blacklist :: [ASEntity] -> ASPermissions
Whitelist :: [ASEntity] -> ASPermissions

-- | Version Control
data ASTime
Time :: String -> Int -> Int -> Int -> ASTime
day :: ASTime -> String
hour :: ASTime -> Int
min :: ASTime -> Int
sec :: ASTime -> Int
data ASCommit
ASCommit :: ASUserId -> [ASCell] -> [ASCell] -> ASTime -> ASCommit
commitUserId :: ASCommit -> ASUserId
before :: ASCommit -> [ASCell]
after :: ASCommit -> [ASCell]
time :: ASCommit -> ASTime

-- | Convenience methods
lst :: ASValue -> [ASValue]
str :: ASValue -> String
dbl :: ASValue -> Double
failureMessage :: String -> ASMessage
initialViewingWindow :: ASWindow

-- | When sending data from server to client, the server doesn't have a
--   userId
genericText :: Text
openPermissions :: ASPermissions

-- | Generic From/To JSON instances
instance Show ASWorkbook
instance Read ASWorkbook
instance Eq ASWorkbook
instance Generic ASWorkbook
instance Show ASLocation
instance Read ASLocation
instance Eq ASLocation
instance Generic ASLocation
instance Ord ASLocation
instance Show ASValue
instance Read ASValue
instance Eq ASValue
instance Generic ASValue
instance Show ASLanguage
instance Read ASLanguage
instance Eq ASLanguage
instance Generic ASLanguage
instance Show ASLangValue
instance Read ASLangValue
instance Eq ASLangValue
instance Generic ASLangValue
instance Show ASExpression
instance Read ASExpression
instance Eq ASExpression
instance Generic ASExpression
instance Show ExLoc
instance Read ExLoc
instance Eq ExLoc
instance Ord ExLoc
instance Show ExcelAction
instance Read ExcelAction
instance Show ExcelPayload
instance Read ExcelPayload
instance Show Bloomberg
instance Read Bloomberg
instance Eq Bloomberg
instance Generic Bloomberg
instance Show StreamSource
instance Read StreamSource
instance Eq StreamSource
instance Generic StreamSource
instance Show Stream
instance Read Stream
instance Eq Stream
instance Generic Stream
instance Show ASAction
instance Read ASAction
instance Eq ASAction
instance Generic ASAction
instance Show ASResult
instance Read ASResult
instance Eq ASResult
instance Generic ASResult
instance Show QueryList
instance Read QueryList
instance Eq QueryList
instance Generic QueryList
instance Show GraphQuery
instance Show ASWindow
instance Read ASWindow
instance Eq ASWindow
instance Generic ASWindow
instance Show ASInitDaemonConnection
instance Read ASInitDaemonConnection
instance Eq ASInitDaemonConnection
instance Generic ASInitDaemonConnection
instance Show ASInitConnection
instance Read ASInitConnection
instance Eq ASInitConnection
instance Generic ASInitConnection
instance Show ASExecError
instance Read ASExecError
instance Eq ASExecError
instance Generic ASExecError
instance Show ASCellTag
instance Read ASCellTag
instance Eq ASCellTag
instance Generic ASCellTag
instance Show ASCell
instance Read ASCell
instance Eq ASCell
instance Generic ASCell
instance Show ASUserGroup
instance Read ASUserGroup
instance Eq ASUserGroup
instance Generic ASUserGroup
instance Show ASEntity
instance Read ASEntity
instance Eq ASEntity
instance Generic ASEntity
instance Show ASPermissions
instance Read ASPermissions
instance Eq ASPermissions
instance Generic ASPermissions
instance Show ASSheet
instance Read ASSheet
instance Eq ASSheet
instance Generic ASSheet
instance Show WorkbookSheet
instance Read WorkbookSheet
instance Eq WorkbookSheet
instance Generic WorkbookSheet
instance Show ASTime
instance Read ASTime
instance Eq ASTime
instance Generic ASTime
instance Show ASCommit
instance Read ASCommit
instance Eq ASCommit
instance Generic ASCommit
instance Show ASPayload
instance Read ASPayload
instance Eq ASPayload
instance Generic ASPayload
instance Show ASMessage
instance Read ASMessage
instance Eq ASMessage
instance Generic ASMessage
instance Datatype D1ASWorkbook
instance Constructor C1_0ASWorkbook
instance Selector S1_0_0ASWorkbook
instance Selector S1_0_1ASWorkbook
instance Datatype D1ASLocation
instance Constructor C1_0ASLocation
instance Constructor C1_1ASLocation
instance Constructor C1_2ASLocation
instance Selector S1_0_0ASLocation
instance Selector S1_0_1ASLocation
instance Selector S1_1_0ASLocation
instance Selector S1_1_1ASLocation
instance Selector S1_2_0ASLocation
instance Selector S1_2_1ASLocation
instance Datatype D1ASValue
instance Constructor C1_0ASValue
instance Constructor C1_1ASValue
instance Constructor C1_2ASValue
instance Constructor C1_3ASValue
instance Constructor C1_4ASValue
instance Constructor C1_5ASValue
instance Constructor C1_6ASValue
instance Constructor C1_7ASValue
instance Constructor C1_8ASValue
instance Constructor C1_9ASValue
instance Constructor C1_10ASValue
instance Constructor C1_11ASValue
instance Constructor C1_12ASValue
instance Constructor C1_13ASValue
instance Constructor C1_14ASValue
instance Constructor C1_15ASValue
instance Selector S1_7_0ASValue
instance Selector S1_7_1ASValue
instance Selector S1_7_2ASValue
instance Selector S1_8_0ASValue
instance Selector S1_9_0ASValue
instance Selector S1_9_1ASValue
instance Selector S1_9_2ASValue
instance Selector S1_9_3ASValue
instance Selector S1_10_0ASValue
instance Selector S1_11_0ASValue
instance Selector S1_11_1ASValue
instance Selector S1_12_0ASValue
instance Selector S1_12_1ASValue
instance Selector S1_13_0ASValue
instance Selector S1_13_1ASValue
instance Selector S1_14_0ASValue
instance Selector S1_14_1ASValue
instance Datatype D1ASLanguage
instance Constructor C1_0ASLanguage
instance Constructor C1_1ASLanguage
instance Constructor C1_2ASLanguage
instance Constructor C1_3ASLanguage
instance Constructor C1_4ASLanguage
instance Constructor C1_5ASLanguage
instance Constructor C1_6ASLanguage
instance Datatype D1ASLangValue
instance Constructor C1_0ASLangValue
instance Selector S1_0_0ASLangValue
instance Selector S1_0_1ASLangValue
instance Datatype D1ASExpression
instance Constructor C1_0ASExpression
instance Constructor C1_1ASExpression
instance Selector S1_0_0ASExpression
instance Selector S1_0_1ASExpression
instance Selector S1_1_0ASExpression
instance Selector S1_1_1ASExpression
instance Datatype D1Bloomberg
instance Constructor C1_0Bloomberg
instance Selector S1_0_0Bloomberg
instance Selector S1_0_1Bloomberg
instance Datatype D1StreamSource
instance Constructor C1_0StreamSource
instance Constructor C1_1StreamSource
instance Datatype D1Stream
instance Constructor C1_0Stream
instance Selector S1_0_0Stream
instance Selector S1_0_1Stream
instance Datatype D1ASAction
instance Constructor C1_0ASAction
instance Constructor C1_1ASAction
instance Constructor C1_2ASAction
instance Constructor C1_3ASAction
instance Constructor C1_4ASAction
instance Constructor C1_5ASAction
instance Constructor C1_6ASAction
instance Constructor C1_7ASAction
instance Constructor C1_8ASAction
instance Constructor C1_9ASAction
instance Constructor C1_10ASAction
instance Constructor C1_11ASAction
instance Constructor C1_12ASAction
instance Constructor C1_13ASAction
instance Constructor C1_14ASAction
instance Constructor C1_15ASAction
instance Constructor C1_16ASAction
instance Constructor C1_17ASAction
instance Constructor C1_18ASAction
instance Datatype D1ASResult
instance Constructor C1_0ASResult
instance Constructor C1_1ASResult
instance Constructor C1_2ASResult
instance Selector S1_1_0ASResult
instance Datatype D1QueryList
instance Constructor C1_0QueryList
instance Constructor C1_1QueryList
instance Constructor C1_2QueryList
instance Datatype D1ASWindow
instance Constructor C1_0ASWindow
instance Selector S1_0_0ASWindow
instance Selector S1_0_1ASWindow
instance Selector S1_0_2ASWindow
instance Datatype D1ASInitDaemonConnection
instance Constructor C1_0ASInitDaemonConnection
instance Selector S1_0_0ASInitDaemonConnection
instance Selector S1_0_1ASInitDaemonConnection
instance Datatype D1ASInitConnection
instance Constructor C1_0ASInitConnection
instance Selector S1_0_0ASInitConnection
instance Datatype D1ASExecError
instance Constructor C1_0ASExecError
instance Constructor C1_1ASExecError
instance Constructor C1_2ASExecError
instance Constructor C1_3ASExecError
instance Constructor C1_4ASExecError
instance Constructor C1_5ASExecError
instance Constructor C1_6ASExecError
instance Constructor C1_7ASExecError
instance Constructor C1_8ASExecError
instance Constructor C1_9ASExecError
instance Selector S1_1_0ASExecError
instance Selector S1_2_0ASExecError
instance Selector S1_3_0ASExecError
instance Datatype D1ASCellTag
instance Constructor C1_0ASCellTag
instance Constructor C1_1ASCellTag
instance Constructor C1_2ASCellTag
instance Constructor C1_3ASCellTag
instance Constructor C1_4ASCellTag
instance Constructor C1_5ASCellTag
instance Constructor C1_6ASCellTag
instance Constructor C1_7ASCellTag
instance Datatype D1ASCell
instance Constructor C1_0ASCell
instance Selector S1_0_0ASCell
instance Selector S1_0_1ASCell
instance Selector S1_0_2ASCell
instance Selector S1_0_3ASCell
instance Datatype D1ASUserGroup
instance Constructor C1_0ASUserGroup
instance Selector S1_0_0ASUserGroup
instance Selector S1_0_1ASUserGroup
instance Selector S1_0_2ASUserGroup
instance Datatype D1ASEntity
instance Constructor C1_0ASEntity
instance Constructor C1_1ASEntity
instance Datatype D1ASPermissions
instance Constructor C1_0ASPermissions
instance Constructor C1_1ASPermissions
instance Datatype D1ASSheet
instance Constructor C1_0ASSheet
instance Selector S1_0_0ASSheet
instance Selector S1_0_1ASSheet
instance Selector S1_0_2ASSheet
instance Datatype D1WorkbookSheet
instance Constructor C1_0WorkbookSheet
instance Selector S1_0_0WorkbookSheet
instance Selector S1_0_1WorkbookSheet
instance Datatype D1ASTime
instance Constructor C1_0ASTime
instance Selector S1_0_0ASTime
instance Selector S1_0_1ASTime
instance Selector S1_0_2ASTime
instance Selector S1_0_3ASTime
instance Datatype D1ASCommit
instance Constructor C1_0ASCommit
instance Selector S1_0_0ASCommit
instance Selector S1_0_1ASCommit
instance Selector S1_0_2ASCommit
instance Selector S1_0_3ASCommit
instance Datatype D1ASPayload
instance Constructor C1_0ASPayload
instance Constructor C1_1ASPayload
instance Constructor C1_2ASPayload
instance Constructor C1_3ASPayload
instance Constructor C1_4ASPayload
instance Constructor C1_5ASPayload
instance Constructor C1_6ASPayload
instance Constructor C1_7ASPayload
instance Constructor C1_8ASPayload
instance Constructor C1_9ASPayload
instance Constructor C1_10ASPayload
instance Constructor C1_11ASPayload
instance Constructor C1_12ASPayload
instance Constructor C1_13ASPayload
instance Constructor C1_14ASPayload
instance Constructor C1_15ASPayload
instance Constructor C1_16ASPayload
instance Constructor C1_17ASPayload
instance Constructor C1_18ASPayload
instance Constructor C1_19ASPayload
instance Selector S1_16_0ASPayload
instance Selector S1_16_1ASPayload
instance Datatype D1ASMessage
instance Constructor C1_0ASMessage
instance Selector S1_0_0ASMessage
instance Selector S1_0_1ASMessage
instance Selector S1_0_2ASMessage
instance Selector S1_0_3ASMessage
instance ToJSON ASLangValue
instance FromJSON ASLangValue
instance ToJSON WorkbookSheet
instance FromJSON WorkbookSheet
instance ToJSON ASWorkbook
instance FromJSON ASWorkbook
instance ToJSON QueryList
instance FromJSON QueryList
instance ToJSON ASPermissions
instance FromJSON ASPermissions
instance ToJSON ASUserGroup
instance FromJSON ASUserGroup
instance ToJSON ASEntity
instance FromJSON ASEntity
instance ToJSON ASInitDaemonConnection
instance FromJSON ASInitDaemonConnection
instance FromJSON Bloomberg
instance ToJSON Bloomberg
instance FromJSON Stream
instance ToJSON Stream
instance FromJSON StreamSource
instance ToJSON StreamSource
instance FromJSON ASSheet
instance ToJSON ASSheet
instance FromJSON ASWindow
instance ToJSON ASWindow
instance FromJSON ASCellTag
instance ToJSON ASCellTag
instance FromJSON ASCommit
instance ToJSON ASCommit
instance ToJSON ASTime
instance FromJSON ASTime
instance FromJSON ASExecError
instance ToJSON ASExecError
instance FromJSON ASInitConnection
instance ToJSON ASInitConnection
instance FromJSON ASMessage
instance ToJSON ASMessage
instance FromJSON ASPayload
instance ToJSON ASPayload
instance FromJSON ASResult
instance ToJSON ASResult
instance FromJSON ASAction
instance ToJSON ASAction
instance FromJSON ASCell
instance ToJSON ASCell
instance FromJSON ASExpression
instance ToJSON ASExpression
instance FromJSON ASLanguage
instance ToJSON ASLanguage
instance FromJSON ASValue
instance ToJSON ASValue
instance FromJSON ASLocation
instance ToJSON ASLocation
instance Eq ASUser
instance Eq ASDaemon

module AS.Util

-- | Misc
lastN :: Int -> [a] -> [a]
lastN' :: Int -> [a] -> [a]
every :: Int -> [a] -> [a]
(<++>) :: Applicative f => f [a] -> f [a] -> f [a]
(<:>) :: Applicative f => f a -> f [a] -> f [a]
fromRight :: Either a b -> b
lookupLambda :: Eq a => (b -> a) -> a -> [b] -> Maybe b
max' :: Ord a => a -> a -> a
min' :: Ord a => a -> a -> a
fromJustList :: [Maybe a] -> [a]
filterNothing :: [Maybe a] -> [a]
isoFilter :: (a -> Bool) -> [a] -> [b] -> [b]
isSubsetOf :: Eq a => [a] -> [a] -> Bool
maxBy :: Ord a => (b -> a) -> [b] -> b
minBy :: Ord a => (b -> a) -> [b] -> b
isRight :: Either a b -> Bool
isAllRight :: [Either a b] -> Bool
deleteSubset :: Eq a => [a] -> [a] -> [a]

-- | Key-value manip functions
delFromAL :: Eq key => [(key, a)] -> key -> [(key, a)]
addToAL :: Eq key => [(key, elt)] -> key -> elt -> [(key, elt)]

-- | Conversions and Helpers
isJust :: Maybe ASCell -> Bool
getCellMessage :: ASUser -> Either ASExecError [ASCell] -> ASMessage
getBadLocs :: [ASLocation] -> [Maybe ASCell] -> [ASLocation]
getDBCellMessage :: ASUser -> [ASLocation] -> [Maybe ASCell] -> ASMessage
isColumn :: ASLocation -> Bool

-- | Error Handling
--   
--   Not yet implemented
generateErrorMessage :: ASExecError -> String

-- | Time
getTime :: IO String
printTimed :: String -> IO ()

-- | Not yet implemented
getASTime :: IO ASTime

-- | Id management
getUniqueId :: IO Text

-- | viewing windows
intersectViewingWindows :: [ASCell] -> [ASWindow] -> [ASCell]
intersectViewingWindowsLocs :: [ASLocation] -> [ASWindow] -> [ASLocation]
updateWindow :: ASWindow -> ASUser -> ASUser
getWindow :: ASSheetId -> ASUser -> Maybe ASWindow
getScrolledLocs :: ASWindow -> ASWindow -> [ASLocation]
getUncoveredLocs :: ASSheetId -> ((Int, Int), (Int, Int)) -> ((Int, Int), (Int, Int)) -> [ASLocation]
getAllUserWindows :: ServerState -> [(ASUserId, [ASWindow])]

-- | Locations
decomposeLocs :: ASLocation -> [ASLocation]
matchSheets :: [ASWorkbook] -> [ASSheet] -> [WorkbookSheet]
shiftLoc :: (Int, Int) -> ASLocation -> ASLocation
getTopLeft :: ASLocation -> ASLocation
getOffsetBetweenLocs :: ASLocation -> ASLocation -> (Int, Int)

-- | Users
updateMessageUser :: ASUserId -> ASMessage -> ASMessage
isGroupMember :: ASUserId -> ASUserGroup -> Bool
isGroupAdmin :: ASUserId -> ASUserGroup -> Bool
isInEntity :: ASUserId -> ASEntity -> Bool
hasPermissions :: ASUserId -> ASPermissions -> Bool

-- | Tags
containsTrackingTag :: [ASCellTag] -> Bool
hasVolatileTag :: ASCell -> Bool
containsVolatileTag :: [ASCellTag] -> Bool
getStreamTag :: [ASCellTag] -> Maybe Stream

-- | Would look at an expression like TODAY()+DAY() and get the stream tag
--   (update every 10 seconds if any of today etc show up) | TODO:
--   implement
getStreamTagFromExpression :: ASExpression -> Maybe Stream

module AS.Config.Paths
py_eval_path :: String
py_libs_path :: String
py_template_file :: String
py_eval_file :: String
py_run_file :: String
getEvalPath :: IO String

module AS.Parsing.Common
deleteEmpty :: [String] -> [String]
skip :: Parser a -> Parser String
regexList :: String -> String -> [String]
replaceSubstrings :: String -> [(String, String)] -> String
sortStrList :: (String, String) -> (String, String) -> Ordering
normalizeRanges :: [ASLocation] -> [ASLocation]
getOffsets :: ASLocation -> [(Int, Int)]
rangeDiff :: ((Int, Int), (Int, Int)) -> (Int, Int)
reshapeColArr :: [a] -> (Int, Int) -> [[a]]
getDelimitedSubstring :: String -> String -> Int -> String
getLine :: String -> Int -> String
stripString :: String -> String
tryParseList :: Parser a -> [String] -> [Maybe a]
tryParseListNonIso :: Parser a -> [String] -> [a]

module AS.Parsing.In
removeBrackets :: String -> String
double :: Parser Double
int :: Parser Int
valueD :: Parser ASValue
valueI :: Parser ASValue
readBool :: String -> Bool
bool :: ASLanguage -> Parser Bool
valueB :: ASLanguage -> Parser ASValue
valueS :: Parser ASValue
valueL :: ASLanguage -> Parser ASValue
extractValue :: Map String ASValue -> ASValue
complexValue :: Parser ASValue
ocamlError :: Parser ASValue
asValue :: ASLanguage -> Parser ASValue
parseValue :: ASLanguage -> String -> ASValue

module AS.Parsing.Out
toListStr :: ASLanguage -> [String] -> String
modifiedLists :: ASLanguage -> String -> String
getBlockDelim :: ASLanguage -> String
getInlineDelim :: ASLanguage -> String
jsonDeserialize :: ASLanguage -> String -> String -> String
bool :: ASLanguage -> String -> String
showValue :: ASLanguage -> ASValue -> String
showFilteredValue :: ASLanguage -> ASValue -> String
parseNext :: Parser t -> Parser (String, t)
parseMatches :: Parser t -> Parser [t]
parseMatchesWithContext :: Parser t -> Parser ([String], [t])
getMatchesWithContext :: String -> Parser t -> ([String], [t])
replaceMatches :: ([String], [t]) -> (t -> String) -> String -> String
exLocToString :: ExLoc -> String
exLocToASLocation :: ASSheetId -> ExLoc -> ASLocation
dollar :: Parser String
colon :: Parser String
exc :: Parser String
sheetMatch :: Parser String
indexMatch :: Parser ExLoc
rangeMatch :: Parser ExLoc
sheetRefMatch :: Parser ExLoc
excelMatch :: Parser ExLoc
colStrToInt :: String -> Int
intToColStr :: Int -> String
indexToExcel :: (Int, Int) -> String
shiftExLoc :: (Int, Int) -> ExLoc -> ExLoc
shiftExLocs :: (Int, Int) -> [ExLoc] -> [ExLoc]
dependenciesFromExceLLoc :: ASSheetId -> ExLoc -> [ASLocation]
getDependenciesAndExpressions :: ASSheetId -> ASExpression -> [(Int, Int)] -> ([[ASLocation]], [ASExpression])
getDependencies :: ASSheetId -> [ExLoc] -> [(Int, Int)] -> [[ASLocation]]
unpackExcelLocs :: ASValue -> [(Int, Int)]
unpackExcelExprs :: ASValue -> [String]
unpackExcelVals :: ASValue -> [ASValue]
shiftCell :: (Int, Int) -> ASCell -> (ASCell, [ASLocation])

module AS.Eval.Lang
pid :: String
importFile :: ASLanguage -> (String, String, String) -> String
getTemplate :: ASLanguage -> IO String
getReplTemplate :: ASLanguage -> IO String
getRunFile :: ASLanguage -> IO String
getRunReplFile :: ASLanguage -> IO String
getReplRecord :: ASLanguage -> IO String
getReplRecordFile :: ASLanguage -> IO String
getRunnerCmd :: ASLanguage -> String
getRunnerCmdRepl :: ASLanguage -> String
getRunnerArgs :: ASLanguage -> IO [String]
layoutCodeFile :: ASLanguage -> (String, String, String) -> String
formatRunArgs :: ASLanguage -> String -> String -> [String] -> String
addCompileCmd :: ASLanguage -> String -> IO String
interpolateFile :: ASLanguage -> String -> IO String
interpolateFileRepl :: ASLanguage -> String -> IO String
lookupString :: ASLanguage -> Map ASLocation ASValue -> ASLocation -> String
interpolate :: ASSheetId -> Map ASLocation ASValue -> ASExpression -> String
insertPrintCmd :: ASLanguage -> (String, String) -> String
printCmd :: ASLanguage -> String -> String
splitLastCmd :: ASLanguage -> String -> (String, String)

module AS.Parsing.Eval
printed :: ASLanguage -> Parser String
replacePrintStmt :: ASLanguage -> Parser (String, String)
tryPrintingLast :: ASLanguage -> String -> Either () (String, String)
getReplExpressions :: ASLanguage -> String -> (String, String)

module AS.Eval.Core
evalExpression :: ASLocation -> Map ASLocation ASValue -> ASExpression -> IO ASValue
evalCode :: ASSheetId -> Map ASLocation ASValue -> ASExpression -> IO ASValue
evalCodeRepl :: ASExpression -> IO ASValue
evalRef :: ASLocation -> Map ASLocation ASValue -> ASExpression -> IO ASValue
doEval :: ASLanguage -> String -> IO String
writeExecFile :: ASLanguage -> String -> IO ()
writeReplFile :: ASLanguage -> String -> IO ()
writeReplRecord :: ASLanguage -> String -> IO ()
clearReplRecord :: ASLanguage -> IO ()
runFile :: ASLanguage -> IO String
runReplFile :: ASLanguage -> IO String
eval :: String -> ASLanguage -> IO String
readOutput :: ASLanguage -> String -> String -> String
evalString :: ASLanguage -> String -> IO ASValue
pyfiString :: String -> IO String
pyString :: String

module AS.Eval.Middleware

-- | This is middleware for evaluation; we take a cell recieved with the
--   <a>Evaluate</a> action tag and preprocess it
evalMiddleware :: ASCell -> IO ASCell

-- | Middlewares
--   
--   Change the excel expression to a python one and also possibly add a
--   volatile tag evalInitExcel :: ASCell -&gt; IO ASCell evalInitExcel
--   c<tt>(Cell loc xp</tt>(Expression rawXp Excel) val ts) = do initResult
--   &lt;- R.evalExcel xp return $ case initResult of (Left valueE) -&gt;
--   Cell loc xp valueE ts (Right (newXp, isVolatile)) -&gt; case
--   isVolatile of False -&gt; Cell loc newXp val ts True -&gt; case
--   (U.hasVolatileTag c) of True -&gt; Cell loc newXp val ts False -&gt;
--   Cell loc newXp val (Volatile:ts) evalInitExcel cell = return cell
evalConnector :: ASCell -> IO ASCell

module AS.Dispatch.Repl
runReplDispatch :: ASUser -> MVar ServerState -> ASMessage -> IO ASMessage

module AS.Daemon

-- | This module just does daemon creation and management
getDaemonName :: ASLocation -> String
daemonExists :: ASUser -> ASLocation -> MVar ServerState -> IO Bool
getConnByLoc :: ASLocation -> MVar ServerState -> IO (Maybe Connection)
possiblyCreateDaemon :: ASUser -> MVar ServerState -> ASMessage -> IO ()
daemonFunc :: Stream -> ASLocation -> ASMessage -> Connection -> IO ()
addDaemon :: ASUser -> MVar ServerState -> Stream -> ASLocation -> ASMessage -> IO ()
removeDaemon :: ASLocation -> MVar ServerState -> IO ()
modifyDaemon :: ASUser -> MVar ServerState -> Stream -> ASLocation -> ASMessage -> IO ()

module AS.Eval.Endware

-- | Here, we apply a stack of endwares. | Endware for producing tags
--   post-eval e.g. streaming or styling | Examples: green(x) in python
--   -&gt; produces styled value with string in output -&gt; string parsed
--   to Color tag | Bloomberg(x) in java -&gt; produces json with stream
--   specs -&gt; converted to Stream tag, kickoff daemon
evalEndware :: ASUser -> MVar ServerState -> ASMessage -> [ASCell] -> IO [ASCell]

-- | Endwares
tagStyledCells :: [ASCell] -> [ASCell]
changeExcelExpressions :: ASCell -> [ASCell] -> [ASCell]

module AS.DB.Util

-- | Settings
dagChunkSize :: Int

-- | Haskell Redis connection object
cInfo :: ConnectInfo

-- | ByteString and Maybe conversions
bStrToASExpression :: Maybe ByteString -> Maybe ASExpression
bStrToASValue :: Maybe ByteString -> Maybe ASValue
bStrToTags :: Maybe ByteString -> Maybe [ASCellTag]
maybeASCell :: (ASLocation, Maybe ASExpression, Maybe ASValue, Maybe [ASCellTag]) -> Maybe ASCell
maybeASCellFromFields :: [Maybe ByteString] -> Maybe ASCell
bStrToASLocation :: ByteString -> ASLocation
bStrToRelation :: (ByteString, ByteString) -> (ASLocation, ASLocation)
bStrToASCommit :: Maybe ByteString -> Maybe ASCommit
bStrToSheet :: Maybe ByteString -> Maybe ASSheet
bStrToWorkbook :: Maybe ByteString -> Maybe ASWorkbook

-- | Redis key utilities
tuple3 :: a -> b -> c -> (a, b, c)
getLocationKey :: ASLocation -> ByteString
getSheetKey :: ASSheetId -> ByteString
getSheetSetKey :: ASSheetId -> ByteString
getWorkbookKey :: String -> ByteString
cellFields :: [ByteString]
keyToRow :: ByteString -> Int
incrementLocKey :: (Int, Int) -> ByteString -> ByteString
getUniquePrefixedName :: String -> [String] -> String

-- | Private functions
getCellByKeyRedis :: ByteString -> Redis (Maybe ASCell)
setCellRedis :: ASCell -> Redis ()
deleteLocRedis :: ASLocation -> Redis ()
getSheetLocsRedis :: ASSheetId -> Redis [ByteString]
updateChunkDAG :: [([ASLocation], ASLocation)] -> Redis ()
chunkM_ :: Connection -> ([a] -> Redis ()) -> (Int) -> [a] -> IO ()
getLastRowKey :: [ByteString] -> ByteString

module AS.DB.API

-- | Storage Documentation
--   
--   Cells key-value hashes key is produced by cellLocation (see
--   DU.getLocationKey) and is unique fields are "cellExpression",
--   "cellValue", "cellTags" with corresponding stringified values
--   
--   DAG same as before: a set of relations access set with key
--   <a>DAGLocSet</a>
--   
--   Sheets stored as key (DU.getSheetKey ASSheetId) value (stringified
--   ASSheet) additionally, the set of all locations belonging to a sheet
--   are stored as set key (DU.getSheetSetKey ASSheetId) members
--   (ASLocationKey) this set is updated automatically during setCells.
--   finally, a record of all sheetKeys is stored as a set with key
--   "sheets" and members (DU.getSheetKey sheetid)
--   
--   Workbooks stored identically to Sheets
--   
--   Commits stored as before, as a list of commits
--   
--   Volatile locs stored as before, as a set with key volatileLocs
--   
--   Cells
getCell :: Connection -> ASLocation -> IO (Maybe ASCell)
getCells :: Connection -> [ASLocation] -> IO [Maybe ASCell]
getCellsByKeys :: Connection -> [ByteString] -> IO [Maybe ASCell]
setCell :: Connection -> ASCell -> IO ()
setCells :: Connection -> [ASCell] -> IO ()
deleteCells :: Connection -> [ASCell] -> IO ()
deleteLocs :: Connection -> [ASLocation] -> IO ()
locationsExist :: Connection -> [ASLocation] -> IO [Bool]
getColumnCells :: Connection -> ASLocation -> IO [Maybe ASCell]

-- | DAG
getDAG :: Connection -> IO [(ASLocation, ASLocation)]
updateDAG :: Connection -> [([ASLocation], ASLocation)] -> IO ()

-- | Commits
--   
--   TODO: need to deal with large commit sizes and max number of commits
--   
--   Deal with updating all DB-related things after an eval
updateAfterEval :: Connection -> ASUser -> ASCell -> [ASCell] -> [ASCell] -> IO ()

-- | Creates and pushes a commit to the DB
addCommit :: Connection -> ASUser -> [ASCell] -> [ASCell] -> IO ()

-- | Return a commit if possible (not possible if you undo past the
--   beginning of time, etc) | Update the DB so that there's always a
--   source of truth (ie we will propagate undo to all relevant users)
undo :: Connection -> IO (Maybe ASCommit)
redo :: Connection -> IO (Maybe ASCommit)
pushCommit :: Connection -> ASCommit -> IO ()

-- | WorkbookSheets (for frontend API)
getAllWorkbookSheets :: Connection -> IO [WorkbookSheet]
createWorkbookSheet :: Connection -> WorkbookSheet -> IO WorkbookSheet
deleteWorkbookSheet :: Connection -> WorkbookSheet -> IO ()
modifyWorkbookSheets :: Connection -> ([ASSheetId] -> [ASSheetId]) -> String -> IO ()

-- | Raw workbooks
createWorkbook :: Connection -> [ASSheetId] -> IO ASWorkbook
getUniqueWbName :: Connection -> IO String
getWorkbook :: Connection -> String -> IO (Maybe ASWorkbook)
getAllWorkbooks :: Connection -> IO [ASWorkbook]
setWorkbook :: Connection -> ASWorkbook -> IO ()
workbookExists :: Connection -> String -> IO Bool
deleteWorkbook :: Connection -> String -> IO ()
deleteWorkbookAndSheets :: Connection -> String -> IO ()

-- | Raw sheets
getSheet :: Connection -> ASSheetId -> IO (Maybe ASSheet)
getAllSheets :: Connection -> IO [ASSheet]
createSheet :: Connection -> ASSheet -> IO ASSheet
setSheet :: Connection -> ASSheet -> IO ()
deleteSheetUnsafe :: Connection -> ASSheetId -> IO ()

-- | Volatile cell methods
getVolatileLocs :: Connection -> IO [ASLocation]
setChunkVolatileCells :: [ASCell] -> Redis ()
deleteChunkVolatileCells :: [ASCell] -> Redis ()

-- | Permissions
canAccessSheet :: Connection -> ASUserId -> ASSheetId -> IO Bool
canAccess :: Connection -> ASUserId -> ASLocation -> IO Bool
canAccessAll :: Connection -> ASUserId -> [ASLocation] -> IO Bool
isPermissibleMessage :: Connection -> ASUserId -> ASMessage -> IO Bool

module AS.Clients

-- | Basic client comms
send :: ASMessage -> Connection -> IO ()
close :: Connection -> IO ()

-- | User Management
getUsers :: ServerState -> [ASUser]
userIdExists :: ASUserId -> ServerState -> Bool
getUserById :: ASUserId -> ServerState -> Maybe ASUser
addUser :: ASUser -> ServerState -> ServerState
removeUser :: ASUser -> ServerState -> IO ServerState
modifyUser :: (ASUser -> ASUser) -> ASUser -> MVar ServerState -> IO ()

-- | Debugging
getScrollCells :: Connection -> ASSheetId -> [ASLocation] -> IO [Maybe ASCell]

module AS.DB.Graph
getDescendants :: [ASLocation] -> IO (Either ASExecError [ASLocation])
getImmediateAncestors :: [ASLocation] -> IO (Either ASExecError [ASLocation])
setRelations :: [(ASLocation, [ASLocation])] -> IO (Either ASExecError ())
query :: GraphQuery -> [ASLocation] -> IO (Either ASExecError [ASLocation])
queryMulti :: GraphQuery -> [[ASLocation]] -> IO (Either ASExecError [ASLocation])

module AS.Dispatch.Core

-- | Regular eval route
--   
--   Go through the regular eval route
runDispatchCycle :: ASUser -> MVar ServerState -> ASMessage -> IO ASMessage

-- | Eval building blocks
--   
--   Takes a cell and returns an error if it tries to access a non-existant
--   cell | Otherwise, it returns all of the immediate ancestors (used to
--   make the lookup map)
updateCell :: Connection -> ASCell -> IO (Either ASExecError ())

-- | Return the descendants of a cell, which will always exist but may be
--   locked | TODO: throw exceptions for permissions/locking
getDescendants :: Connection -> ASCell -> IO (Either ASExecError [ASCell])

-- | Takes ancestors and descendants, create lookup map, and run eval
propagate :: Connection -> [ASCell] -> [ASCell] -> IO (Either ASExecError [ASCell])

-- | Eval helpers
evalChain :: Connection -> Map ASLocation ASValue -> [ASCell] -> IO [ASCell]

-- | Create a list of cells, also modify the DB for references | Not
--   currently handling [[[]]] type things
createListCells :: Connection -> ASLocation -> [ASValue] -> IO [ASCell]

module AS.Handler

-- | Handlers take message payloads and send the response to the client(s)
--   
--   Sending message to client(s)
broadcast :: MVar ServerState -> ASMessage -> IO ()
sendBroadcastFiltered :: ASUser -> MVar ServerState -> ASMessage -> IO ()

-- | Given a message (commit, cells, etc), only send (to each user) the
--   cells in their viewing window
broadcastFiltered :: ASMessage -> [ASUser] -> IO ()
sendToOriginalUser :: ASUser -> ASMessage -> IO ()

-- | Open<i>close</i>import<i>new</i>window handlers
handleNew :: ASUser -> MVar ServerState -> ASMessage -> IO ()
handleOpen :: ASUser -> MVar ServerState -> ASMessage -> IO ()
handleClose :: ASUser -> MVar ServerState -> ASMessage -> IO ()
handleUpdateWindow :: ASUser -> MVar ServerState -> ASMessage -> IO ()
handleImport :: ASUser -> MVar ServerState -> ASMessage -> IO ()

-- | Eval handler
handleEval :: ASUser -> MVar ServerState -> ASMessage -> IO ()
handleEvalRepl :: ASUser -> MVar ServerState -> ASMessage -> IO ()

-- | DB Handlers
handleGet :: ASUser -> MVar ServerState -> ASPayload -> IO ()
handleDelete :: ASUser -> MVar ServerState -> ASPayload -> IO ()
handleClear :: ASUser -> MVar ServerState -> IO ()
handleUndo :: ASUser -> MVar ServerState -> IO ()
handleRedo :: ASUser -> MVar ServerState -> IO ()
handleCopy :: ASUser -> MVar ServerState -> ASPayload -> IO ()
handleCopyForced :: ASUser -> MVar ServerState -> ASPayload -> IO ()

-- | Tag handlers
processAddTag :: ASUser -> MVar ServerState -> ASLocation -> ASMessage -> ASCellTag -> IO ()
processRemoveTag :: ASLocation -> MVar ServerState -> ASCellTag -> IO ()
handleAddTags :: ASUser -> MVar ServerState -> ASMessage -> IO ()
handleRemoveTags :: ASUser -> MVar ServerState -> ASMessage -> IO ()

module Lib
someFunc :: IO ()
