
==================== FINAL INTERFACE ====================
2015-08-20 07:10:36.49542 UTC

interface alphasheets-0.1.0.0:AS.Eval.Middleware 7084
  interface hash: 5ef22dc59a1aec969305061ae69b7a6b
  ABI hash: c68d9a862d9468532a25a619d8f27186
  export-list hash: 86ad097a675cbd486913eeab82330a30
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e156f5ccc0a4b7238641a9085ca60f8f
  used TH splices: False
  where
exports:
  AS.Eval.Middleware.evalConnector
  AS.Eval.Middleware.evalInitExcel
  AS.Eval.Middleware.evalMiddleware
  AS.Eval.Middleware.evalStream
  AS.Eval.Middleware.evalStreamHelper
module dependencies: AS.Config.Paths AS.DB AS.Eval AS.Eval.Lang
                     AS.Parsing.Common AS.Parsing.In AS.Parsing.Out AS.Types AS.Util
package dependencies: SHA-1.6.4.2 aeson-0.8.0.2 array-0.5.0.0
                      attoparsec-0.12.1.6 base base64-bytestring-1.0.0.1 binary-0.7.1.0
                      blaze-builder-0.4.0.1 bytestring-0.10.4.0 case-insensitive-1.2.0.4
                      cereal-0.4.1.1 containers-0.5.5.1 crypto-api-0.13.2 deepseq-1.3.0.2
                      directory-1.2.1.0 dlist-0.7.1.1 entropy-0.3.7 filepath-1.3.0.2
                      ghc-prim hashable-1.2.3.3 integer-gmp mtl-2.1.3.1 network-2.6.2.0
                      old-locale-1.0.0.6 parsec-3.1.9 pretty-1.1.1.1 primitive-0.6
                      process-1.2.0.0 pureMD5-2.1.2.1 pyfi-0.4.0.4 random-1.1
                      regex-base-0.93.2 regex-posix-0.95.2 scientific-0.3.3.8 split-0.2.2
                      strict-0.3.2 tagged-0.7.3 template-haskell text-1.2.0.6 time-1.4.2
                      transformers-0.3.0.0 unix-2.7.0.1 unordered-containers-0.2.5.1
                      vector-0.10.12.3 websockets-0.9.5.0
orphans: aeson-0.8.0.2:Data.Aeson.Types.Generic
         aeson-0.8.0.2:Data.Aeson.Types.Instances
         aeson-0.8.0.2:Data.Aeson.Types.Internal
         alphasheets-0.1.0.0:AS.Eval.Lang alphasheets-0.1.0.0:AS.Parsing.In
         attoparsec-0.12.1.6:Data.Attoparsec.ByteString.Char8 base:GHC.Base
         base:GHC.Float base:GHC.Real binary-0.7.1.0:Data.Binary.Generic
         bytestring-0.10.4.0:Data.ByteString.Builder
         crypto-api-0.13.2:Crypto.Classes crypto-api-0.13.2:Crypto.Random
         hashable-1.2.3.3:Data.Hashable.Generic
         network-2.6.2.0:Network.Socket network-2.6.2.0:Network.Socket.Types
         pyfi-0.4.0.4:Python random-1.1:System.Random
         regex-base-0.93.2:Text.Regex.Base.Context
         regex-posix-0.95.2:Text.Regex.Posix.ByteString
         regex-posix-0.95.2:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2:Text.Regex.Posix.Sequence
         regex-posix-0.95.2:Text.Regex.Posix.String
         template-haskell:Language.Haskell.TH.PprLib text-1.2.0.6:Data.Text
         text-1.2.0.6:Data.Text.Lazy time-1.4.2:Data.Time.Calendar.Gregorian
         time-1.4.2:Data.Time.Format.Parse
         time-1.4.2:Data.Time.LocalTime.LocalTime
         transformers-0.3.0.0:Control.Monad.Trans.Error
         vector-0.10.12.3:Data.Vector.Fusion.Stream
         vector-0.10.12.3:Data.Vector.Unboxed
family instance modules: alphasheets-0.1.0.0:AS.Types
                         attoparsec-0.12.1.6:Data.Attoparsec.Internal.Types
                         base:Control.Applicative base:Data.Either base:Data.Monoid
                         base:Data.Type.Equality base:GHC.Exts base:GHC.Generics
                         dlist-0.7.1.1:Data.DList primitive-0.6:Control.Monad.Primitive
                         text-1.2.0.6:Data.Text text-1.2.0.6:Data.Text.Lazy
                         unordered-containers-0.2.5.1:Data.HashMap.Base
                         unordered-containers-0.2.5.1:Data.HashSet
                         vector-0.10.12.3:Data.Vector vector-0.10.12.3:Data.Vector.Primitive
                         vector-0.10.12.3:Data.Vector.Storable
                         vector-0.10.12.3:Data.Vector.Unboxed
                         vector-0.10.12.3:Data.Vector.Unboxed.Base
import  -/  AS.Eval b5ed8acff9b9c1efea56cfefc3843cec
  exports: 53a629b4df3de569c8af7ea232a42844
  evalExcel aa5a702472b4c0d63f303a6de0534f65
import  -/  AS.Types b606c3629b6c721cf8b97ba4ece45fb1
  exports: 66ecab93115eea25472e439473866aa8
  ASCell 9694dcec8d390971f2871a63000a945c
  ASTime dc8c242f2247030db781fe45c3a4936d
  ASValue b1acb5fd16e89609b5c353aa6b20e24f
  Cell 7c12ca84fa41249c90ef3c2fc51aa59b
  Excel 6f0c1e795df7563c73906c63f4a7551d
  Expression d3eb52f5348f449ca41cbf92f7270c44
  NoValue 8aa7a469de0bec8fdad1e191a0fd47f5
  StreamSource 693a2f86a9a74f4c4ef4e13cc8dce8fa
  streamSource b209611c2e26d5a552db19852fee5f92
import  -/  AS.Util d80e7b17172dcaa38faa0d323bd0543a
  exports: 22c6c0c3cabbbc0dbbfea98994afcbca
  containsStreamTag 6205b61bfd0a76cf193cd20efc018f8f
  getASTime 2954b5d897f110e673a850034fad19e6
  getStreamTag 6fde66738b66cc507b0d4416602f321d
import  -/  base:Data.List 8b77870d02d66076337587b759b7ee19
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  ghc-prim:GHC.Types dcba736fa3dfba12d307ab18354845d2
c7176843f8c6b882091f9a593def1841
  $wa :: AS.Types.ASLocation
         -> AS.Types.ASExpression
         -> AS.Types.ASValue
         -> [AS.Types.ASCellTag]
         -> GHC.Prim.State# GHC.Prim.RealWorld
         -> (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ASCell #)
    {- Arity: 5, Strictness: <L,U><S,U><L,U><L,U><L,U>,
       Unfolding: (\ ww :: AS.Types.ASLocation
                     ww1 :: AS.Types.ASExpression
                     ww2 :: AS.Types.ASValue
                     ww3 :: [AS.Types.ASCellTag]
                     w :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ww1 of wild {
                     AS.Types.Expression rawXp ds
                     -> case ds of wild1 {
                          DEFAULT
                          -> case AS.Util.containsStreamTag ww3 of wild2 {
                               GHC.Types.False -> (# w, AS.Types.Cell ww wild ww2 ww3 #)
                               GHC.Types.True
                               -> (# w, AS.Types.Cell ww wild AS.Types.NoValue ww3 #) }
                          AS.Types.Excel
                          -> case AS.Eval.evalExcel1 wild w of ds1 { (#,#) ipv ipv1 ->
                             case AS.Util.containsStreamTag ww3 of wild2 {
                               GHC.Types.False -> (# ipv, AS.Types.Cell ww ipv1 ww2 ww3 #)
                               GHC.Types.True
                               -> (# ipv, AS.Types.Cell ww ipv1 AS.Types.NoValue ww3 #) } } }
                     AS.Types.Reference ipv ipv1
                     -> case AS.Util.containsStreamTag ww3 of wild1 {
                          GHC.Types.False -> (# w, AS.Types.Cell ww wild ww2 ww3 #)
                          GHC.Types.True
                          -> (# w, AS.Types.Cell ww wild AS.Types.NoValue ww3 #) } }) -}
31af71b48b236b3a16ebe94944402230
  evalConnector :: AS.Types.ASCell -> GHC.Types.IO AS.Types.ASCell
    {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
       Unfolding: ((GHC.Base.returnIO1 @ AS.Types.ASCell)
                     `cast`
                   (<AS.Types.ASCell>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <AS.Types.ASCell>_R))) -}
2b20a8f91624207849cbc390973f901b
  evalInitExcel :: AS.Types.ASCell -> GHC.Types.IO AS.Types.ASCell
    {- Arity: 2, Strictness: <S(LSLL),1*U(U,U,U,U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Eval.Middleware.evalInitExcel1
                    `cast`
                  (<AS.Types.ASCell>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <AS.Types.ASCell>_R)) -}
af232fec6ca4de6cb1d7532745c9fc78
  evalInitExcel1 :: AS.Types.ASCell
                    -> GHC.Prim.State# GHC.Prim.RealWorld
                    -> (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ASCell #)
    {- Arity: 2, Strictness: <S(LSLL),1*U(U,U,U,U)><L,U>,
       Unfolding: InlineRule (2, True, False)
                  (\ ds :: AS.Types.ASCell
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ds of wild { AS.Types.Cell loc xp val ts ->
                   case xp of wild1 {
                     AS.Types.Expression rawXp ds1
                     -> case ds1 of wild2 {
                          DEFAULT -> (# eta, wild #)
                          AS.Types.Excel
                          -> case AS.Eval.evalExcel1 wild1 eta of ds2 { (#,#) ipv ipv1 ->
                             (# ipv, AS.Types.Cell loc ipv1 val ts #) } }
                     AS.Types.Reference ipv ipv1 -> (# eta, wild #) } }) -}
a956fc64f863d41ba25a264a7fedc8e3
  evalMiddleware :: AS.Types.ASCell -> GHC.Types.IO AS.Types.ASCell
    {- Arity: 2, Strictness: <S(LSLL),1*U(U,U,U,U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Eval.Middleware.evalMiddleware1
                    `cast`
                  (<AS.Types.ASCell>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <AS.Types.ASCell>_R)) -}
388d574f64e9f4d92677e8c529deaf5d
  evalMiddleware1 :: AS.Types.ASCell
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ASCell #)
    {- Arity: 2, Strictness: <S(LSLL),1*U(U,U,U,U)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: AS.Types.ASCell w1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w of ww { AS.Types.Cell ww1 ww2 ww3 ww4 ->
                   AS.Eval.Middleware.$wa ww1 ww2 ww3 ww4 w1 }) -}
9cb9247aa885e6945e1e09ddf3a44ac1
  evalStream :: AS.Types.ASCell -> GHC.Types.IO AS.Types.ASCell
    {- Arity: 2, HasNoCafRefs, Strictness: <S(LLLS),1*U(U,U,U,U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Eval.Middleware.evalStream1
                    `cast`
                  (<AS.Types.ASCell>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <AS.Types.ASCell>_R)) -}
e1e5ef998f73df76732d4ecfbd987c9c
  evalStream1 :: AS.Types.ASCell
                 -> GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ASCell #)
    {- Arity: 2, HasNoCafRefs, Strictness: <S(LLLS),1*U(U,U,U,U)><L,U>,
       Unfolding: InlineRule (2, True, False)
                  (\ cell :: AS.Types.ASCell
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case cell of wild { AS.Types.Cell loc xp val ts ->
                   case AS.Util.containsStreamTag ts of wild1 {
                     GHC.Types.False -> (# eta, wild #)
                     GHC.Types.True
                     -> (# eta, AS.Types.Cell loc xp AS.Types.NoValue ts #) } }) -}
f91864624a066468a1203851b48c6be8
  evalStreamHelper :: AS.Types.StreamSource
                      -> AS.Types.ASTime
                      -> GHC.Types.IO AS.Types.ASValue
    {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Eval.Middleware.evalStreamHelper1
                    `cast`
                  (<AS.Types.StreamSource>_R
                   ->_R <AS.Types.ASTime>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <AS.Types.ASValue>_R)) -}
3b55e3e8f23fca97fb321f4b4d29d789
  evalStreamHelper1 :: AS.Types.StreamSource
                       -> AS.Types.ASTime
                       -> GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ASValue #)
    {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,U>,
       Unfolding: InlineRule (3, True, True)
                  (\ src :: AS.Types.StreamSource
                     time :: AS.Types.ASTime
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   (# eta, AS.Types.NoValue #)) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

