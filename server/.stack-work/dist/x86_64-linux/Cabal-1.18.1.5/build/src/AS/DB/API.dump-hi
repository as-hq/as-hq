
==================== FINAL INTERFACE ====================
2015-09-25 00:27:19.184546 UTC

interface alphasheets-0.1.0.0:AS.DB.API 7084
  interface hash: 64d04078962bd3c8e0a8d52895e4fa9c
  ABI hash: 41e4bd1545bc4e2723f20b3037ddaed3
  export-list hash: f4205431df73a6774c712eb5aa073d13
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e0641befbfbeeab6ef9f97d2cff44d7e
  used TH splices: False
  where
exports:
  AS.DB.API.addCommit
  AS.DB.API.canAccess
  AS.DB.API.canAccessAll
  AS.DB.API.canAccessSheet
  AS.DB.API.createSheet
  AS.DB.API.createWorkbook
  AS.DB.API.createWorkbookSheet
  AS.DB.API.deleteCells
  AS.DB.API.deleteChunkVolatileCells
  AS.DB.API.deleteLocs
  AS.DB.API.deleteSheetUnsafe
  AS.DB.API.deleteWorkbook
  AS.DB.API.deleteWorkbookAndSheets
  AS.DB.API.deleteWorkbookSheet
  AS.DB.API.getAllSheets
  AS.DB.API.getAllWorkbookSheets
  AS.DB.API.getAllWorkbooks
  AS.DB.API.getCell
  AS.DB.API.getCells
  AS.DB.API.getCellsByKeys
  AS.DB.API.getColumnCells
  AS.DB.API.getDAG
  AS.DB.API.getSheet
  AS.DB.API.getUniqueWbName
  AS.DB.API.getVolatileLocs
  AS.DB.API.getWorkbook
  AS.DB.API.isPermissibleMessage
  AS.DB.API.locationsExist
  AS.DB.API.modifyWorkbookSheets
  AS.DB.API.pushCommit
  AS.DB.API.redo
  AS.DB.API.setCell
  AS.DB.API.setCells
  AS.DB.API.setChunkVolatileCells
  AS.DB.API.setSheet
  AS.DB.API.setWorkbook
  AS.DB.API.undo
  AS.DB.API.updateAfterEval
  AS.DB.API.updateDAG
  AS.DB.API.workbookExists
module dependencies: AS.DB.Util AS.Parsing.Common AS.Parsing.In
                     AS.Types AS.Util
package dependencies: BoundedChan-1.0.3.0 SHA-1.6.4.2 aeson-0.8.1.1
                      array-0.5.0.0 attoparsec-0.13.0.1 base base64-bytestring-1.0.0.1
                      binary-0.7.1.0 blaze-builder-0.4.0.1 bytestring-0.10.4.0
                      bytestring-lexing-0.5.0.2 case-insensitive-1.2.0.4
                      containers-0.5.5.1 deepseq-1.3.0.2 dlist-0.7.1.1 entropy-0.3.7
                      ghc-prim hashable-1.2.3.3 hedis-0.6.9 integer-gmp
                      monad-control-1.0.0.4 mtl-2.2.1 network-2.6.2.1 parsec-3.1.9
                      primitive-0.6 random-1.1 regex-base-0.93.2 regex-posix-0.95.2
                      resource-pool-0.2.3.2 scientific-0.3.3.8 split-0.2.2 stm-2.4.4
                      text-1.2.1.1 time-1.5.0.1 transformers-0.4.3.0
                      transformers-base-0.4.4 unix-2.7.1.0 unordered-containers-0.2.5.1
                      uuid-1.3.10 uuid-types-1.0.1 vector-0.11.0.0 websockets-0.9.5.0
orphans: aeson-0.8.1.1:Data.Aeson.Types.Generic
         aeson-0.8.1.1:Data.Aeson.Types.Instances
         aeson-0.8.1.1:Data.Aeson.Types.Internal
         alphasheets-0.1.0.0:AS.Parsing.In
         attoparsec-0.13.0.1:Data.Attoparsec.ByteString.Char8 base:GHC.Base
         base:GHC.Float base:GHC.Real binary-0.7.1.0:Data.Binary.Generic
         bytestring-0.10.4.0:Data.ByteString.Builder
         bytestring-lexing-0.5.0.2:Data.ByteString.Lex.Fractional
         hashable-1.2.3.3:Data.Hashable.Generic
         network-2.6.2.1:Network.Socket network-2.6.2.1:Network.Socket.Types
         random-1.1:System.Random regex-base-0.93.2:Text.Regex.Base.Context
         regex-posix-0.95.2:Text.Regex.Posix.ByteString
         regex-posix-0.95.2:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2:Text.Regex.Posix.Sequence
         regex-posix-0.95.2:Text.Regex.Posix.String
         resource-pool-0.2.3.2:Data.Pool stm-2.4.4:Control.Monad.STM
         text-1.2.1.1:Data.Text text-1.2.1.1:Data.Text.Lazy
         text-1.2.1.1:Data.Text.Show
         time-1.5.0.1:Data.Time.Calendar.Gregorian
         time-1.5.0.1:Data.Time.Format.Parse
         time-1.5.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.4.3.0:Control.Monad.Trans.Error
         vector-0.11.0.0:Data.Vector.Fusion.Bundle
         vector-0.11.0.0:Data.Vector.Unboxed
family instance modules: alphasheets-0.1.0.0:AS.Types
                         attoparsec-0.13.0.1:Data.Attoparsec.Internal.Types
                         base:Control.Applicative base:Data.Either base:Data.Monoid
                         base:Data.Type.Equality base:GHC.Exts base:GHC.Generics
                         dlist-0.7.1.1:Data.DList
                         monad-control-1.0.0.4:Control.Monad.Trans.Control
                         primitive-0.6:Control.Monad.Primitive text-1.2.1.1:Data.Text
                         text-1.2.1.1:Data.Text.Lazy
                         unordered-containers-0.2.5.1:Data.HashMap.Base
                         unordered-containers-0.2.5.1:Data.HashSet
                         uuid-types-1.0.1:Data.UUID.Types.Internal
                         uuid-types-1.0.1:Data.UUID.Types.Internal.Builder
                         vector-0.11.0.0:Data.Vector vector-0.11.0.0:Data.Vector.Primitive
                         vector-0.11.0.0:Data.Vector.Storable
                         vector-0.11.0.0:Data.Vector.Unboxed
                         vector-0.11.0.0:Data.Vector.Unboxed.Base
import  -/  aeson-0.8.1.1:Data.Aeson 4717cd565317ade519445bba111351ae
import  -/  AS.DB.Util 8faef730f5e860a7aaf757e2bcc6ca9f
  exports: 8bb4b27cf6d2068724cc60765ef29cc9
  bStrToASCommit 72f2978d188248a6fb72c7068538c367
  bStrToASLocation 67b42adf66640c6c025dfdb0a0ad004d
  bStrToRelation de5bb69a12ddd8e3af7147ce0e811044
  bStrToSheet 0b5e141b036d5f6bbb36ff95bbb4f615
  bStrToWorkbook 2a8071d5fe89a869748f1b542fa9de60
  chunkM_ 486ac4cdf9d399cd822a3b555792b29e
  dagChunkSize c31c77ce9a7c717461f0c38e441b6c59
  deleteLocRedis 4dc8a1cc2f6d214eeffc6fef0c07e1b7
  getCellByKeyRedis a00c6d91828ae4734afb74b8854f1563
  getLocationKey 32898ee4482d81d07925a2b5747a65d0
  getSheetKey 842a7c7c6924d71b4a4efc6c74d18896
  getSheetLocsRedis f6a52176a8d275177162b26b74b6ad8c
  getSheetSetKey 7e0148556acfb768ab318babec2d645f
  getUniquePrefixedName 6b4f7fef01ca4af10f5254b88f9bbb3f
  getWorkbookKey cfc8a77101ede20f47c7078bdc5b2bf7
  incrementLocKey 5ea01908ca16a1bd5dadba1c6a7aec2f
  keyToRow 0c07dff2df37fb082a1a5c76294f4716
  setCellRedis 468629620e07755957a5bc4074cf3a63
  updateChunkDAG df7890c5e3e10833936679140224819c
import  -/  AS.Types ac0aeb8d2661160e6345f7fec8fc36e5
  exports: 4f33e2305e9f32540a30fe3603c0662c
  ASCell bede131762bf9e6165d28069305c9a8f
  ASCommit 3363c5610de870b18b16cbd39ed6bb5c
  ASCommit cd37bafad7a1ba0bf823b5565484da25
  ASLocation 42b88bd590b6186a8f42af5a0deb461a
  ASMessage b488c6e303af3ec316847aa09e9ef416
  ASSheet e94846da4cf11f1951bc25078de1fc76
  ASSheetId 4ed60fa4a266e9c370748b465970547f
  ASUserId 3094df477896c468afcf617b4934d3e3
  ASWorkbook dc570e9d01415111185b1ff1b63cbb38
  Column 2c1479dadfed776d27f89a4215e28321
  Message 84f4a46e37fa757190dd82d855281e02
  PayloadC cf0873b14638e9746503b4b1a556d217
  PayloadCL 986b2bbb852717bf17df4cc79495cabe
  PayloadL a2d0427388bd6428f59503b5e212ace5
  PayloadLL bcd89933b71bfbabdea5ca6d4a61bdd0
  PayloadS bdb42d7d8eded81f79a495640a8bb962
  PayloadTags a07d0e7a253d0c0e56c11876f2df0ecf
  PayloadW c8441fb392de8d26154362026c0227b6
  Sheet 16d04131564501ec6ba23cf63f7d666e
  Workbook 269d38c5ec30bfb77cccc13110302910
  WorkbookSheet 5597d2398faf32cb9835f468c56e0c68
  WorkbookSheet 4d833f52853e533ceb1fb336e970e4f5
  cellLocation 57eff0be9dcc5df8973c2d9de1095be4
  cellTags 5949cba85c1e509f832ed1017c3f9981
  locSheetId 0eb45f0ce468cda62d570bcb8b46f9d1
  sheetId b59632ae8c59173b4c3b1b899644d078
  sheetPermissions cf1cef7dd810da2e626023221da3453d
  windowSheetId 63930e183ffb681090da00d843f4e165
  workbookName 94e7971a7eb0201351e161b545d4bebe
  workbookSheets 26d6100b8bd17c2ca420063ca816064d
  wsName 69d1ea9617b303f0de03d257be714d41
  wsSheets d9c8aebfecadf151194fd8240d58dd87
import  -/  AS.Util 417e4f2db7aca39e7f1871a4d7aab2a3
  exports: 061da0521eb01812fd74bf75a38cb988
  containsTrackingTag 2196c333077ef38aff8753db9bcff343
  decomposeLocs 029ee6d579cad48c88473e01acb70f98
  deleteSubset 118ce46cb867d1c8609a416db4079cfd
  getASTime 71ef0640d6461997bd3b7be8f3ac5b5d
  getUniqueId 42a8534a1f39ca5218122892a4177e4c
  hasPermissions 9f47a0b70f2205349a100a882f597d7d
  hasVolatileTag 4b57ae6da4a9da6dfb64560add96b341
  isColumn af7950958e920f07b68519d8f38dddb1
  matchSheets bde1481a9bbfbfac6514d9b29bebffcb
  minBy 2c307afd2345594083bac94e1d79d3a6
  printTimed 35cb21e1f23638a3173441d7200c130f
import  -/  base:Control.Applicative 30b769206cb5c020684e1bda0d7e7dd3
import  -/  base:Control.Concurrent 1be25cd1e2ac314074fafb26df0ff06b
import  -/  base:Control.Monad 483e787e07c2e49f1fb1c1b88665cb92
import  -/  base:Data.Either d1c890129a7c6a9ec02a642c6c2f4ed3
import  -/  base:Data.List 8b77870d02d66076337587b759b7ee19
import  -/  base:Data.Maybe 5034d40e23c3a7110309f188001df4ca
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:GHC.List 4cff382327e59a5787355ca0a4174450
import  -/  base:GHC.Show cf1a7ff9edb0f41528085aad04d33753
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  base:Text.Read 6fe10a0a6d0a38c215de3b09e72ca556
import  -/  bytestring-0.10.4.0:Data.ByteString.Char8 0e73f8a26c4441d5a78efb34452f1bd2
import  -/  bytestring-0.10.4.0:Data.ByteString.Internal 669ec56255d0f8ce20adaad94dfc8b92
import  -/  bytestring-0.10.4.0:Data.ByteString.Lazy.Char8 b08a48a005349ba04667fda0e4b7b27f
import  -/  ghc-prim:GHC.Types dcba736fa3dfba12d307ab18354845d2
import  -/  hedis-0.6.9:Database.Redis 528220caf3eba6c7f6dc7e85c445c8d5
import  -/  hedis-0.6.9:Database.Redis.Commands ba029e02b8ac5f5f02c588d1025e14f2
import  -/  hedis-0.6.9:Database.Redis.Core c109b2f50ce35a47c8d801b7ab048487
import  -/  hedis-0.6.9:Database.Redis.Transactions 18db708e008d6694dd59f269efab1064
import  -/  mtl-2.2.1:Control.Monad.Trans a895895592675f11fcf1e6c722171af2
import  -/  split-0.2.2:Data.List.Split 9e8c4182840695ff3a75320d1faeebd2
import  -/  text-1.2.1.1:Data.Text ddf865ef7152d1de0d03707558cc6523
import  -/  text-1.2.1.1:Data.Text.IO d86a0ceb57d506ee515123c456145d23
import  -/  time-1.5.0.1:Data.Time 68e73239245507debb91ce3c297cacd6
import  -/  transformers-0.4.3.0:Control.Monad.IO.Class 1fe01dea961eadb0b037d705f6cb22bb
6a9a3afe7ee0edacdb462c42ef00bd30
  $wa :: GHC.IO.Handle.Types.Handle
         -> GHC.IORef.IORef [Database.Redis.Protocol.Reply]
         -> Control.Concurrent.BoundedChan.BoundedChan
                Database.Redis.Protocol.Reply
         -> GHC.Conc.Sync.ThreadId
         -> GHC.Prim.State# GHC.Prim.RealWorld
         -> (# GHC.Prim.State# GHC.Prim.RealWorld, [AS.Types.ASWorkbook] #)
    {- Arity: 5,
       Strictness: <L,U><L,U(U)><L,U(U(U),U(U(U),U(U),U,U),U(U),U)><L,U><L,U>,
       Unfolding: (\ ww :: GHC.IO.Handle.Types.Handle
                     ww1 :: GHC.IORef.IORef [Database.Redis.Protocol.Reply]
                     ww2 :: Control.Concurrent.BoundedChan.BoundedChan
                                Database.Redis.Protocol.Reply
                     ww3 :: GHC.Conc.Sync.ThreadId
                     w :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case AS.DB.API.createWorkbook_lvl9 of ww5 { Data.ByteString.Internal.PS ww6 ww7 ww8 ww9 ->
                   case Database.Redis.ProtocolPipelining.$wa2
                          @ Database.Redis.Protocol.Reply
                          ww
                          ww1
                          ww2
                          ww6
                          ww7
                          ww8
                          ww9
                          w of ds1 { (#,#) ipv ipv1 ->
                   case Database.Redis.Types.$fRedisResult[]0_$cdecode
                          @ Data.ByteString.Internal.ByteString
                          Database.Redis.Types.$fRedisResultByteString_$cdecode
                            `cast`
                          (Sym (Database.Redis.Types.NTCo:RedisResult[0]
                                    <Data.ByteString.Internal.ByteString>_N))
                          ipv1 of wild {
                     Data.Either.Left ipv2
                     -> (GHC.IO.failIO
                           @ [AS.Types.ASWorkbook]
                           AS.DB.API.createWorkbook8)
                          `cast`
                        (GHC.Types.NTCo:IO[0] <[AS.Types.ASWorkbook]>_R)
                          ipv
                     Data.Either.Right wbKeys
                     -> case ((AS.DB.API.createWorkbook_go wbKeys)
                                `cast`
                              (Trans
                                   (Database.Redis.Core.NTCo:Redis[0] <[Data.Either.Either
                                                                            Database.Redis.Protocol.Reply
                                                                            (Data.Maybe.Maybe
                                                                                 Data.ByteString.Internal.ByteString)]>_N)
                                   (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                        <Database.Redis.ProtocolPipelining.Connection
                                             Database.Redis.Protocol.Reply>_R
                                        <GHC.Types.IO>_R
                                        <[Data.Either.Either
                                              Database.Redis.Protocol.Reply
                                              (Data.Maybe.Maybe
                                                   Data.ByteString.Internal.ByteString)]>_N))
                                (Database.Redis.ProtocolPipelining.Conn
                                   @ Database.Redis.Protocol.Reply
                                   ww
                                   ww1
                                   ww2
                                   ww3))
                               `cast`
                             (GHC.Types.NTCo:IO[0]
                                  <[Data.Either.Either
                                        Database.Redis.Protocol.Reply
                                        (Data.Maybe.Maybe Data.ByteString.Internal.ByteString)]>_R)
                               ipv of ds2 { (#,#) ipv2 ipv3 ->
                        (# ipv2,
                           GHC.Base.map
                             @ (Data.Either.Either
                                    Database.Redis.Protocol.Reply
                                    (Data.Maybe.Maybe Data.ByteString.Internal.ByteString))
                             @ AS.Types.ASWorkbook
                             AS.DB.API.createWorkbook5
                             ipv3 #) } } } }) -}
389513ce0785a51ae23c1a5f2afc741d
  $wa1 :: Database.Redis.Core.Connection
          -> GHC.Base.String
          -> [AS.Types.ASSheet]
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.WorkbookSheet #)
    {- Arity: 4,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U><S,U><L,U> -}
083c040fad008f1f2b425b01a26f6081
  $wa2 :: Database.Redis.Core.Connection
          -> GHC.Base.String
          -> [AS.Types.ASSheet]
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,1*U><S,1*U><L,U> -}
8db8cc9bf9ba8234d9e56b73da6e37f8
  $wa3 :: GHC.IO.Handle.Types.Handle
          -> GHC.IORef.IORef [Database.Redis.Protocol.Reply]
          -> Control.Concurrent.BoundedChan.BoundedChan
                 Database.Redis.Protocol.Reply
          -> GHC.Conc.Sync.ThreadId
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld, [AS.Types.ASSheet] #)
    {- Arity: 5,
       Strictness: <L,U><L,U(U)><L,U(U(U),U(U(U),U(U),U,U),U(U),U)><L,U><L,U>,
       Unfolding: (\ ww :: GHC.IO.Handle.Types.Handle
                     ww1 :: GHC.IORef.IORef [Database.Redis.Protocol.Reply]
                     ww2 :: Control.Concurrent.BoundedChan.BoundedChan
                                Database.Redis.Protocol.Reply
                     ww3 :: GHC.Conc.Sync.ThreadId
                     w :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case AS.DB.API.getAllSheets_lvl9 of ww5 { Data.ByteString.Internal.PS ww6 ww7 ww8 ww9 ->
                   case Database.Redis.ProtocolPipelining.$wa2
                          @ Database.Redis.Protocol.Reply
                          ww
                          ww1
                          ww2
                          ww6
                          ww7
                          ww8
                          ww9
                          w of ds1 { (#,#) ipv ipv1 ->
                   case Database.Redis.Types.$fRedisResult[]0_$cdecode
                          @ Data.ByteString.Internal.ByteString
                          Database.Redis.Types.$fRedisResultByteString_$cdecode
                            `cast`
                          (Sym (Database.Redis.Types.NTCo:RedisResult[0]
                                    <Data.ByteString.Internal.ByteString>_N))
                          ipv1 of wild {
                     Data.Either.Left ipv2
                     -> (GHC.IO.failIO @ [AS.Types.ASSheet] AS.DB.API.getAllSheets6)
                          `cast`
                        (GHC.Types.NTCo:IO[0] <[AS.Types.ASSheet]>_R)
                          ipv
                     Data.Either.Right sheetKeys
                     -> case ((AS.DB.API.getAllSheets_go sheetKeys)
                                `cast`
                              (Trans
                                   (Database.Redis.Core.NTCo:Redis[0] <[Data.Either.Either
                                                                            Database.Redis.Protocol.Reply
                                                                            (Data.Maybe.Maybe
                                                                                 Data.ByteString.Internal.ByteString)]>_N)
                                   (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                        <Database.Redis.ProtocolPipelining.Connection
                                             Database.Redis.Protocol.Reply>_R
                                        <GHC.Types.IO>_R
                                        <[Data.Either.Either
                                              Database.Redis.Protocol.Reply
                                              (Data.Maybe.Maybe
                                                   Data.ByteString.Internal.ByteString)]>_N))
                                (Database.Redis.ProtocolPipelining.Conn
                                   @ Database.Redis.Protocol.Reply
                                   ww
                                   ww1
                                   ww2
                                   ww3))
                               `cast`
                             (GHC.Types.NTCo:IO[0]
                                  <[Data.Either.Either
                                        Database.Redis.Protocol.Reply
                                        (Data.Maybe.Maybe Data.ByteString.Internal.ByteString)]>_R)
                               ipv of ds2 { (#,#) ipv2 ipv3 ->
                        (# ipv2,
                           GHC.Base.map
                             @ (Data.Either.Either
                                    Database.Redis.Protocol.Reply
                                    (Data.Maybe.Maybe Data.ByteString.Internal.ByteString))
                             @ AS.Types.ASSheet
                             AS.DB.API.getAllSheets3
                             ipv3 #) } } } }) -}
7854e4aafed0e27e86655d3037fae787
  $wa4 :: GHC.IO.Handle.Types.Handle
          -> GHC.IORef.IORef [Database.Redis.Protocol.Reply]
          -> Control.Concurrent.BoundedChan.BoundedChan
                 Database.Redis.Protocol.Reply
          -> GHC.Conc.Sync.ThreadId
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                [(AS.Types.ASLocation, AS.Types.ASLocation)] #)
    {- Arity: 5,
       Strictness: <L,U><L,U(U)><L,U(U(U),U(U(U),U(U),U,U),U(U),U)><L,U><L,U>,
       Unfolding: (\ ww :: GHC.IO.Handle.Types.Handle
                     ww1 :: GHC.IORef.IORef [Database.Redis.Protocol.Reply]
                     ww2 :: Control.Concurrent.BoundedChan.BoundedChan
                                Database.Redis.Protocol.Reply
                     ww3 :: GHC.Conc.Sync.ThreadId
                     w :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case AS.DB.API.getDAG_lvl9 of ww5 { Data.ByteString.Internal.PS ww6 ww7 ww8 ww9 ->
                   case Database.Redis.ProtocolPipelining.$wa2
                          @ Database.Redis.Protocol.Reply
                          ww
                          ww1
                          ww2
                          ww6
                          ww7
                          ww8
                          ww9
                          w of ds1 { (#,#) ipv ipv1 ->
                   case Database.Redis.Types.$fRedisResult[]0_$cdecode
                          @ Data.ByteString.Internal.ByteString
                          Database.Redis.Types.$fRedisResultByteString_$cdecode
                            `cast`
                          (Sym (Database.Redis.Types.NTCo:RedisResult[0]
                                    <Data.ByteString.Internal.ByteString>_N))
                          ipv1 of wild {
                     Data.Either.Left ipv2
                     -> (GHC.IO.failIO
                           @ [(AS.Types.ASLocation, AS.Types.ASLocation)]
                           AS.DB.API.getDAG4)
                          `cast`
                        (GHC.Types.NTCo:IO[0]
                             <[(AS.Types.ASLocation, AS.Types.ASLocation)]>_R)
                          ipv
                     Data.Either.Right tl
                     -> case Database.Redis.Transactions.multiExec1
                               @ [[Data.ByteString.Internal.ByteString]]
                               (\ eta :: GHC.Types.Int
                                  r1 :: Database.Redis.ProtocolPipelining.Connection
                                            Database.Redis.Protocol.Reply
                                  s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                case (((AS.DB.API.getDAG_go1 tl)
                                         `cast`
                                       (Trans
                                            (Database.Redis.Transactions.NTCo:RedisTx[0] <[Database.Redis.Transactions.Queued
                                                                                               [Data.ByteString.Internal.ByteString]]>_N)
                                            (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                                 <GHC.Types.Int>_N
                                                 <Database.Redis.Core.Redis>_R
                                                 <[Database.Redis.Transactions.Queued
                                                       [Data.ByteString.Internal.ByteString]]>_N))
                                         eta)
                                        `cast`
                                      (Trans
                                           (Database.Redis.Core.NTCo:Redis[0] <([Database.Redis.Transactions.Queued
                                                                                     [Data.ByteString.Internal.ByteString]],
                                                                                GHC.Types.Int)>_N)
                                           (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                <Database.Redis.ProtocolPipelining.Connection
                                                     Database.Redis.Protocol.Reply>_R
                                                <GHC.Types.IO>_R
                                                <([Database.Redis.Transactions.Queued
                                                       [Data.ByteString.Internal.ByteString]],
                                                  GHC.Types.Int)>_N))
                                        r1)
                                       `cast`
                                     (GHC.Types.NTCo:IO[0]
                                          <([Database.Redis.Transactions.Queued
                                                 [Data.ByteString.Internal.ByteString]],
                                            GHC.Types.Int)>_R)
                                       s of ds2 { (#,#) ipv2 ipv3 ->
                                case ipv3 of wild1 { (,) a6 s' ->
                                (# ipv2,
                                   (case AS.DB.API.$wgo1 a6 of ww4 { (##) ww10 ->
                                    Database.Redis.Transactions.Queued
                                      @ [[Data.ByteString.Internal.ByteString]]
                                      ww10 },
                                    s') #) } })
                                 `cast`
                               (Trans
                                    (<GHC.Types.Int>_R
                                     ->_R Trans
                                              (<Database.Redis.ProtocolPipelining.Connection
                                                    Database.Redis.Protocol.Reply>_R
                                               ->_R Sym (GHC.Types.NTCo:IO[0]
                                                             <(Database.Redis.Transactions.Queued
                                                                   [[Data.ByteString.Internal.ByteString]],
                                                               GHC.Types.Int)>_R))
                                              (Trans
                                                   (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                             <Database.Redis.ProtocolPipelining.Connection
                                                                  Database.Redis.Protocol.Reply>_R
                                                             <GHC.Types.IO>_R
                                                             <(Database.Redis.Transactions.Queued
                                                                   [[Data.ByteString.Internal.ByteString]],
                                                               GHC.Types.Int)>_N))
                                                   (Sym (Database.Redis.Core.NTCo:Redis[0]) <(Database.Redis.Transactions.Queued
                                                                                                  [[Data.ByteString.Internal.ByteString]],
                                                                                              GHC.Types.Int)>_N)))
                                    (Trans
                                         (Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                                   <GHC.Types.Int>_N
                                                   <Database.Redis.Core.Redis>_R
                                                   <Database.Redis.Transactions.Queued
                                                        [[Data.ByteString.Internal.ByteString]]>_N))
                                         (Sym (Database.Redis.Transactions.NTCo:RedisTx[0]) <Database.Redis.Transactions.Queued
                                                                                                 [[Data.ByteString.Internal.ByteString]]>_N)))
                               (Database.Redis.ProtocolPipelining.Conn
                                  @ Database.Redis.Protocol.Reply
                                  ww
                                  ww1
                                  ww2
                                  ww3)
                               ipv of ds2 { (#,#) ipv2 ipv3 ->
                        case ipv3 of wild1 {
                          DEFAULT
                          -> (GHC.IO.failIO
                                @ [(AS.Types.ASLocation, AS.Types.ASLocation)]
                                AS.DB.API.getDAG3)
                               `cast`
                             (GHC.Types.NTCo:IO[0]
                                  <[(AS.Types.ASLocation, AS.Types.ASLocation)]>_R)
                               ipv2
                          Database.Redis.Transactions.TxSuccess fromLocs
                          -> (# ipv2, AS.DB.API.getDAG_go fromLocs tl #) } } } } }) -}
25123ecbc57e412f79d62f1ac65c32f7
  $wa5 :: GHC.IO.Handle.Types.Handle
          -> GHC.IORef.IORef [Database.Redis.Protocol.Reply]
          -> Control.Concurrent.BoundedChan.BoundedChan
                 Database.Redis.Protocol.Reply
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld, [AS.Types.ASLocation] #)
    {- Arity: 4,
       Strictness: <L,U><L,1*U(U)><L,1*U(U(U),U(U(U),U(U),A,U),U(U),A)><L,U>,
       Unfolding: (\ ww :: GHC.IO.Handle.Types.Handle
                     ww1 :: GHC.IORef.IORef [Database.Redis.Protocol.Reply]
                     ww2 :: Control.Concurrent.BoundedChan.BoundedChan
                                Database.Redis.Protocol.Reply
                     w :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case AS.DB.API.getVolatileLocs_lvl9 of ww5 { Data.ByteString.Internal.PS ww6 ww7 ww8 ww9 ->
                   case Database.Redis.ProtocolPipelining.$wa2
                          @ Database.Redis.Protocol.Reply
                          ww
                          ww1
                          ww2
                          ww6
                          ww7
                          ww8
                          ww9
                          w of ds1 { (#,#) ipv ipv1 ->
                   case Database.Redis.Types.$fRedisResult[]0_$cdecode
                          @ Data.ByteString.Internal.ByteString
                          Database.Redis.Types.$fRedisResultByteString_$cdecode
                            `cast`
                          (Sym (Database.Redis.Types.NTCo:RedisResult[0]
                                    <Data.ByteString.Internal.ByteString>_N))
                          ipv1 of wild {
                     Data.Either.Left ipv2
                     -> (GHC.IO.failIO
                           @ [AS.Types.ASLocation]
                           AS.DB.API.getVolatileLocs3)
                          `cast`
                        (GHC.Types.NTCo:IO[0] <[AS.Types.ASLocation]>_R)
                          ipv
                     Data.Either.Right vl
                     -> (# ipv,
                           GHC.Base.map
                             @ Data.ByteString.Internal.ByteString
                             @ AS.Types.ASLocation
                             AS.DB.Util.bStrToASLocation
                             vl #) } } }) -}
f93dbc933cc0eeb9fd4556600973834b
  $wa6 :: Database.Redis.Core.Connection
          -> AS.Types.ASUserId
          -> AS.Types.ASPayload
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
    {- Arity: 4,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U(U,U,U)><S,1*U><L,U> -}
ba49b3c346b6257729716195d1f5d365
  $wa7 :: GHC.IO.Handle.Types.Handle
          -> GHC.IORef.IORef [Database.Redis.Protocol.Reply]
          -> Control.Concurrent.BoundedChan.BoundedChan
                 Database.Redis.Protocol.Reply
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                Data.Maybe.Maybe AS.Types.ASCommit #)
    {- Arity: 4,
       Strictness: <L,U><L,U(U)><L,U(U(U),U(U(U),U(U),A,U),U(U),A)><L,U>,
       Unfolding: (\ ww :: GHC.IO.Handle.Types.Handle
                     ww1 :: GHC.IORef.IORef [Database.Redis.Protocol.Reply]
                     ww2 :: Control.Concurrent.BoundedChan.BoundedChan
                                Database.Redis.Protocol.Reply
                     w :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case AS.DB.API.redo_lvl9 of ww5 { Data.ByteString.Internal.PS ww6 ww7 ww8 ww9 ->
                   case Database.Redis.ProtocolPipelining.$wa2
                          @ Database.Redis.Protocol.Reply
                          ww
                          ww1
                          ww2
                          ww6
                          ww7
                          ww8
                          ww9
                          w of ds1 { (#,#) ipv ipv1 ->
                   let {
                     $j :: Data.Maybe.Maybe Data.ByteString.Internal.ByteString
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 Data.Maybe.Maybe AS.Types.ASCommit #)
                       {- Arity: 1, Strictness: <S,1*U> -}
                     = \ result :: Data.Maybe.Maybe
                                       Data.ByteString.Internal.ByteString ->
                       case result of wild {
                         Data.Maybe.Nothing
                         -> (# ipv, Data.Maybe.Nothing @ AS.Types.ASCommit #)
                         Data.Maybe.Just commit
                         -> case Database.Redis.Protocol.renderRequest
                                   (GHC.Types.:
                                      @ Data.ByteString.Internal.ByteString
                                      Database.Redis.Commands.rpush1
                                      (GHC.Types.:
                                         @ Data.ByteString.Internal.ByteString
                                         AS.DB.API.redo5
                                         (GHC.Base.map
                                            @ Data.ByteString.Internal.ByteString
                                            @ Data.ByteString.Internal.ByteString
                                            (GHC.Base.id @ Data.ByteString.Internal.ByteString)
                                            (GHC.Types.:
                                               @ Data.ByteString.Internal.ByteString
                                               commit
                                               (GHC.Types.[]
                                                  @ Data.ByteString.Internal.ByteString))))) of ww3 { Data.ByteString.Internal.PS ww4 ww10 ww11 ww12 ->
                            case Database.Redis.ProtocolPipelining.$wa2
                                   @ Database.Redis.Protocol.Reply
                                   ww
                                   ww1
                                   ww2
                                   ww4
                                   ww10
                                   ww11
                                   ww12
                                   ipv of ds2 { (#,#) ipv2 ipv3 ->
                            (# ipv2, AS.DB.Util.bStrToASCommit wild #) } } }
                   } in
                   case ipv1 of wild {
                     DEFAULT
                     -> (GHC.IO.failIO
                           @ (Data.Maybe.Maybe AS.Types.ASCommit)
                           AS.DB.API.redo4)
                          `cast`
                        (GHC.Types.NTCo:IO[0] <Data.Maybe.Maybe AS.Types.ASCommit>_R)
                          ipv
                     Database.Redis.Protocol.SingleLine s
                     -> $j (Data.Maybe.Just @ Data.ByteString.Internal.ByteString s)
                     Database.Redis.Protocol.Bulk ds2
                     -> case ds2 of wild1 {
                          Data.Maybe.Nothing
                          -> $j (Data.Maybe.Nothing @ Data.ByteString.Internal.ByteString)
                          Data.Maybe.Just ipv2 -> $j wild1 }
                     Database.Redis.Protocol.MultiBulk ds2
                     -> case ds2 of wild1 {
                          Data.Maybe.Nothing
                          -> $j (Data.Maybe.Nothing @ Data.ByteString.Internal.ByteString)
                          Data.Maybe.Just ipv2
                          -> (GHC.IO.failIO
                                @ (Data.Maybe.Maybe AS.Types.ASCommit)
                                AS.DB.API.redo4)
                               `cast`
                             (GHC.Types.NTCo:IO[0] <Data.Maybe.Maybe AS.Types.ASCommit>_R)
                               ipv } } } }) -}
84412e559709785324f49ab4b7c6268c
  $wa8 :: GHC.Types.Int
          -> GHC.IO.Handle.Types.Handle
          -> GHC.IORef.IORef [Database.Redis.Protocol.Reply]
          -> Control.Concurrent.BoundedChan.BoundedChan
                 Database.Redis.Protocol.Reply
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                (Database.Redis.Transactions.Queued
                     (Data.Maybe.Maybe Data.ByteString.Internal.ByteString),
                 GHC.Types.Int) #)
    {- Arity: 5,
       Strictness: <L,U(U)><L,U><L,1*U(U)><L,1*U(U(U),U(U(U),U(U),A,U),U(U),A)><L,U>,
       Unfolding: (\ w :: GHC.Types.Int
                     ww :: GHC.IO.Handle.Types.Handle
                     ww1 :: GHC.IORef.IORef [Database.Redis.Protocol.Reply]
                     ww2 :: Control.Concurrent.BoundedChan.BoundedChan
                                Database.Redis.Protocol.Reply
                     w1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case AS.DB.API.undo_lvl9 of ww5 { Data.ByteString.Internal.PS ww6 ww7 ww8 ww9 ->
                   case Database.Redis.ProtocolPipelining.$wa2
                          @ Database.Redis.Protocol.Reply
                          ww
                          ww1
                          ww2
                          ww6
                          ww7
                          ww8
                          ww9
                          w1 of ds1 { (#,#) ipv ipv1 ->
                   case Database.Redis.Transactions.$wa
                          @ (Data.Maybe.Maybe Data.ByteString.Internal.ByteString)
                          Database.Redis.Commands.brpoplpush2
                            `cast`
                          (Sym (Database.Redis.Types.NTCo:RedisResult[0]
                                    <Data.Maybe.Maybe Data.ByteString.Internal.ByteString>_N))
                          w
                          ipv of ds2 { (#,#) ipv2 ipv3 ->
                   case ipv3 of wild { (,) a6 s' -> ds2 } } } }) -}
3c11ddfe016ad7672a60ae66fc1fde79
  $wgo :: [AS.Types.ASLocation]
          -> (# [AS.Types.ASLocation], [AS.Types.ASLocation] #)
    {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
beb2938953f9a231c15c560d0263496a
  $wgo1 :: [Database.Redis.Transactions.Queued
                [Data.ByteString.Internal.ByteString]]
           -> (# Data.Vector.Vector Database.Redis.Protocol.Reply
                 -> Data.Either.Either
                        Database.Redis.Protocol.Reply
                        [[Data.ByteString.Internal.ByteString]] #)
    {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
6843cf36ee746adc810a385508066cfe
  $wgo2 :: [Database.Redis.Transactions.Queued GHC.Types.Bool]
           -> (# Data.Vector.Vector Database.Redis.Protocol.Reply
                 -> Data.Either.Either
                        Database.Redis.Protocol.Reply [GHC.Types.Bool] #)
    {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
247aa5f083ee224c6c772bbf33320b37
  $wlgo :: GHC.Prim.Int# -> [GHC.Types.Int] -> GHC.Prim.Int#
    {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
85b64024d5329dfc28e6cbdcfb488b30
  $wlgo1 :: GHC.Prim.Int# -> [GHC.Types.Int] -> GHC.Prim.Int#
    {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
3c3770bee8d5923183c24e2d4da48a4a
  addCommit :: Database.Redis.Core.Connection
               -> AS.Types.ASUserId
               -> [AS.Types.ASCell]
               -> [AS.Types.ASCell]
               -> GHC.Types.IO ()
    {- Arity: 5,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,1*U(U,U,U)><L,1*U><L,1*U><L,U>,
       Unfolding: (AS.DB.API.addCommit1
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R <AS.Types.ASUserId>_R
                    ->_R <[AS.Types.ASCell]>_R
                    ->_R <[AS.Types.ASCell]>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
a108449a88b087803a02e44a733e99bb
  addCommit1 :: Database.Redis.Core.Connection
                -> AS.Types.ASUserId
                -> [AS.Types.ASCell]
                -> [AS.Types.ASCell]
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 5,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,1*U(U,U,U)><L,1*U><L,1*U><L,U>,
       Unfolding: (\ conn :: Database.Redis.Core.Connection
                     uid :: AS.Types.ASUserId
                     b :: [AS.Types.ASCell]
                     a6 :: [AS.Types.ASCell]
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   AS.DB.API.addCommit2
                     conn
                     (AS.Types.ASCommit uid b a6 AS.Util.getASTime2)
                     eta) -}
e4189e00b43818f9f4128d5450e9da90
  addCommit2 :: Database.Redis.Core.Connection
                -> AS.Types.ASCommit
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,1*U(1*U(U,U,U),1*U,1*U,1*U(1*U,1*U(U),1*U(U),1*U(U)))><L,U> -}
71c49f030271ce56c215a8406391f679
  canAccess :: Database.Redis.Core.Connection
               -> AS.Types.ASUserId
               -> AS.Types.ASLocation
               -> GHC.Types.IO GHC.Types.Bool
    {- Arity: 4,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U(U,U,U)><L,1*U><L,U>,
       Unfolding: (AS.DB.API.canAccess1
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R <AS.Types.ASUserId>_R
                    ->_R <AS.Types.ASLocation>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Types.Bool>_R))) -}
ce055459ea2a3fb11fa1204861ea5290
  canAccess1 :: Database.Redis.Core.Connection
                -> AS.Types.ASUserId
                -> AS.Types.ASLocation
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
    {- Arity: 4,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U(U,U,U)><L,1*U><L,U>,
       Unfolding: (\ conn :: Database.Redis.Core.Connection
                     uid :: AS.Types.ASUserId
                     loc :: AS.Types.ASLocation
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case (Data.Pool.withResource_$swithResource
                           @ (Database.Redis.ProtocolPipelining.Connection
                                  Database.Redis.Protocol.Reply)
                           @ (Data.Maybe.Maybe AS.Types.ASSheet)
                           conn `cast` (Database.Redis.Core.NTCo:Connection[0])
                           (\ r1 :: Database.Redis.ProtocolPipelining.Connection
                                        Database.Redis.Protocol.Reply
                              s1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                            case r1 of ww { Database.Redis.ProtocolPipelining.Conn ww1 ww2 ww3 ww4 ->
                            case Database.Redis.Protocol.renderRequest
                                   (GHC.Types.:
                                      @ Data.ByteString.Internal.ByteString
                                      Database.Redis.Commands.get1
                                      (GHC.Types.:
                                         @ Data.ByteString.Internal.ByteString
                                         (AS.DB.Util.getSheetKey (AS.Types.locSheetId loc))
                                         (GHC.Types.[]
                                            @ Data.ByteString.Internal.ByteString))) of ww5 { Data.ByteString.Internal.PS ww6 ww7 ww8 ww9 ->
                            case Database.Redis.ProtocolPipelining.$wa2
                                   @ Database.Redis.Protocol.Reply
                                   ww1
                                   ww2
                                   ww3
                                   ww6
                                   ww7
                                   ww8
                                   ww9
                                   s1 of ds1 { (#,#) ipv ipv1 ->
                            case ipv1 of wild {
                              DEFAULT -> (# ipv, Data.Maybe.Nothing @ AS.Types.ASSheet #)
                              Database.Redis.Protocol.SingleLine s2
                              -> (# ipv,
                                    AS.DB.Util.bStrToSheet
                                      (Data.Maybe.Just @ Data.ByteString.Internal.ByteString s2) #)
                              Database.Redis.Protocol.Bulk ds2
                              -> case ds2 of wild1 {
                                   Data.Maybe.Nothing -> (# ipv, AS.DB.API.canAccess2 #)
                                   Data.Maybe.Just ipv2 -> (# ipv, AS.DB.Util.bStrToSheet wild1 #) }
                              Database.Redis.Protocol.MultiBulk ds2
                              -> case ds2 of wild1 {
                                   Data.Maybe.Nothing -> (# ipv, AS.DB.API.canAccess2 #)
                                   Data.Maybe.Just ipv2
                                   -> (# ipv, Data.Maybe.Nothing @ AS.Types.ASSheet #) } } } } })
                             `cast`
                           (<Database.Redis.ProtocolPipelining.Connection
                                 Database.Redis.Protocol.Reply>_R
                            ->_R Sym (GHC.Types.NTCo:IO[0]
                                          <Data.Maybe.Maybe AS.Types.ASSheet>_R)))
                          `cast`
                        (GHC.Types.NTCo:IO[0] <Data.Maybe.Maybe AS.Types.ASSheet>_R)
                          s of ds1 { (#,#) ipv ipv1 ->
                   case ipv1 of wild {
                     Data.Maybe.Nothing -> (# ipv, GHC.Types.False #)
                     Data.Maybe.Just someSheet
                     -> (# ipv,
                           case someSheet of wild1 { AS.Types.Sheet ds2 ds3 ds4 ->
                           AS.Util.hasPermissions uid ds4 } #) } }) -}
3923188bc64f7efa7eaed021589baefc
  canAccess2 :: Data.Maybe.Maybe AS.Types.ASSheet
    {- Unfolding: (AS.DB.Util.bStrToSheet
                     (Data.Maybe.Nothing @ Data.ByteString.Internal.ByteString)) -}
632d50df4a0243573e14b9ed59b8c10d
  canAccessAll :: Database.Redis.Core.Connection
                  -> AS.Types.ASUserId
                  -> [AS.Types.ASLocation]
                  -> GHC.Types.IO GHC.Types.Bool
    {- Arity: 4,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U(U,U,U)><S,1*U><L,U>,
       Unfolding: (AS.DB.API.canAccessAll1
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R <AS.Types.ASUserId>_R
                    ->_R <[AS.Types.ASLocation]>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Types.Bool>_R))) -}
d7e4636ebdf3d837e5517bbb5743a250
  canAccessAll1 :: Database.Redis.Core.Connection
                   -> AS.Types.ASUserId
                   -> [AS.Types.ASLocation]
                   -> GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
    {- Arity: 4,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U(U,U,U)><S,1*U><L,U>,
       Unfolding: (\ conn :: Database.Redis.Core.Connection
                     uid :: AS.Types.ASUserId
                     locs :: [AS.Types.ASLocation]
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   letrec {
                     a6 :: [AS.Types.ASLocation]
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Bool] #)
                       {- Arity: 2, Strictness: <S,1*U><L,U> -}
                     = \ ds :: [AS.Types.ASLocation]
                         eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case ds of wild {
                         [] -> (# eta, GHC.Types.[] @ GHC.Types.Bool #)
                         : y ys
                         -> case AS.DB.API.canAccess1
                                   conn
                                   uid
                                   y
                                   eta of ds1 { (#,#) ipv ipv1 ->
                            case a6 ys ipv of ds2 { (#,#) ipv2 ipv3 ->
                            (# ipv2, GHC.Types.: @ GHC.Types.Bool ipv1 ipv3 #) } } }
                   } in
                   case a6 locs s of ds1 { (#,#) ipv ipv1 ->
                   (# ipv,
                      GHC.List.all
                        @ GHC.Types.Bool
                        (GHC.Base.id @ GHC.Types.Bool)
                        ipv1 #) }) -}
fd6c50c658416dda893522277038c38d
  canAccessSheet :: Database.Redis.Core.Connection
                    -> AS.Types.ASUserId
                    -> AS.Types.ASSheetId
                    -> GHC.Types.IO GHC.Types.Bool
    {- Arity: 4,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U(U,U,U)><L,1*U(U,U,U)><L,U>,
       Unfolding: (AS.DB.API.canAccessSheet1
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R <AS.Types.ASUserId>_R
                    ->_R <AS.Types.ASSheetId>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Types.Bool>_R))) -}
ca6723fa4b6ef034329b33fbadaa6176
  canAccessSheet1 :: Database.Redis.Core.Connection
                     -> AS.Types.ASUserId
                     -> AS.Types.ASSheetId
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
    {- Arity: 4,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U(U,U,U)><L,1*U(U,U,U)><L,U>,
       Unfolding: (\ conn :: Database.Redis.Core.Connection
                     uid :: AS.Types.ASUserId
                     sheetId :: AS.Types.ASSheetId
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case (Data.Pool.withResource_$swithResource
                           @ (Database.Redis.ProtocolPipelining.Connection
                                  Database.Redis.Protocol.Reply)
                           @ (Data.Maybe.Maybe AS.Types.ASSheet)
                           conn `cast` (Database.Redis.Core.NTCo:Connection[0])
                           (\ r1 :: Database.Redis.ProtocolPipelining.Connection
                                        Database.Redis.Protocol.Reply
                              s1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                            case r1 of ww { Database.Redis.ProtocolPipelining.Conn ww1 ww2 ww3 ww4 ->
                            case Database.Redis.Protocol.renderRequest
                                   (GHC.Types.:
                                      @ Data.ByteString.Internal.ByteString
                                      Database.Redis.Commands.get1
                                      (GHC.Types.:
                                         @ Data.ByteString.Internal.ByteString
                                         (AS.DB.Util.getSheetKey sheetId)
                                         (GHC.Types.[]
                                            @ Data.ByteString.Internal.ByteString))) of ww5 { Data.ByteString.Internal.PS ww6 ww7 ww8 ww9 ->
                            case Database.Redis.ProtocolPipelining.$wa2
                                   @ Database.Redis.Protocol.Reply
                                   ww1
                                   ww2
                                   ww3
                                   ww6
                                   ww7
                                   ww8
                                   ww9
                                   s1 of ds1 { (#,#) ipv ipv1 ->
                            case ipv1 of wild {
                              DEFAULT -> (# ipv, Data.Maybe.Nothing @ AS.Types.ASSheet #)
                              Database.Redis.Protocol.SingleLine s2
                              -> (# ipv,
                                    AS.DB.Util.bStrToSheet
                                      (Data.Maybe.Just @ Data.ByteString.Internal.ByteString s2) #)
                              Database.Redis.Protocol.Bulk ds2
                              -> case ds2 of wild1 {
                                   Data.Maybe.Nothing -> (# ipv, AS.DB.API.canAccess2 #)
                                   Data.Maybe.Just ipv2 -> (# ipv, AS.DB.Util.bStrToSheet wild1 #) }
                              Database.Redis.Protocol.MultiBulk ds2
                              -> case ds2 of wild1 {
                                   Data.Maybe.Nothing -> (# ipv, AS.DB.API.canAccess2 #)
                                   Data.Maybe.Just ipv2
                                   -> (# ipv, Data.Maybe.Nothing @ AS.Types.ASSheet #) } } } } })
                             `cast`
                           (<Database.Redis.ProtocolPipelining.Connection
                                 Database.Redis.Protocol.Reply>_R
                            ->_R Sym (GHC.Types.NTCo:IO[0]
                                          <Data.Maybe.Maybe AS.Types.ASSheet>_R)))
                          `cast`
                        (GHC.Types.NTCo:IO[0] <Data.Maybe.Maybe AS.Types.ASSheet>_R)
                          s of ds1 { (#,#) ipv ipv1 ->
                   case ipv1 of wild {
                     Data.Maybe.Nothing -> (# ipv, GHC.Types.False #)
                     Data.Maybe.Just someSheet
                     -> (# ipv,
                           case someSheet of wild1 { AS.Types.Sheet ds2 ds3 ds4 ->
                           AS.Util.hasPermissions uid ds4 } #) } }) -}
99115ab2d97677b714c0f8aa2642aff8
  createSheet :: Database.Redis.Core.Connection
                 -> AS.Types.ASSheet
                 -> GHC.Types.IO AS.Types.ASSheet
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><S,1*U(A,U,U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.DB.API.createSheet1
                    `cast`
                  (<Database.Redis.Core.Connection>_R
                   ->_R <AS.Types.ASSheet>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <AS.Types.ASSheet>_R)) -}
d6ab735516ae26d5c137074c067738b6
  createSheet1 :: Database.Redis.Core.Connection
                  -> AS.Types.ASSheet
                  -> GHC.Prim.State# GHC.Prim.RealWorld
                  -> (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ASSheet #)
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><S,1*U(A,U,U)><L,U>,
       Unfolding: InlineRule (3, True, False)
                  (\ conn :: Database.Redis.Core.Connection
                     ds :: AS.Types.ASSheet
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ds of wild { AS.Types.Sheet sid sname sperms ->
                   case AS.Util.getUniqueId1 eta of ds1 { (#,#) ipv ipv1 ->
                   let {
                     newSheet :: AS.Types.ASSheet {- Strictness: m -}
                     = AS.Types.Sheet ipv1 sname sperms
                   } in
                   case AS.DB.API.createSheet2
                          conn
                          newSheet
                          ipv of ds2 { (#,#) ipv2 ipv3 ->
                   (# ipv2, newSheet #) } } }) -}
e199c6c8ffc346fd6e5abb16e24abe9d
  createSheet2 :: Database.Redis.Core.Connection
                  -> AS.Types.ASSheet
                  -> GHC.Prim.State# GHC.Prim.RealWorld
                  -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U(U(U,U,U),1*U,1*U)><L,U> -}
5875e271bbee37d26f1718c2f0235a49
  createWorkbook :: Database.Redis.Core.Connection
                    -> [AS.Types.ASSheetId]
                    -> GHC.Types.IO AS.Types.ASWorkbook
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U><L,U>,
       Unfolding: (AS.DB.API.createWorkbook1
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R <[AS.Types.ASSheetId]>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <AS.Types.ASWorkbook>_R))) -}
45c1865aa485b10193eeb0bb216501b4
  createWorkbook1 :: Database.Redis.Core.Connection
                     -> [AS.Types.ASSheetId]
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ASWorkbook #)
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U><L,U>,
       Unfolding: (\ conn :: Database.Redis.Core.Connection
                     sheetids :: [AS.Types.ASSheetId]
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case (Data.Pool.withResource_$swithResource
                           @ (Database.Redis.ProtocolPipelining.Connection
                                  Database.Redis.Protocol.Reply)
                           @ [AS.Types.ASWorkbook]
                           conn `cast` (Database.Redis.Core.NTCo:Connection[0])
                           AS.DB.API.createWorkbook4
                             `cast`
                           (<Database.Redis.ProtocolPipelining.Connection
                                 Database.Redis.Protocol.Reply>_R
                            ->_R Sym (GHC.Types.NTCo:IO[0] <[AS.Types.ASWorkbook]>_R)))
                          `cast`
                        (GHC.Types.NTCo:IO[0] <[AS.Types.ASWorkbook]>_R)
                          s of ds1 { (#,#) ipv ipv1 ->
                   let {
                     ipv2 :: GHC.Base.String
                     = AS.DB.Util.getUniquePrefixedName
                         AS.DB.API.createWorkbook3
                         (GHC.Base.map
                            @ AS.Types.ASWorkbook
                            @ [GHC.Types.Char]
                            AS.Types.workbookName
                            ipv1)
                   } in
                   let {
                     wb :: AS.Types.ASWorkbook {- Strictness: m -}
                     = AS.Types.Workbook ipv2 sheetids
                   } in
                   case AS.DB.API.createWorkbook2
                          conn
                          wb
                          ipv of ds2 { (#,#) ipv3 ipv4 ->
                   (# ipv3, wb #) } }) -}
3b3c84c4c218be121844e84ab1cc7fe4
  createWorkbook10 :: [Data.ByteString.Internal.ByteString]
    {- Unfolding: (GHC.Types.:
                     @ Data.ByteString.Internal.ByteString
                     AS.DB.API.createWorkbook11
                     (GHC.Types.[] @ Data.ByteString.Internal.ByteString)) -}
fc05be63e4189fd652f78fb93669a78e
  createWorkbook11 :: Data.ByteString.Internal.ByteString
    {- Unfolding: (case GHC.Prim.newMutVar#
                          @ GHC.ForeignPtr.Finalizers
                          @ GHC.Prim.RealWorld
                          GHC.ForeignPtr.NoFinalizers
                          GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                   let {
                     addr# :: GHC.Prim.Addr# = "workbookKeys"#
                   } in
                   case {__pkg_ccall bytestring-0.10.4.0 strlen GHC.Prim.Addr#
                                                                -> GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                -> (# GHC.Prim.State#
                                                                          GHC.Prim.RealWorld,
                                                                      GHC.Prim.Word# #)}
                          addr#
                          ipv of wild { (#,#) ds3 ds4 ->
                   Data.ByteString.Internal.PS
                     addr#
                     (GHC.ForeignPtr.PlainForeignPtr ipv1)
                     0
                     (GHC.Prim.word2Int# ds4) } }) -}
50ae38be45a69911f305c88f0f2c3bc5
  createWorkbook2 :: Database.Redis.Core.Connection
                     -> AS.Types.ASWorkbook
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U(U,1*U)><L,U> -}
edeb46d89141d136b8e16fb757be3e8a
  createWorkbook3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "Untitled"#) -}
30aa05e759adaf84501cd734a385e227
  createWorkbook4 :: Database.Redis.ProtocolPipelining.Connection
                         Database.Redis.Protocol.Reply
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, [AS.Types.ASWorkbook] #)
    {- Arity: 2,
       Strictness: <S,1*U(U,U(U),U(U(U),U(U(U),U(U),U,U),U(U),U),U)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Database.Redis.ProtocolPipelining.Connection
                              Database.Redis.Protocol.Reply
                     w1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w of ww { Database.Redis.ProtocolPipelining.Conn ww1 ww2 ww3 ww4 ->
                   AS.DB.API.$wa ww1 ww2 ww3 ww4 w1 }) -}
b48227d85d9e372aa2eb032a0cb8981b
  createWorkbook5 :: Data.Either.Either
                         Database.Redis.Protocol.Reply
                         (Data.Maybe.Maybe Data.ByteString.Internal.ByteString)
                     -> AS.Types.ASWorkbook
    {- Arity: 1, Strictness: <S,1*U>,
       Unfolding: (\ ds :: Data.Either.Either
                               Database.Redis.Protocol.Reply
                               (Data.Maybe.Maybe Data.ByteString.Internal.ByteString) ->
                   case ds of wild {
                     Data.Either.Left ipv -> AS.DB.API.createWorkbook7 GHC.Prim.void#
                     Data.Either.Right ds1
                     -> case ds1 of wild1 {
                          Data.Maybe.Nothing -> AS.DB.API.createWorkbook7 GHC.Prim.void#
                          Data.Maybe.Just w
                          -> case Text.Read.readEither6
                                    @ AS.Types.ASWorkbook
                                    (Text.ParserCombinators.ReadP.run
                                       @ AS.Types.ASWorkbook
                                       AS.DB.API.createWorkbook6
                                       (case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                                        Data.ByteString.Internal.$wunpackAppendCharsLazy
                                          ww1
                                          ww2
                                          ww3
                                          ww4
                                          (GHC.Types.[] @ GHC.Types.Char) })) of wild2 {
                               [] -> GHC.Err.error @ AS.Types.ASWorkbook Text.Read.readEither4
                               : x ds2
                               -> case ds2 of wild3 {
                                    [] -> x
                                    : ipv ipv1
                                    -> GHC.Err.error
                                         @ AS.Types.ASWorkbook
                                         Text.Read.readEither2 } } } }) -}
29ffce71f1bbe4e510816ff391d35c3d
  createWorkbook6 :: Text.ParserCombinators.ReadP.P
                         AS.Types.ASWorkbook
    {- Unfolding: ((GHC.Read.parens1
                      @ AS.Types.ASWorkbook
                      AS.Types.$fReadASWorkbook3
                        `cast`
                      (Trans
                           (<Text.ParserCombinators.ReadPrec.Prec>_R
                            ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                          <AS.Types.ASWorkbook>_R))
                           (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                     <AS.Types.ASWorkbook>_R)))
                      Text.ParserCombinators.ReadPrec.minPrec)
                     `cast`
                   (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                        <AS.Types.ASWorkbook>_R)
                     @ AS.Types.ASWorkbook
                     (Text.Read.readEither5 @ AS.Types.ASWorkbook)) -}
f77a46a0ac371b73da937f34bb7f26d0
  createWorkbook7 :: GHC.Prim.Void# -> AS.Types.ASWorkbook
    {- Arity: 1, Strictness: <B,A>b -}
691a5ebac6a1537b884512586fc76267
  createWorkbook8 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "Pattern match failure in do expression at src/AS/DB/API.hs:278:9-20"#) -}
ab468de7e292dde381d184c131aab472
  createWorkbook9 :: [Data.ByteString.Internal.ByteString]
    {- Unfolding: (GHC.Types.:
                     @ Data.ByteString.Internal.ByteString
                     Database.Redis.Commands.smembers1
                     AS.DB.API.createWorkbook10) -}
66a3e1645d0d0033218a5f0d92100de8
  createWorkbookSheet :: Database.Redis.Core.Connection
                         -> AS.Types.WorkbookSheet
                         -> GHC.Types.IO AS.Types.WorkbookSheet
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><S(LS),1*U(U,U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.DB.API.createWorkbookSheet1
                    `cast`
                  (<Database.Redis.Core.Connection>_R
                   ->_R <AS.Types.WorkbookSheet>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <AS.Types.WorkbookSheet>_R)) -}
bb4686570f5f78b0c56268380f9fbd39
  createWorkbookSheet1 :: Database.Redis.Core.Connection
                          -> AS.Types.WorkbookSheet
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.WorkbookSheet #)
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><S(LS),1*U(U,U)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ w :: Database.Redis.Core.Connection
                     w1 :: AS.Types.WorkbookSheet
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w1 of ww { AS.Types.WorkbookSheet ww1 ww2 ->
                   AS.DB.API.$wa1 w ww1 ww2 w2 }) -}
a3e94add3b52b75f3f03849e8992c5fd
  createWorkbook_go :: [Data.ByteString.Internal.ByteString]
                       -> Database.Redis.Core.Redis
                              [Data.Either.Either
                                   Database.Redis.Protocol.Reply
                                   (Data.Maybe.Maybe Data.ByteString.Internal.ByteString)]
    {- Arity: 1, Strictness: <S,1*U> -}
8913fd5522cc5f82d6f29f3f3d4388a5
  createWorkbook_lvl9 :: Data.ByteString.Internal.ByteString
    {- Unfolding: (Database.Redis.Protocol.renderRequest
                     AS.DB.API.createWorkbook9) -}
be343e5d8611d4d5375441d2695b52ce
  deleteCells :: Database.Redis.Core.Connection
                 -> [AS.Types.ASCell]
                 -> GHC.Types.IO ()
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><S,1*U><L,U>,
       Unfolding: (AS.DB.API.deleteCells1
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R <[AS.Types.ASCell]>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
ab6968935d95a90e258df5dec2362e61
  deleteCells1 :: Database.Redis.Core.Connection
                  -> [AS.Types.ASCell]
                  -> GHC.Prim.State# GHC.Prim.RealWorld
                  -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><S,1*U><L,U>,
       Unfolding: (\ ds :: Database.Redis.Core.Connection
                     ds1 :: [AS.Types.ASCell]
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ds1 of wild {
                     [] -> (# eta, GHC.Tuple.() #)
                     : ipv ipv1
                     -> case GHC.Base.map
                               @ AS.Types.ASCell
                               @ AS.Types.ASLocation
                               AS.Types.cellLocation
                               wild of wild1 {
                          [] -> (# eta, GHC.Tuple.() #)
                          : ipv2 ipv3
                          -> (Data.Pool.withResource_$swithResource
                                @ (Database.Redis.ProtocolPipelining.Connection
                                       Database.Redis.Protocol.Reply)
                                @ ()
                                ds `cast` (Database.Redis.Core.NTCo:Connection[0])
                                (\ conn :: Database.Redis.ProtocolPipelining.Connection
                                               Database.Redis.Protocol.Reply
                                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                 case ((AS.DB.API.deleteCells_go wild1)
                                         `cast`
                                       (Trans
                                            (Database.Redis.Core.NTCo:Redis[0] <()>_N)
                                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                 <Database.Redis.ProtocolPipelining.Connection
                                                      Database.Redis.Protocol.Reply>_R
                                                 <GHC.Types.IO>_R
                                                 <()>_N))
                                         conn)
                                        `cast`
                                      (GHC.Types.NTCo:IO[0] <()>_R)
                                        eta1 of ds2 { (#,#) ipv4 ipv5 ->
                                 (# ipv4, GHC.Tuple.() #) })
                                  `cast`
                                (<Database.Redis.ProtocolPipelining.Connection
                                      Database.Redis.Protocol.Reply>_R
                                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)))
                               `cast`
                             (GHC.Types.NTCo:IO[0] <()>_R)
                               eta } }) -}
e6786cba99a0df5695428acf74e70dec
  deleteCells_go :: [AS.Types.ASLocation]
                    -> Database.Redis.Core.Redis ()
    {- Arity: 1, Strictness: <S,1*U> -}
662d3d041cca1dd86cc1f651e24384ea
  deleteChunkVolatileCells :: [AS.Types.ASCell]
                              -> Database.Redis.Core.Redis ()
    {- Arity: 1, Strictness: <L,1*U>,
       Unfolding: (\ cells :: [AS.Types.ASCell] ->
                   let {
                     lvl22 :: Data.ByteString.Internal.ByteString
                     = Database.Redis.Protocol.renderRequest
                         (GHC.Types.:
                            @ Data.ByteString.Internal.ByteString
                            Database.Redis.Commands.srem1
                            (GHC.Types.:
                               @ Data.ByteString.Internal.ByteString
                               AS.DB.API.deleteChunkVolatileCells1
                               (GHC.Base.map
                                  @ Data.ByteString.Internal.ByteString
                                  @ Data.ByteString.Internal.ByteString
                                  (GHC.Base.id @ Data.ByteString.Internal.ByteString)
                                  (AS.DB.API.deleteChunkVolatileCells_go cells))))
                   } in
                   (\ eta :: Database.Redis.ProtocolPipelining.Connection
                                 Database.Redis.Protocol.Reply
                      eta1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                    case eta of ww { Database.Redis.ProtocolPipelining.Conn ww1 ww2 ww3 ww4 ->
                    case lvl22 of ww5 { Data.ByteString.Internal.PS ww6 ww7 ww8 ww9 ->
                    case Database.Redis.ProtocolPipelining.$wa2
                           @ Database.Redis.Protocol.Reply
                           ww1
                           ww2
                           ww3
                           ww6
                           ww7
                           ww8
                           ww9
                           eta1 of ds1 { (#,#) ipv ipv1 ->
                    (# ipv, GHC.Tuple.() #) } } })
                     `cast`
                   (Trans
                        (<Database.Redis.ProtocolPipelining.Connection
                              Database.Redis.Protocol.Reply>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Trans
                             (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                       <Database.Redis.ProtocolPipelining.Connection
                                            Database.Redis.Protocol.Reply>_R
                                       <GHC.Types.IO>_R
                                       <()>_N))
                             (Sym (Database.Redis.Core.NTCo:Redis[0]) <()>_N)))) -}
d607995c17ffe7aa2029ce8e1c5772e3
  deleteChunkVolatileCells1 :: Data.ByteString.Internal.ByteString
    {- Unfolding: (case GHC.Prim.newMutVar#
                          @ GHC.ForeignPtr.Finalizers
                          @ GHC.Prim.RealWorld
                          GHC.ForeignPtr.NoFinalizers
                          GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                   let {
                     addr# :: GHC.Prim.Addr# = "volatileLocs"#
                   } in
                   case {__pkg_ccall bytestring-0.10.4.0 strlen GHC.Prim.Addr#
                                                                -> GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                -> (# GHC.Prim.State#
                                                                          GHC.Prim.RealWorld,
                                                                      GHC.Prim.Word# #)}
                          addr#
                          ipv of wild { (#,#) ds3 ds4 ->
                   Data.ByteString.Internal.PS
                     addr#
                     (GHC.ForeignPtr.PlainForeignPtr ipv1)
                     0
                     (GHC.Prim.word2Int# ds4) } }) -}
0b8d50d4525e64b4bf5694ce199a30a8
  deleteChunkVolatileCells_go :: [AS.Types.ASCell]
                                 -> [Data.ByteString.Internal.ByteString]
    {- Arity: 1, Strictness: <S,1*U> -}
0269c38cb3eefe16a3f3a1d96c3840c2
  deleteLocs :: Database.Redis.Core.Connection
                -> [AS.Types.ASLocation]
                -> GHC.Types.IO ()
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><S,1*U><L,U>,
       Unfolding: (AS.DB.API.deleteLocs1
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R <[AS.Types.ASLocation]>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
0967275900d8d881e54b6c2470e51967
  deleteLocs1 :: Database.Redis.Core.Connection
                 -> [AS.Types.ASLocation]
                 -> GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><S,1*U><L,U>,
       Unfolding: (\ ds :: Database.Redis.Core.Connection
                     ds1 :: [AS.Types.ASLocation]
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ds1 of wild {
                     [] -> (# eta, GHC.Tuple.() #)
                     : ipv ipv1
                     -> (Data.Pool.withResource_$swithResource
                           @ (Database.Redis.ProtocolPipelining.Connection
                                  Database.Redis.Protocol.Reply)
                           @ ()
                           ds `cast` (Database.Redis.Core.NTCo:Connection[0])
                           (\ conn :: Database.Redis.ProtocolPipelining.Connection
                                          Database.Redis.Protocol.Reply
                              eta1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                            case ((AS.DB.API.deleteCells_go wild)
                                    `cast`
                                  (Trans
                                       (Database.Redis.Core.NTCo:Redis[0] <()>_N)
                                       (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                            <Database.Redis.ProtocolPipelining.Connection
                                                 Database.Redis.Protocol.Reply>_R
                                            <GHC.Types.IO>_R
                                            <()>_N))
                                    conn)
                                   `cast`
                                 (GHC.Types.NTCo:IO[0] <()>_R)
                                   eta1 of ds2 { (#,#) ipv2 ipv3 ->
                            (# ipv2, GHC.Tuple.() #) })
                             `cast`
                           (<Database.Redis.ProtocolPipelining.Connection
                                 Database.Redis.Protocol.Reply>_R
                            ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)))
                          `cast`
                        (GHC.Types.NTCo:IO[0] <()>_R)
                          eta }) -}
efa940c3f685aa2880c580ba23ed9498
  deleteSheetUnsafe :: Database.Redis.Core.Connection
                       -> AS.Types.ASSheetId
                       -> GHC.Types.IO ()
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U(U,U,U)><L,U>,
       Unfolding: (AS.DB.API.deleteSheetUnsafe1
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R <AS.Types.ASSheetId>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
002a3cdcf5ba679729141475386aae71
  deleteSheetUnsafe1 :: Database.Redis.Core.Connection
                        -> AS.Types.ASSheetId
                        -> GHC.Prim.State# GHC.Prim.RealWorld
                        -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U(U,U,U)><L,U> -}
6319acefa1c204c9bdd8a2c181d7de9c
  deleteWorkbook :: Database.Redis.Core.Connection
                    -> GHC.Base.String
                    -> GHC.Types.IO ()
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U><L,U>,
       Unfolding: (AS.DB.API.deleteWorkbook1
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R <GHC.Base.String>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
52cc381765de4c988cb62365dbdca007
  deleteWorkbook1 :: Database.Redis.Core.Connection
                     -> GHC.Base.String
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U><L,U>,
       Unfolding: (\ conn :: Database.Redis.Core.Connection
                     name :: GHC.Base.String
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   let {
                     workbookKey :: Data.ByteString.Internal.ByteString
                     = Data.ByteString.Internal.unsafePackLenChars
                         (case GHC.List.$wlenAcc @ GHC.Types.Char name 0 of ww { DEFAULT ->
                          GHC.Types.I# ww })
                         name
                   } in
                   let {
                     lvl22 :: Data.ByteString.Internal.ByteString
                     = Database.Redis.Protocol.renderRequest
                         (GHC.Types.:
                            @ Data.ByteString.Internal.ByteString
                            Database.Redis.Commands.srem1
                            (GHC.Types.:
                               @ Data.ByteString.Internal.ByteString
                               AS.DB.API.deleteWorkbook2
                               (GHC.Base.map
                                  @ Data.ByteString.Internal.ByteString
                                  @ Data.ByteString.Internal.ByteString
                                  (GHC.Base.id @ Data.ByteString.Internal.ByteString)
                                  (GHC.Types.:
                                     @ Data.ByteString.Internal.ByteString
                                     workbookKey
                                     (GHC.Types.[] @ Data.ByteString.Internal.ByteString)))))
                   } in
                   let {
                     lvl23 :: Data.ByteString.Internal.ByteString
                     = Database.Redis.Protocol.renderRequest
                         (GHC.Types.:
                            @ Data.ByteString.Internal.ByteString
                            Database.Redis.Commands.del1
                            (GHC.Base.map
                               @ Data.ByteString.Internal.ByteString
                               @ Data.ByteString.Internal.ByteString
                               (GHC.Base.id @ Data.ByteString.Internal.ByteString)
                               (GHC.Types.:
                                  @ Data.ByteString.Internal.ByteString
                                  workbookKey
                                  (GHC.Types.[] @ Data.ByteString.Internal.ByteString))))
                   } in
                   let {
                     $wa9 :: GHC.Types.Int
                             -> GHC.IO.Handle.Types.Handle
                             -> GHC.IORef.IORef [Database.Redis.Protocol.Reply]
                             -> Control.Concurrent.BoundedChan.BoundedChan
                                    Database.Redis.Protocol.Reply
                             -> GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   (Database.Redis.Transactions.Queued GHC.Integer.Type.Integer,
                                    GHC.Types.Int) #)
                       {- Arity: 5,
                          Strictness: <L,U(U)><L,U><L,U(U)><L,U(U(U),U(U(U),U(U),A,U),U(U),A)><L,U> -}
                     = \ w :: GHC.Types.Int
                         ww :: GHC.IO.Handle.Types.Handle
                         ww1 :: GHC.IORef.IORef [Database.Redis.Protocol.Reply]
                         ww2 :: Control.Concurrent.BoundedChan.BoundedChan
                                    Database.Redis.Protocol.Reply
                         w1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case lvl23 of ww5 { Data.ByteString.Internal.PS ww6 ww7 ww8 ww9 ->
                       case Database.Redis.ProtocolPipelining.$wa2
                              @ Database.Redis.Protocol.Reply
                              ww
                              ww1
                              ww2
                              ww6
                              ww7
                              ww8
                              ww9
                              w1 of ds1 { (#,#) ipv ipv1 ->
                       case Database.Redis.Transactions.$wa
                              @ GHC.Integer.Type.Integer
                              Database.Redis.Types.$fRedisResultInteger_$cdecode
                                `cast`
                              (Sym (Database.Redis.Types.NTCo:RedisResult[0]
                                        <GHC.Integer.Type.Integer>_N))
                              w
                              ipv of ds2 { (#,#) ipv2 ipv3 ->
                       case ipv3 of wild { (,) a6 s' ->
                       case lvl22 of ww3 { Data.ByteString.Internal.PS ww4 ww10 ww11 ww12 ->
                       case Database.Redis.ProtocolPipelining.$wa2
                              @ Database.Redis.Protocol.Reply
                              ww
                              ww1
                              ww2
                              ww4
                              ww10
                              ww11
                              ww12
                              ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                       Database.Redis.Transactions.$wa
                         @ GHC.Integer.Type.Integer
                         Database.Redis.Types.$fRedisResultInteger_$cdecode
                           `cast`
                         (Sym (Database.Redis.Types.NTCo:RedisResult[0]
                                   <GHC.Integer.Type.Integer>_N))
                         s'
                         ipv4 } } } } } }
                   } in
                   let {
                     a6 :: GHC.Types.Int
                           -> Database.Redis.ProtocolPipelining.Connection
                                  Database.Redis.Protocol.Reply
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 (Database.Redis.Transactions.Queued GHC.Integer.Type.Integer,
                                  GHC.Types.Int) #)
                       {- Arity: 3,
                          Strictness: <L,U(U)><S,1*U(U,U(U),U(U(U),U(U(U),U(U),A,U),U(U),A),A)><L,U>,
                          Inline: INLINE[0],
                          Unfolding: InlineRule (3, True, False)
                                     (\ w :: GHC.Types.Int
                                        w1 :: Database.Redis.ProtocolPipelining.Connection
                                                  Database.Redis.Protocol.Reply
                                        w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                      case w1 of ww { Database.Redis.ProtocolPipelining.Conn ww1 ww2 ww3 ww4 ->
                                      $wa9 w ww1 ww2 ww3 w2 }) -}
                     = \ w :: GHC.Types.Int
                         w1 :: Database.Redis.ProtocolPipelining.Connection
                                   Database.Redis.Protocol.Reply
                         w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case w1 of ww { Database.Redis.ProtocolPipelining.Conn ww1 ww2 ww3 ww4 ->
                       $wa9 w ww1 ww2 ww3 w2 }
                   } in
                   (Data.Pool.withResource_$swithResource
                      @ (Database.Redis.ProtocolPipelining.Connection
                             Database.Redis.Protocol.Reply)
                      @ ()
                      conn `cast` (Database.Redis.Core.NTCo:Connection[0])
                      (\ r1 :: Database.Redis.ProtocolPipelining.Connection
                                   Database.Redis.Protocol.Reply
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case Database.Redis.Transactions.multiExec1
                              @ GHC.Integer.Type.Integer
                              a6
                                `cast`
                              (Trans
                                   (<GHC.Types.Int>_R
                                    ->_R Trans
                                             (<Database.Redis.ProtocolPipelining.Connection
                                                   Database.Redis.Protocol.Reply>_R
                                              ->_R Sym (GHC.Types.NTCo:IO[0]
                                                            <(Database.Redis.Transactions.Queued
                                                                  GHC.Integer.Type.Integer,
                                                              GHC.Types.Int)>_R))
                                             (Trans
                                                  (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                            <Database.Redis.ProtocolPipelining.Connection
                                                                 Database.Redis.Protocol.Reply>_R
                                                            <GHC.Types.IO>_R
                                                            <(Database.Redis.Transactions.Queued
                                                                  GHC.Integer.Type.Integer,
                                                              GHC.Types.Int)>_N))
                                                  (Sym (Database.Redis.Core.NTCo:Redis[0]) <(Database.Redis.Transactions.Queued
                                                                                                 GHC.Integer.Type.Integer,
                                                                                             GHC.Types.Int)>_N)))
                                   (Trans
                                        (Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                                  <GHC.Types.Int>_N
                                                  <Database.Redis.Core.Redis>_R
                                                  <Database.Redis.Transactions.Queued
                                                       GHC.Integer.Type.Integer>_N))
                                        (Sym (Database.Redis.Transactions.NTCo:RedisTx[0]) <Database.Redis.Transactions.Queued
                                                                                                GHC.Integer.Type.Integer>_N)))
                              r1
                              s of ds1 { (#,#) ipv ipv1 ->
                       (# ipv, GHC.Tuple.() #) })
                        `cast`
                      (<Database.Redis.ProtocolPipelining.Connection
                            Database.Redis.Protocol.Reply>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)))
                     `cast`
                   (GHC.Types.NTCo:IO[0] <()>_R)
                     eta) -}
def5ace52b29d1eb5bfd6373c4839ce2
  deleteWorkbook2 :: Data.ByteString.Internal.ByteString
    {- Unfolding: (case GHC.Prim.newMutVar#
                          @ GHC.ForeignPtr.Finalizers
                          @ GHC.Prim.RealWorld
                          GHC.ForeignPtr.NoFinalizers
                          GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                   let {
                     addr# :: GHC.Prim.Addr# = "workbookKeys"#
                   } in
                   case {__pkg_ccall bytestring-0.10.4.0 strlen GHC.Prim.Addr#
                                                                -> GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                -> (# GHC.Prim.State#
                                                                          GHC.Prim.RealWorld,
                                                                      GHC.Prim.Word# #)}
                          addr#
                          ipv of wild { (#,#) ds3 ds4 ->
                   Data.ByteString.Internal.PS
                     addr#
                     (GHC.ForeignPtr.PlainForeignPtr ipv1)
                     0
                     (GHC.Prim.word2Int# ds4) } }) -}
a64540eea0544d550cc734df7e89c0cc
  deleteWorkbookAndSheets :: Database.Redis.Core.Connection
                             -> GHC.Base.String
                             -> GHC.Types.IO ()
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U><L,U>,
       Unfolding: (AS.DB.API.deleteWorkbookAndSheets1
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R <GHC.Base.String>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
3429fa54b423909b18f5b7dce60db689
  deleteWorkbookAndSheets1 :: Database.Redis.Core.Connection
                              -> GHC.Base.String
                              -> GHC.Prim.State# GHC.Prim.RealWorld
                              -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U><L,U> -}
728ba23b0dee9fb70c682bc51f636881
  deleteWorkbookSheet :: Database.Redis.Core.Connection
                         -> AS.Types.WorkbookSheet
                         -> GHC.Types.IO ()
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><S(LS),U(1*U,1*U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.DB.API.deleteWorkbookSheet1
                    `cast`
                  (<Database.Redis.Core.Connection>_R
                   ->_R <AS.Types.WorkbookSheet>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
4db3b6d06e1020b3e6da9f6d642530b6
  deleteWorkbookSheet1 :: Database.Redis.Core.Connection
                          -> AS.Types.WorkbookSheet
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><S(LS),U(1*U,1*U)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ w :: Database.Redis.Core.Connection
                     w1 :: AS.Types.WorkbookSheet
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w1 of ww { AS.Types.WorkbookSheet ww1 ww2 ->
                   AS.DB.API.$wa2 w ww1 ww2 w2 }) -}
03e1fb0e8027a007148c1a5b7c7cbcb2
  getAllSheets :: Database.Redis.Core.Connection
                  -> GHC.Types.IO [AS.Types.ASSheet]
    {- Arity: 2,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U>,
       Unfolding: (AS.DB.API.getAllSheets1
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <[AS.Types.ASSheet]>_R))) -}
d5af6d3cb6e749161db009c869247f17
  getAllSheets1 :: Database.Redis.Core.Connection
                   -> GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, [AS.Types.ASSheet] #)
    {- Arity: 2,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U>,
       Unfolding: (\ conn :: Database.Redis.Core.Connection
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   (Data.Pool.withResource_$swithResource
                      @ (Database.Redis.ProtocolPipelining.Connection
                             Database.Redis.Protocol.Reply)
                      @ [AS.Types.ASSheet]
                      conn `cast` (Database.Redis.Core.NTCo:Connection[0])
                      AS.DB.API.getAllSheets2
                        `cast`
                      (<Database.Redis.ProtocolPipelining.Connection
                            Database.Redis.Protocol.Reply>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <[AS.Types.ASSheet]>_R)))
                     `cast`
                   (GHC.Types.NTCo:IO[0] <[AS.Types.ASSheet]>_R)
                     eta) -}
86d47c27a69dcfb21872133cc553829b
  getAllSheets2 :: Database.Redis.ProtocolPipelining.Connection
                       Database.Redis.Protocol.Reply
                   -> GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, [AS.Types.ASSheet] #)
    {- Arity: 2,
       Strictness: <S,1*U(U,U(U),U(U(U),U(U(U),U(U),U,U),U(U),U),U)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Database.Redis.ProtocolPipelining.Connection
                              Database.Redis.Protocol.Reply
                     w1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w of ww { Database.Redis.ProtocolPipelining.Conn ww1 ww2 ww3 ww4 ->
                   AS.DB.API.$wa3 ww1 ww2 ww3 ww4 w1 }) -}
044642186ced6d2fe5f676e4053d53f9
  getAllSheets3 :: Data.Either.Either
                       Database.Redis.Protocol.Reply
                       (Data.Maybe.Maybe Data.ByteString.Internal.ByteString)
                   -> AS.Types.ASSheet
    {- Arity: 1, Strictness: <S,1*U>,
       Unfolding: (\ ds :: Data.Either.Either
                               Database.Redis.Protocol.Reply
                               (Data.Maybe.Maybe Data.ByteString.Internal.ByteString) ->
                   case ds of wild {
                     Data.Either.Left ipv -> AS.DB.API.getAllSheets5 GHC.Prim.void#
                     Data.Either.Right ds1
                     -> case ds1 of wild1 {
                          Data.Maybe.Nothing -> AS.DB.API.getAllSheets5 GHC.Prim.void#
                          Data.Maybe.Just s
                          -> case Text.Read.readEither6
                                    @ AS.Types.ASSheet
                                    (Text.ParserCombinators.ReadP.run
                                       @ AS.Types.ASSheet
                                       AS.DB.API.getAllSheets4
                                       (case s of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                                        Data.ByteString.Internal.$wunpackAppendCharsLazy
                                          ww1
                                          ww2
                                          ww3
                                          ww4
                                          (GHC.Types.[] @ GHC.Types.Char) })) of wild2 {
                               [] -> GHC.Err.error @ AS.Types.ASSheet Text.Read.readEither4
                               : x ds2
                               -> case ds2 of wild3 {
                                    [] -> x
                                    : ipv ipv1
                                    -> GHC.Err.error
                                         @ AS.Types.ASSheet
                                         Text.Read.readEither2 } } } }) -}
f86214937fcc9b039eb6763a90614a11
  getAllSheets4 :: Text.ParserCombinators.ReadP.P AS.Types.ASSheet
    {- Unfolding: ((GHC.Read.parens1
                      @ AS.Types.ASSheet
                      AS.Types.$fReadASSheet3
                        `cast`
                      (Trans
                           (<Text.ParserCombinators.ReadPrec.Prec>_R
                            ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                          <AS.Types.ASSheet>_R))
                           (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                     <AS.Types.ASSheet>_R)))
                      Text.ParserCombinators.ReadPrec.minPrec)
                     `cast`
                   (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <AS.Types.ASSheet>_R)
                     @ AS.Types.ASSheet
                     (Text.Read.readEither5 @ AS.Types.ASSheet)) -}
fdb6ce9d13a414bab47c615d0a4f2c25
  getAllSheets5 :: GHC.Prim.Void# -> AS.Types.ASSheet
    {- Arity: 1, Strictness: <B,A>b -}
30558e9fe2e1d145f68b615507bf98b2
  getAllSheets6 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "Pattern match failure in do expression at src/AS/DB/API.hs:336:9-23"#) -}
b7e5128735abe975987d1b4b46490269
  getAllSheets7 :: [Data.ByteString.Internal.ByteString]
    {- Unfolding: (GHC.Types.:
                     @ Data.ByteString.Internal.ByteString
                     Database.Redis.Commands.smembers1
                     AS.DB.API.getAllSheets8) -}
5820791ee657e7eb8396f93260fdbdcb
  getAllSheets8 :: [Data.ByteString.Internal.ByteString]
    {- Unfolding: (GHC.Types.:
                     @ Data.ByteString.Internal.ByteString
                     AS.DB.API.getAllSheets9
                     (GHC.Types.[] @ Data.ByteString.Internal.ByteString)) -}
84d0de4c8cd6b7b36c12b19c5dfa9d7e
  getAllSheets9 :: Data.ByteString.Internal.ByteString
    {- Unfolding: (case GHC.Prim.newMutVar#
                          @ GHC.ForeignPtr.Finalizers
                          @ GHC.Prim.RealWorld
                          GHC.ForeignPtr.NoFinalizers
                          GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                   let {
                     addr# :: GHC.Prim.Addr# = "sheetKeys"#
                   } in
                   case {__pkg_ccall bytestring-0.10.4.0 strlen GHC.Prim.Addr#
                                                                -> GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                -> (# GHC.Prim.State#
                                                                          GHC.Prim.RealWorld,
                                                                      GHC.Prim.Word# #)}
                          addr#
                          ipv of wild { (#,#) ds3 ds4 ->
                   Data.ByteString.Internal.PS
                     addr#
                     (GHC.ForeignPtr.PlainForeignPtr ipv1)
                     0
                     (GHC.Prim.word2Int# ds4) } }) -}
522668c0fc0cbf110a650e2b8734418b
  getAllSheets_go :: [Data.ByteString.Internal.ByteString]
                     -> Database.Redis.Core.Redis
                            [Data.Either.Either
                                 Database.Redis.Protocol.Reply
                                 (Data.Maybe.Maybe Data.ByteString.Internal.ByteString)]
    {- Arity: 1, Strictness: <S,1*U> -}
d99e31f94ad51b4edd335f9e13b03112
  getAllSheets_lvl9 :: Data.ByteString.Internal.ByteString
    {- Unfolding: (Database.Redis.Protocol.renderRequest
                     AS.DB.API.getAllSheets7) -}
cd55802ba2f8600e8a779c3f50f154cd
  getAllWorkbookSheets :: Database.Redis.Core.Connection
                          -> GHC.Types.IO [AS.Types.WorkbookSheet]
    {- Arity: 2,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U>,
       Unfolding: (AS.DB.API.getAllWorkbookSheets1
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <[AS.Types.WorkbookSheet]>_R))) -}
32cbe3696eca66a91349c4cf6562109c
  getAllWorkbookSheets1 :: Database.Redis.Core.Connection
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 [AS.Types.WorkbookSheet] #)
    {- Arity: 2,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U>,
       Unfolding: (\ conn :: Database.Redis.Core.Connection
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case (Data.Pool.withResource_$swithResource
                           @ (Database.Redis.ProtocolPipelining.Connection
                                  Database.Redis.Protocol.Reply)
                           @ [AS.Types.ASWorkbook]
                           conn `cast` (Database.Redis.Core.NTCo:Connection[0])
                           AS.DB.API.createWorkbook4
                             `cast`
                           (<Database.Redis.ProtocolPipelining.Connection
                                 Database.Redis.Protocol.Reply>_R
                            ->_R Sym (GHC.Types.NTCo:IO[0] <[AS.Types.ASWorkbook]>_R)))
                          `cast`
                        (GHC.Types.NTCo:IO[0] <[AS.Types.ASWorkbook]>_R)
                          s of ds1 { (#,#) ipv ipv1 ->
                   case (Data.Pool.withResource_$swithResource
                           @ (Database.Redis.ProtocolPipelining.Connection
                                  Database.Redis.Protocol.Reply)
                           @ [AS.Types.ASSheet]
                           conn `cast` (Database.Redis.Core.NTCo:Connection[0])
                           AS.DB.API.getAllSheets2
                             `cast`
                           (<Database.Redis.ProtocolPipelining.Connection
                                 Database.Redis.Protocol.Reply>_R
                            ->_R Sym (GHC.Types.NTCo:IO[0] <[AS.Types.ASSheet]>_R)))
                          `cast`
                        (GHC.Types.NTCo:IO[0] <[AS.Types.ASSheet]>_R)
                          ipv of ds2 { (#,#) ipv2 ipv3 ->
                   (# ipv2, AS.Util.matchSheets ipv1 ipv3 #) } }) -}
b73084c68344135fa7971775345bf7f3
  getAllWorkbooks :: Database.Redis.Core.Connection
                     -> GHC.Types.IO [AS.Types.ASWorkbook]
    {- Arity: 2,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U>,
       Unfolding: (AS.DB.API.getAllWorkbooks1
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <[AS.Types.ASWorkbook]>_R))) -}
cf924b284165087c834187f459d87c10
  getAllWorkbooks1 :: Database.Redis.Core.Connection
                      -> GHC.Prim.State# GHC.Prim.RealWorld
                      -> (# GHC.Prim.State# GHC.Prim.RealWorld, [AS.Types.ASWorkbook] #)
    {- Arity: 2,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U>,
       Unfolding: (\ conn :: Database.Redis.Core.Connection
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   (Data.Pool.withResource_$swithResource
                      @ (Database.Redis.ProtocolPipelining.Connection
                             Database.Redis.Protocol.Reply)
                      @ [AS.Types.ASWorkbook]
                      conn `cast` (Database.Redis.Core.NTCo:Connection[0])
                      AS.DB.API.createWorkbook4
                        `cast`
                      (<Database.Redis.ProtocolPipelining.Connection
                            Database.Redis.Protocol.Reply>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <[AS.Types.ASWorkbook]>_R)))
                     `cast`
                   (GHC.Types.NTCo:IO[0] <[AS.Types.ASWorkbook]>_R)
                     eta) -}
f5bd89f23687f71b1590f17381eeaa0f
  getCell :: Database.Redis.Core.Connection
             -> AS.Types.ASLocation
             -> GHC.Types.IO (Data.Maybe.Maybe AS.Types.ASCell)
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U><L,U>,
       Unfolding: (AS.DB.API.getCell1
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R <AS.Types.ASLocation>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0]
                                  <Data.Maybe.Maybe AS.Types.ASCell>_R))) -}
a4449263289a27ae68050665ebe8c1c9
  getCell1 :: Database.Redis.Core.Connection
              -> AS.Types.ASLocation
              -> GHC.Prim.State# GHC.Prim.RealWorld
              -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                    Data.Maybe.Maybe AS.Types.ASCell #)
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U><L,U>,
       Unfolding: (\ conn :: Database.Redis.Core.Connection
                     loc :: AS.Types.ASLocation
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case AS.DB.API.getCell2
                          conn
                          (GHC.Types.:
                             @ AS.Types.ASLocation
                             loc
                             (GHC.Types.[] @ AS.Types.ASLocation))
                          s of ds1 { (#,#) ipv ipv1 ->
                   (# ipv,
                      case ipv1 of wild {
                        [] -> GHC.List.badHead @ (Data.Maybe.Maybe AS.Types.ASCell)
                        : x ds2 -> x } #) }) -}
08f54b5abe74d687c07679875226d54b
  getCell10 :: GHC.Types.IO [Data.Maybe.Maybe AS.Types.ASCell]
    {- Strictness: b -}
6f2c76a9ba158b45fd02ef063059966e
  getCell2 :: Database.Redis.Core.Connection
              -> [AS.Types.ASLocation]
              -> GHC.Prim.State# GHC.Prim.RealWorld
              -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                    [Data.Maybe.Maybe AS.Types.ASCell] #)
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><S,1*U><L,U>,
       Unfolding: (\ ds :: Database.Redis.Core.Connection
                     ds1 :: [AS.Types.ASLocation]
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ds1 of wild {
                     [] -> (# eta, GHC.Types.[] @ (Data.Maybe.Maybe AS.Types.ASCell) #)
                     : ipv ipv1
                     -> case AS.DB.API.$wgo wild of ww { (#,#) ww1 ww2 ->
                        let {
                          $j :: GHC.Prim.State# GHC.Prim.RealWorld
                                -> [Data.Maybe.Maybe AS.Types.ASCell]
                                -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                      [Data.Maybe.Maybe AS.Types.ASCell] #)
                            {- Arity: 2 -}
                          = \ ipv2 :: GHC.Prim.State# GHC.Prim.RealWorld
                              ipv3 :: [Data.Maybe.Maybe AS.Types.ASCell] ->
                            letrec {
                              a6 :: [AS.Types.ASLocation]
                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                          [[Data.Maybe.Maybe AS.Types.ASCell]] #)
                                {- Arity: 2, Strictness: <S,1*U><L,U> -}
                              = \ ds2 :: [AS.Types.ASLocation]
                                  eta1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                case ds2 of wild1 {
                                  []
                                  -> (# eta1, GHC.Types.[] @ [Data.Maybe.Maybe AS.Types.ASCell] #)
                                  : y ys
                                  -> case AS.DB.API.getCell6 ds y eta1 of ds3 { (#,#) ipv4 ipv5 ->
                                     case a6 ys ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                                     (# ipv6,
                                        GHC.Types.:
                                          @ [Data.Maybe.Maybe AS.Types.ASCell]
                                          ipv5
                                          ipv7 #) } } }
                            } in
                            case a6 ww1 ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                            (# ipv4,
                               GHC.Base.++
                                 @ (Data.Maybe.Maybe AS.Types.ASCell)
                                 ipv3
                                 (AS.DB.API.getCell_go2 ipv5) #) }
                        } in
                        case AS.DB.API.getCell_go1 ww2 of wild1 {
                          [] -> $j eta (GHC.Types.[] @ (Data.Maybe.Maybe AS.Types.ASCell))
                          : ipv2 ipv3
                          -> case AS.Util.printTimed1
                                    AS.DB.API.getCell5
                                    eta of ds2 { (#,#) ipv4 ipv5 ->
                             case (Data.Pool.withResource_$swithResource
                                     @ (Database.Redis.ProtocolPipelining.Connection
                                            Database.Redis.Protocol.Reply)
                                     @ [Data.Maybe.Maybe AS.Types.ASCell]
                                     ds `cast` (Database.Redis.Core.NTCo:Connection[0])
                                     (\ eta1 :: Database.Redis.ProtocolPipelining.Connection
                                                    Database.Redis.Protocol.Reply
                                        eta2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                      case AS.Util.printTimed1
                                             AS.DB.API.getCell4
                                             eta2 of ds3 { (#,#) ipv6 ipv7 ->
                                      case ((AS.DB.API.getCell_go wild1)
                                              `cast`
                                            (Trans
                                                 (Database.Redis.Core.NTCo:Redis[0] <[Data.Maybe.Maybe
                                                                                          AS.Types.ASCell]>_N)
                                                 (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                      <Database.Redis.ProtocolPipelining.Connection
                                                           Database.Redis.Protocol.Reply>_R
                                                      <GHC.Types.IO>_R
                                                      <[Data.Maybe.Maybe AS.Types.ASCell]>_N))
                                              eta1)
                                             `cast`
                                           (GHC.Types.NTCo:IO[0]
                                                <[Data.Maybe.Maybe AS.Types.ASCell]>_R)
                                             ipv6 of ds4 { (#,#) ipv8 ipv9 ->
                                      case AS.Util.printTimed1
                                             AS.DB.API.getCell3
                                             ipv8 of ds5 { (#,#) ipv10 ipv11 ->
                                      (# ipv10, ipv9 #) } } })
                                       `cast`
                                     (<Database.Redis.ProtocolPipelining.Connection
                                           Database.Redis.Protocol.Reply>_R
                                      ->_R Sym (GHC.Types.NTCo:IO[0]
                                                    <[Data.Maybe.Maybe AS.Types.ASCell]>_R)))
                                    `cast`
                                  (GHC.Types.NTCo:IO[0] <[Data.Maybe.Maybe AS.Types.ASCell]>_R)
                                    ipv4 of ds3 { (#,#) ipv6 ipv7 ->
                             $j ipv6 ipv7 } } } } }) -}
255edcc7aa669123c317f0eb2ee51aa9
  getCell3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "redis got cells"#) -}
e8b786402a3526a72319acf2885c3b2c
  getCell4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "redis about to get cells"#) -}
68034fa47c0f5078af2f03ee37ec1688
  getCell5 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "redis about to run"#) -}
8381d245d5771d8484647c619e829282
  getCell6 :: Database.Redis.Core.Connection
              -> AS.Types.ASLocation
              -> GHC.Prim.State# GHC.Prim.RealWorld
              -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                    [Data.Maybe.Maybe AS.Types.ASCell] #)
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><S,1*U><L,U>,
       Unfolding: (\ conn :: Database.Redis.Core.Connection
                     ds :: AS.Types.ASLocation
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ds of wild {
                     DEFAULT
                     -> case AS.DB.API.getCell10
                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  [Data.Maybe.Maybe AS.Types.ASCell] #)
                        of {}
                     AS.Types.Column sheetid col
                     -> (Data.Pool.withResource_$swithResource
                           @ (Database.Redis.ProtocolPipelining.Connection
                                  Database.Redis.Protocol.Reply)
                           @ [Data.Maybe.Maybe AS.Types.ASCell]
                           conn `cast` (Database.Redis.Core.NTCo:Connection[0])
                           (\ r1 :: Database.Redis.ProtocolPipelining.Connection
                                        Database.Redis.Protocol.Reply
                              s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                            case ((AS.DB.Util.getSheetLocsRedis sheetid)
                                    `cast`
                                  (Trans
                                       (Database.Redis.Core.NTCo:Redis[0] <[Data.ByteString.Internal.ByteString]>_N)
                                       (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                            <Database.Redis.ProtocolPipelining.Connection
                                                 Database.Redis.Protocol.Reply>_R
                                            <GHC.Types.IO>_R
                                            <[Data.ByteString.Internal.ByteString]>_N))
                                    r1)
                                   `cast`
                                 (GHC.Types.NTCo:IO[0] <[Data.ByteString.Internal.ByteString]>_R)
                                   s of ds1 { (#,#) ipv ipv1 ->
                            case AS.Util.printTimed1
                                   AS.DB.API.getCell9
                                   ipv of ds2 { (#,#) ipv2 ipv3 ->
                            case GHC.Base.map
                                   @ Data.ByteString.Internal.ByteString
                                   @ GHC.Types.Int
                                   AS.DB.Util.keyToRow
                                   ipv1 of wild1 {
                              []
                              -> case Data.List.minimum1
                                 ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           [Data.Maybe.Maybe AS.Types.ASCell] #)
                                 of {}
                              : ipv4 ipv5
                              -> case ipv4 of ww { GHC.Types.I# ww1 ->
                                 case AS.DB.API.$wlgo1 ww1 ipv5 of ww2 { DEFAULT ->
                                 case AS.DB.API.$wlgo ww1 ipv5 of ww3 { DEFAULT ->
                                 case GHC.Prim.tagToEnum#
                                        @ GHC.Types.Bool
                                        (GHC.Prim.># ww2 ww3) of wild2 {
                                   GHC.Types.False
                                   -> let {
                                        firstRowKey :: Data.ByteString.Internal.ByteString
                                        = AS.Util.minBy
                                            @ Data.ByteString.Internal.ByteString
                                            @ GHC.Types.Int
                                            GHC.Classes.$fOrdInt
                                            AS.DB.Util.keyToRow
                                            ipv1
                                      } in
                                      letrec {
                                        go :: GHC.Prim.Int#
                                              -> Database.Redis.Core.Redis
                                                     [Data.Maybe.Maybe AS.Types.ASCell]
                                          {- Arity: 1, Strictness: <L,U> -}
                                        = \ x :: GHC.Prim.Int# ->
                                          let {
                                            m1 :: Database.Redis.Core.Redis
                                                      (Data.Maybe.Maybe AS.Types.ASCell)
                                            = AS.DB.Util.getCellByKeyRedis
                                                (AS.DB.Util.$wincrementLocKey
                                                   AS.DB.API.getCell8
                                                   (GHC.Types.I# x)
                                                   firstRowKey)
                                          } in
                                          let {
                                            ys :: Database.Redis.Core.Redis
                                                      [Data.Maybe.Maybe AS.Types.ASCell]
                                            = case GHC.Prim.tagToEnum#
                                                     @ GHC.Types.Bool
                                                     (GHC.Prim.==# x ww3) of wild3 {
                                                GHC.Types.False -> go (GHC.Prim.+# x 1)
                                                GHC.Types.True
                                                -> AS.DB.API.getCell7
                                                     `cast`
                                                   (Trans
                                                        (<Database.Redis.ProtocolPipelining.Connection
                                                              Database.Redis.Protocol.Reply>_R
                                                         ->_R Sym (GHC.Types.NTCo:IO[0]
                                                                       <[Data.Maybe.Maybe
                                                                             AS.Types.ASCell]>_R))
                                                        (Trans
                                                             (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                                       <Database.Redis.ProtocolPipelining.Connection
                                                                            Database.Redis.Protocol.Reply>_R
                                                                       <GHC.Types.IO>_R
                                                                       <[Data.Maybe.Maybe
                                                                             AS.Types.ASCell]>_N))
                                                             (Sym (Database.Redis.Core.NTCo:Redis[0]) <[Data.Maybe.Maybe
                                                                                                            AS.Types.ASCell]>_N))) }
                                          } in
                                          (\ eta1 :: Database.Redis.ProtocolPipelining.Connection
                                                         Database.Redis.Protocol.Reply
                                             eta2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                           case (m1
                                                   `cast`
                                                 (Trans
                                                      (Database.Redis.Core.NTCo:Redis[0] <Data.Maybe.Maybe
                                                                                              AS.Types.ASCell>_N)
                                                      (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                           <Database.Redis.ProtocolPipelining.Connection
                                                                Database.Redis.Protocol.Reply>_R
                                                           <GHC.Types.IO>_R
                                                           <Data.Maybe.Maybe AS.Types.ASCell>_N))
                                                   eta1)
                                                  `cast`
                                                (GHC.Types.NTCo:IO[0]
                                                     <Data.Maybe.Maybe AS.Types.ASCell>_R)
                                                  eta2 of ds3 { (#,#) ipv6 ipv7 ->
                                           case (ys
                                                   `cast`
                                                 (Trans
                                                      (Database.Redis.Core.NTCo:Redis[0] <[Data.Maybe.Maybe
                                                                                               AS.Types.ASCell]>_N)
                                                      (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                           <Database.Redis.ProtocolPipelining.Connection
                                                                Database.Redis.Protocol.Reply>_R
                                                           <GHC.Types.IO>_R
                                                           <[Data.Maybe.Maybe AS.Types.ASCell]>_N))
                                                   eta1)
                                                  `cast`
                                                (GHC.Types.NTCo:IO[0]
                                                     <[Data.Maybe.Maybe AS.Types.ASCell]>_R)
                                                  ipv6 of ds4 { (#,#) ipv8 ipv9 ->
                                           (# ipv8,
                                              GHC.Types.:
                                                @ (Data.Maybe.Maybe AS.Types.ASCell)
                                                ipv7
                                                ipv9 #) } })
                                            `cast`
                                          (Trans
                                               (<Database.Redis.ProtocolPipelining.Connection
                                                     Database.Redis.Protocol.Reply>_R
                                                ->_R Sym (GHC.Types.NTCo:IO[0]
                                                              <[Data.Maybe.Maybe
                                                                    AS.Types.ASCell]>_R))
                                               (Trans
                                                    (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                              <Database.Redis.ProtocolPipelining.Connection
                                                                   Database.Redis.Protocol.Reply>_R
                                                              <GHC.Types.IO>_R
                                                              <[Data.Maybe.Maybe
                                                                    AS.Types.ASCell]>_N))
                                                    (Sym (Database.Redis.Core.NTCo:Redis[0]) <[Data.Maybe.Maybe
                                                                                                   AS.Types.ASCell]>_N)))
                                      } in
                                      case ((go ww2)
                                              `cast`
                                            (Trans
                                                 (Database.Redis.Core.NTCo:Redis[0] <[Data.Maybe.Maybe
                                                                                          AS.Types.ASCell]>_N)
                                                 (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                      <Database.Redis.ProtocolPipelining.Connection
                                                           Database.Redis.Protocol.Reply>_R
                                                      <GHC.Types.IO>_R
                                                      <[Data.Maybe.Maybe AS.Types.ASCell]>_N))
                                              r1)
                                             `cast`
                                           (GHC.Types.NTCo:IO[0]
                                                <[Data.Maybe.Maybe AS.Types.ASCell]>_R)
                                             ipv2 of ds3 { (#,#) ipv6 ipv7 ->
                                      case AS.Util.printTimed1
                                             AS.DB.API.getCell3
                                             ipv6 of ds4 { (#,#) ipv8 ipv9 ->
                                      (# ipv8, ipv7 #) } }
                                   GHC.Types.True
                                   -> case AS.Util.printTimed1
                                             AS.DB.API.getCell3
                                             ipv2 of ds3 { (#,#) ipv6 ipv7 ->
                                      (# ipv6,
                                         GHC.Types.[]
                                           @ (Data.Maybe.Maybe AS.Types.ASCell) #) } } } } } } } })
                             `cast`
                           (<Database.Redis.ProtocolPipelining.Connection
                                 Database.Redis.Protocol.Reply>_R
                            ->_R Sym (GHC.Types.NTCo:IO[0]
                                          <[Data.Maybe.Maybe AS.Types.ASCell]>_R)))
                          `cast`
                        (GHC.Types.NTCo:IO[0] <[Data.Maybe.Maybe AS.Types.ASCell]>_R)
                          eta }) -}
d9b0aeaf90fe697b4a6555d1af7bdc65
  getCell7 :: Database.Redis.ProtocolPipelining.Connection
                  Database.Redis.Protocol.Reply
              -> GHC.Prim.State# GHC.Prim.RealWorld
              -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                    [Data.Maybe.Maybe AS.Types.ASCell] #)
    {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,U>,
       Unfolding: InlineRule (2, True, True)
                  (\ eta1 :: Database.Redis.ProtocolPipelining.Connection
                                 Database.Redis.Protocol.Reply
                     eta2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   (# eta2, GHC.Types.[] @ (Data.Maybe.Maybe AS.Types.ASCell) #)) -}
6025fb5a809d287ae325213effeb03e3
  getCell8 :: GHC.Types.Int
    {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1) -}
1b253389d101579673df731cfbaddc29
  getCell9 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "redis got column"#) -}
d0bcec89b0e1975a6a4f82381255cb02
  getCell_go :: [Data.ByteString.Internal.ByteString]
                -> Database.Redis.Core.Redis [Data.Maybe.Maybe AS.Types.ASCell]
    {- Arity: 1, Strictness: <S,1*U> -}
536bbebe2be0bc7089ff0f552b3b21fb
  getCell_go1 :: [AS.Types.ASLocation]
                 -> [Data.ByteString.Internal.ByteString]
    {- Arity: 1, Strictness: <S,1*U> -}
0a266d94dad1ae04898be080de6ae46a
  getCell_go2 :: [[Data.Maybe.Maybe AS.Types.ASCell]]
                 -> [Data.Maybe.Maybe AS.Types.ASCell]
    {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
d90192bcedf26c1010f64a7bb030e60d
  getCells :: Database.Redis.Core.Connection
              -> [AS.Types.ASLocation]
              -> GHC.Types.IO [Data.Maybe.Maybe AS.Types.ASCell]
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><S,1*U><L,U>,
       Unfolding: (AS.DB.API.getCell2
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R <[AS.Types.ASLocation]>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0]
                                  <[Data.Maybe.Maybe AS.Types.ASCell]>_R))) -}
87d2c941750ee82f900b2a621c7dcb0b
  getCellsByKeys :: Database.Redis.Core.Connection
                    -> [Data.ByteString.Internal.ByteString]
                    -> GHC.Types.IO [Data.Maybe.Maybe AS.Types.ASCell]
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><S,1*U><L,U>,
       Unfolding: (AS.DB.API.getCellsByKeys1
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R <[Data.ByteString.Internal.ByteString]>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0]
                                  <[Data.Maybe.Maybe AS.Types.ASCell]>_R))) -}
ee16e576bd880937f4d0a2f2438e41d5
  getCellsByKeys1 :: Database.Redis.Core.Connection
                     -> [Data.ByteString.Internal.ByteString]
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                           [Data.Maybe.Maybe AS.Types.ASCell] #)
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><S,1*U><L,U>,
       Unfolding: (\ ds :: Database.Redis.Core.Connection
                     ds1 :: [Data.ByteString.Internal.ByteString]
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ds1 of wild {
                     [] -> (# eta, GHC.Types.[] @ (Data.Maybe.Maybe AS.Types.ASCell) #)
                     : ipv ipv1
                     -> case AS.Util.printTimed1
                               AS.DB.API.getCell5
                               eta of ds2 { (#,#) ipv2 ipv3 ->
                        (Data.Pool.withResource_$swithResource
                           @ (Database.Redis.ProtocolPipelining.Connection
                                  Database.Redis.Protocol.Reply)
                           @ [Data.Maybe.Maybe AS.Types.ASCell]
                           ds `cast` (Database.Redis.Core.NTCo:Connection[0])
                           (\ eta1 :: Database.Redis.ProtocolPipelining.Connection
                                          Database.Redis.Protocol.Reply
                              eta2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                            case AS.Util.printTimed1
                                   AS.DB.API.getCell4
                                   eta2 of ds3 { (#,#) ipv4 ipv5 ->
                            case ((AS.DB.API.getCell_go wild)
                                    `cast`
                                  (Trans
                                       (Database.Redis.Core.NTCo:Redis[0] <[Data.Maybe.Maybe
                                                                                AS.Types.ASCell]>_N)
                                       (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                            <Database.Redis.ProtocolPipelining.Connection
                                                 Database.Redis.Protocol.Reply>_R
                                            <GHC.Types.IO>_R
                                            <[Data.Maybe.Maybe AS.Types.ASCell]>_N))
                                    eta1)
                                   `cast`
                                 (GHC.Types.NTCo:IO[0] <[Data.Maybe.Maybe AS.Types.ASCell]>_R)
                                   ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                            case AS.Util.printTimed1
                                   AS.DB.API.getCell3
                                   ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                            (# ipv8, ipv7 #) } } })
                             `cast`
                           (<Database.Redis.ProtocolPipelining.Connection
                                 Database.Redis.Protocol.Reply>_R
                            ->_R Sym (GHC.Types.NTCo:IO[0]
                                          <[Data.Maybe.Maybe AS.Types.ASCell]>_R)))
                          `cast`
                        (GHC.Types.NTCo:IO[0] <[Data.Maybe.Maybe AS.Types.ASCell]>_R)
                          ipv2 } }) -}
6cfffbbca3de130538eb987bcc0bd080
  getColumnCells :: Database.Redis.Core.Connection
                    -> AS.Types.ASLocation
                    -> GHC.Types.IO [Data.Maybe.Maybe AS.Types.ASCell]
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><S,1*U><L,U>,
       Unfolding: (AS.DB.API.getCell6
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R <AS.Types.ASLocation>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0]
                                  <[Data.Maybe.Maybe AS.Types.ASCell]>_R))) -}
a1e8009067c952532c2349973bcbfbe5
  getDAG :: Database.Redis.Core.Connection
            -> GHC.Types.IO [(AS.Types.ASLocation, AS.Types.ASLocation)]
    {- Arity: 2,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U>,
       Unfolding: (AS.DB.API.getDAG1
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0]
                                  <[(AS.Types.ASLocation, AS.Types.ASLocation)]>_R))) -}
586632e152a45f47efac8e0789531762
  getDAG1 :: Database.Redis.Core.Connection
             -> GHC.Prim.State# GHC.Prim.RealWorld
             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                   [(AS.Types.ASLocation, AS.Types.ASLocation)] #)
    {- Arity: 2,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U>,
       Unfolding: (\ conn :: Database.Redis.Core.Connection
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   (Data.Pool.withResource_$swithResource
                      @ (Database.Redis.ProtocolPipelining.Connection
                             Database.Redis.Protocol.Reply)
                      @ [(AS.Types.ASLocation, AS.Types.ASLocation)]
                      conn `cast` (Database.Redis.Core.NTCo:Connection[0])
                      AS.DB.API.getDAG2
                        `cast`
                      (<Database.Redis.ProtocolPipelining.Connection
                            Database.Redis.Protocol.Reply>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <[(AS.Types.ASLocation, AS.Types.ASLocation)]>_R)))
                     `cast`
                   (GHC.Types.NTCo:IO[0]
                        <[(AS.Types.ASLocation, AS.Types.ASLocation)]>_R)
                     eta) -}
dd1513157a12ddb70e8f4b91fd27b5d7
  getDAG2 :: Database.Redis.ProtocolPipelining.Connection
                 Database.Redis.Protocol.Reply
             -> GHC.Prim.State# GHC.Prim.RealWorld
             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                   [(AS.Types.ASLocation, AS.Types.ASLocation)] #)
    {- Arity: 2,
       Strictness: <S,1*U(U,U(U),U(U(U),U(U(U),U(U),U,U),U(U),U),U)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Database.Redis.ProtocolPipelining.Connection
                              Database.Redis.Protocol.Reply
                     w1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w of ww { Database.Redis.ProtocolPipelining.Conn ww1 ww2 ww3 ww4 ->
                   AS.DB.API.$wa4 ww1 ww2 ww3 ww4 w1 }) -}
eb47d58b433013d4691c1b67b349a07b
  getDAG3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "Pattern match failure in do expression at src/AS/DB/API.hs:136:7-24"#) -}
77295560915b570e3739796a7cb98fa4
  getDAG4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "Pattern match failure in do expression at src/AS/DB/API.hs:135:7-14"#) -}
424c096389f7873e5aaa2b6cb9d07d6c
  getDAG5 :: [Data.ByteString.Internal.ByteString]
    {- Unfolding: (GHC.Types.:
                     @ Data.ByteString.Internal.ByteString
                     Database.Redis.Commands.smembers1
                     AS.DB.API.getDAG6) -}
c75b1fe56aaded46f22b4a93b5fbc8b9
  getDAG6 :: [Data.ByteString.Internal.ByteString]
    {- Unfolding: (GHC.Types.:
                     @ Data.ByteString.Internal.ByteString
                     AS.DB.API.getDAG7
                     (GHC.Types.[] @ Data.ByteString.Internal.ByteString)) -}
07d1e445f5a14694fce3a919a1e9cfb1
  getDAG7 :: Data.ByteString.Internal.ByteString
    {- Unfolding: (case GHC.Prim.newMutVar#
                          @ GHC.ForeignPtr.Finalizers
                          @ GHC.Prim.RealWorld
                          GHC.ForeignPtr.NoFinalizers
                          GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                   let {
                     addr# :: GHC.Prim.Addr# = "DAGLocSet"#
                   } in
                   case {__pkg_ccall bytestring-0.10.4.0 strlen GHC.Prim.Addr#
                                                                -> GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                -> (# GHC.Prim.State#
                                                                          GHC.Prim.RealWorld,
                                                                      GHC.Prim.Word# #)}
                          addr#
                          ipv of wild { (#,#) ds3 ds4 ->
                   Data.ByteString.Internal.PS
                     addr#
                     (GHC.ForeignPtr.PlainForeignPtr ipv1)
                     0
                     (GHC.Prim.word2Int# ds4) } }) -}
a139940649f53d5d68946b773abd092f
  getDAG_go :: [[Data.ByteString.Internal.ByteString]]
               -> [Data.ByteString.Internal.ByteString]
               -> [(AS.Types.ASLocation, AS.Types.ASLocation)]
    {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
50d1db1a398dda938bb796cf19005c16
  getDAG_go1 :: [Data.ByteString.Internal.ByteString]
                -> Database.Redis.Transactions.RedisTx
                       [Database.Redis.Transactions.Queued
                            [Data.ByteString.Internal.ByteString]]
    {- Arity: 1, Strictness: <S,1*U> -}
23570302713abbb6e5051489e6aead95
  getDAG_lvl9 :: Data.ByteString.Internal.ByteString
    {- Unfolding: (Database.Redis.Protocol.renderRequest
                     AS.DB.API.getDAG5) -}
6aa14b39c74b71fc7f80f753fefb2b25
  getSheet :: Database.Redis.Core.Connection
              -> AS.Types.ASSheetId
              -> GHC.Types.IO (Data.Maybe.Maybe AS.Types.ASSheet)
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,1*U(U,U,U)><L,U>,
       Unfolding: (AS.DB.API.getSheet1
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R <AS.Types.ASSheetId>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0]
                                  <Data.Maybe.Maybe AS.Types.ASSheet>_R))) -}
b55e4cb4e91eb61198d5021cedf4770e
  getSheet1 :: Database.Redis.Core.Connection
               -> AS.Types.ASSheetId
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     Data.Maybe.Maybe AS.Types.ASSheet #)
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,1*U(U,U,U)><L,U>,
       Unfolding: (\ conn :: Database.Redis.Core.Connection
                     sid :: AS.Types.ASSheetId
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   (Data.Pool.withResource_$swithResource
                      @ (Database.Redis.ProtocolPipelining.Connection
                             Database.Redis.Protocol.Reply)
                      @ (Data.Maybe.Maybe AS.Types.ASSheet)
                      conn `cast` (Database.Redis.Core.NTCo:Connection[0])
                      (\ r1 :: Database.Redis.ProtocolPipelining.Connection
                                   Database.Redis.Protocol.Reply
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case r1 of ww { Database.Redis.ProtocolPipelining.Conn ww1 ww2 ww3 ww4 ->
                       case Database.Redis.Protocol.renderRequest
                              (GHC.Types.:
                                 @ Data.ByteString.Internal.ByteString
                                 Database.Redis.Commands.get1
                                 (GHC.Types.:
                                    @ Data.ByteString.Internal.ByteString
                                    (AS.DB.Util.getSheetKey sid)
                                    (GHC.Types.[]
                                       @ Data.ByteString.Internal.ByteString))) of ww5 { Data.ByteString.Internal.PS ww6 ww7 ww8 ww9 ->
                       case Database.Redis.ProtocolPipelining.$wa2
                              @ Database.Redis.Protocol.Reply
                              ww1
                              ww2
                              ww3
                              ww6
                              ww7
                              ww8
                              ww9
                              s of ds1 { (#,#) ipv ipv1 ->
                       case ipv1 of wild {
                         DEFAULT -> (# ipv, Data.Maybe.Nothing @ AS.Types.ASSheet #)
                         Database.Redis.Protocol.SingleLine s1
                         -> (# ipv,
                               AS.DB.Util.bStrToSheet
                                 (Data.Maybe.Just @ Data.ByteString.Internal.ByteString s1) #)
                         Database.Redis.Protocol.Bulk ds2
                         -> case ds2 of wild1 {
                              Data.Maybe.Nothing -> (# ipv, AS.DB.API.canAccess2 #)
                              Data.Maybe.Just ipv2 -> (# ipv, AS.DB.Util.bStrToSheet wild1 #) }
                         Database.Redis.Protocol.MultiBulk ds2
                         -> case ds2 of wild1 {
                              Data.Maybe.Nothing -> (# ipv, AS.DB.API.canAccess2 #)
                              Data.Maybe.Just ipv2
                              -> (# ipv, Data.Maybe.Nothing @ AS.Types.ASSheet #) } } } } })
                        `cast`
                      (<Database.Redis.ProtocolPipelining.Connection
                            Database.Redis.Protocol.Reply>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <Data.Maybe.Maybe AS.Types.ASSheet>_R)))
                     `cast`
                   (GHC.Types.NTCo:IO[0] <Data.Maybe.Maybe AS.Types.ASSheet>_R)
                     eta) -}
a2b7f84661534c0d8e45205d2cda6340
  getUniqueWbName :: Database.Redis.Core.Connection
                     -> GHC.Types.IO GHC.Base.String
    {- Arity: 2,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U>,
       Unfolding: (AS.DB.API.getUniqueWbName1
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
3799ec94b62a9b0bc0097dc386ac6a85
  getUniqueWbName1 :: Database.Redis.Core.Connection
                      -> GHC.Prim.State# GHC.Prim.RealWorld
                      -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 2,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U>,
       Unfolding: (\ conn :: Database.Redis.Core.Connection
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case (Data.Pool.withResource_$swithResource
                           @ (Database.Redis.ProtocolPipelining.Connection
                                  Database.Redis.Protocol.Reply)
                           @ [AS.Types.ASWorkbook]
                           conn `cast` (Database.Redis.Core.NTCo:Connection[0])
                           AS.DB.API.createWorkbook4
                             `cast`
                           (<Database.Redis.ProtocolPipelining.Connection
                                 Database.Redis.Protocol.Reply>_R
                            ->_R Sym (GHC.Types.NTCo:IO[0] <[AS.Types.ASWorkbook]>_R)))
                          `cast`
                        (GHC.Types.NTCo:IO[0] <[AS.Types.ASWorkbook]>_R)
                          s of ds1 { (#,#) ipv ipv1 ->
                   (# ipv,
                      AS.DB.Util.getUniquePrefixedName
                        AS.DB.API.createWorkbook3
                        (GHC.Base.map
                           @ AS.Types.ASWorkbook
                           @ [GHC.Types.Char]
                           AS.Types.workbookName
                           ipv1) #) }) -}
0202c2d961997932ff3c10b303476c26
  getVolatileLocs :: Database.Redis.Core.Connection
                     -> GHC.Types.IO [AS.Types.ASLocation]
    {- Arity: 2,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U>,
       Unfolding: (AS.DB.API.getVolatileLocs1
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <[AS.Types.ASLocation]>_R))) -}
cfb27d78cf56210de2dd0bbacf7a6172
  getVolatileLocs1 :: Database.Redis.Core.Connection
                      -> GHC.Prim.State# GHC.Prim.RealWorld
                      -> (# GHC.Prim.State# GHC.Prim.RealWorld, [AS.Types.ASLocation] #)
    {- Arity: 2,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U>,
       Unfolding: (\ conn :: Database.Redis.Core.Connection
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   (Data.Pool.withResource_$swithResource
                      @ (Database.Redis.ProtocolPipelining.Connection
                             Database.Redis.Protocol.Reply)
                      @ [AS.Types.ASLocation]
                      conn `cast` (Database.Redis.Core.NTCo:Connection[0])
                      AS.DB.API.getVolatileLocs2
                        `cast`
                      (<Database.Redis.ProtocolPipelining.Connection
                            Database.Redis.Protocol.Reply>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <[AS.Types.ASLocation]>_R)))
                     `cast`
                   (GHC.Types.NTCo:IO[0] <[AS.Types.ASLocation]>_R)
                     eta) -}
373e9fef6215a99ea8b6bf51e8fbf204
  getVolatileLocs2 :: Database.Redis.ProtocolPipelining.Connection
                          Database.Redis.Protocol.Reply
                      -> GHC.Prim.State# GHC.Prim.RealWorld
                      -> (# GHC.Prim.State# GHC.Prim.RealWorld, [AS.Types.ASLocation] #)
    {- Arity: 2,
       Strictness: <S,1*U(U,1*U(U),1*U(U(U),U(U(U),U(U),A,U),U(U),A),A)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Database.Redis.ProtocolPipelining.Connection
                              Database.Redis.Protocol.Reply
                     w1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w of ww { Database.Redis.ProtocolPipelining.Conn ww1 ww2 ww3 ww4 ->
                   AS.DB.API.$wa5 ww1 ww2 ww3 w1 }) -}
b4f1d339c13b9edef8339f19ed106c6d
  getVolatileLocs3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "Pattern match failure in do expression at src/AS/DB/API.hs:383:7-14"#) -}
ac78b645af6deddb6470c00a33309b45
  getVolatileLocs4 :: [Data.ByteString.Internal.ByteString]
    {- Unfolding: (GHC.Types.:
                     @ Data.ByteString.Internal.ByteString
                     Database.Redis.Commands.smembers1
                     AS.DB.API.getVolatileLocs5) -}
923155088f11b4f7a4ecbce3bf52a368
  getVolatileLocs5 :: [Data.ByteString.Internal.ByteString]
    {- Unfolding: (GHC.Types.:
                     @ Data.ByteString.Internal.ByteString
                     AS.DB.API.getVolatileLocs6
                     (GHC.Types.[] @ Data.ByteString.Internal.ByteString)) -}
cb9b7d7f80dc9559f6f0a5dea9210317
  getVolatileLocs6 :: Data.ByteString.Internal.ByteString
    {- Unfolding: (case GHC.Prim.newMutVar#
                          @ GHC.ForeignPtr.Finalizers
                          @ GHC.Prim.RealWorld
                          GHC.ForeignPtr.NoFinalizers
                          GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                   let {
                     addr# :: GHC.Prim.Addr# = "volatileLocs"#
                   } in
                   case {__pkg_ccall bytestring-0.10.4.0 strlen GHC.Prim.Addr#
                                                                -> GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                -> (# GHC.Prim.State#
                                                                          GHC.Prim.RealWorld,
                                                                      GHC.Prim.Word# #)}
                          addr#
                          ipv of wild { (#,#) ds3 ds4 ->
                   Data.ByteString.Internal.PS
                     addr#
                     (GHC.ForeignPtr.PlainForeignPtr ipv1)
                     0
                     (GHC.Prim.word2Int# ds4) } }) -}
75775d0778024575f6f953634e00f88b
  getVolatileLocs_lvl9 :: Data.ByteString.Internal.ByteString
    {- Unfolding: (Database.Redis.Protocol.renderRequest
                     AS.DB.API.getVolatileLocs4) -}
2509e8d7397cc37cef152c4b643005ec
  getWorkbook :: Database.Redis.Core.Connection
                 -> GHC.Base.String
                 -> GHC.Types.IO (Data.Maybe.Maybe AS.Types.ASWorkbook)
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U><L,U>,
       Unfolding: (AS.DB.API.getWorkbook1
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R <GHC.Base.String>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0]
                                  <Data.Maybe.Maybe AS.Types.ASWorkbook>_R))) -}
48d3ee3764420584df3e58697f0ed539
  getWorkbook1 :: Database.Redis.Core.Connection
                  -> GHC.Base.String
                  -> GHC.Prim.State# GHC.Prim.RealWorld
                  -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                        Data.Maybe.Maybe AS.Types.ASWorkbook #)
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U><L,U>,
       Unfolding: (\ conn :: Database.Redis.Core.Connection
                     name :: GHC.Base.String
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   (Data.Pool.withResource_$swithResource
                      @ (Database.Redis.ProtocolPipelining.Connection
                             Database.Redis.Protocol.Reply)
                      @ (Data.Maybe.Maybe AS.Types.ASWorkbook)
                      conn `cast` (Database.Redis.Core.NTCo:Connection[0])
                      (\ r1 :: Database.Redis.ProtocolPipelining.Connection
                                   Database.Redis.Protocol.Reply
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case r1 of ww { Database.Redis.ProtocolPipelining.Conn ww1 ww2 ww3 ww4 ->
                       case Database.Redis.Protocol.renderRequest
                              (GHC.Types.:
                                 @ Data.ByteString.Internal.ByteString
                                 Database.Redis.Commands.get1
                                 (GHC.Types.:
                                    @ Data.ByteString.Internal.ByteString
                                    (Data.ByteString.Internal.packChars name)
                                    (GHC.Types.[]
                                       @ Data.ByteString.Internal.ByteString))) of ww5 { Data.ByteString.Internal.PS ww6 ww7 ww8 ww9 ->
                       case Database.Redis.ProtocolPipelining.$wa2
                              @ Database.Redis.Protocol.Reply
                              ww1
                              ww2
                              ww3
                              ww6
                              ww7
                              ww8
                              ww9
                              s of ds1 { (#,#) ipv ipv1 ->
                       case ipv1 of wild {
                         DEFAULT -> (# ipv, Data.Maybe.Nothing @ AS.Types.ASWorkbook #)
                         Database.Redis.Protocol.SingleLine s1
                         -> (# ipv,
                               AS.DB.Util.bStrToWorkbook
                                 (Data.Maybe.Just @ Data.ByteString.Internal.ByteString s1) #)
                         Database.Redis.Protocol.Bulk ds2
                         -> case ds2 of wild1 {
                              Data.Maybe.Nothing -> (# ipv, AS.DB.API.getWorkbook2 #)
                              Data.Maybe.Just ipv2
                              -> (# ipv, AS.DB.Util.bStrToWorkbook wild1 #) }
                         Database.Redis.Protocol.MultiBulk ds2
                         -> case ds2 of wild1 {
                              Data.Maybe.Nothing -> (# ipv, AS.DB.API.getWorkbook2 #)
                              Data.Maybe.Just ipv2
                              -> (# ipv, Data.Maybe.Nothing @ AS.Types.ASWorkbook #) } } } } })
                        `cast`
                      (<Database.Redis.ProtocolPipelining.Connection
                            Database.Redis.Protocol.Reply>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <Data.Maybe.Maybe AS.Types.ASWorkbook>_R)))
                     `cast`
                   (GHC.Types.NTCo:IO[0] <Data.Maybe.Maybe AS.Types.ASWorkbook>_R)
                     eta) -}
f02c7b4bbb79223ad517843107edafb9
  getWorkbook2 :: Data.Maybe.Maybe AS.Types.ASWorkbook
    {- Unfolding: (AS.DB.Util.bStrToWorkbook
                     (Data.Maybe.Nothing @ Data.ByteString.Internal.ByteString)) -}
ca0e335b69f8361f2d1f6271e929fc30
  isPermissibleMessage :: Database.Redis.Core.Connection
                          -> AS.Types.ASMessage
                          -> GHC.Types.IO GHC.Types.Bool
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><S(LLLS),1*U(U(U,U,U),A,A,1*U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.DB.API.isPermissibleMessage1
                    `cast`
                  (<Database.Redis.Core.Connection>_R
                   ->_R <AS.Types.ASMessage>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Types.Bool>_R)) -}
466c504691ec553f16287d20aca984cd
  isPermissibleMessage1 :: Database.Redis.Core.Connection
                           -> AS.Types.ASMessage
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><S(LLLS),1*U(U(U,U,U),A,A,1*U)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ w :: Database.Redis.Core.Connection
                     w1 :: AS.Types.ASMessage
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w1 of ww { AS.Types.Message ww1 ww2 ww3 ww4 ->
                   AS.DB.API.$wa6 w ww1 ww4 w2 }) -}
989cc6b94455e10e64478e8278d90193
  locationsExist :: Database.Redis.Core.Connection
                    -> [AS.Types.ASLocation]
                    -> GHC.Types.IO [GHC.Types.Bool]
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,1*U><L,U>,
       Unfolding: (AS.DB.API.locationsExist1
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R <[AS.Types.ASLocation]>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <[GHC.Types.Bool]>_R))) -}
2060d96de1fa85b630a82c8ec2f55215
  locationsExist1 :: Database.Redis.Core.Connection
                     -> [AS.Types.ASLocation]
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Bool] #)
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,1*U><L,U>,
       Unfolding: (\ conn :: Database.Redis.Core.Connection
                     locs :: [AS.Types.ASLocation]
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   (Data.Pool.withResource_$swithResource
                      @ (Database.Redis.ProtocolPipelining.Connection
                             Database.Redis.Protocol.Reply)
                      @ [GHC.Types.Bool]
                      conn `cast` (Database.Redis.Core.NTCo:Connection[0])
                      (\ r1 :: Database.Redis.ProtocolPipelining.Connection
                                   Database.Redis.Protocol.Reply
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case Database.Redis.Transactions.multiExec1
                              @ [GHC.Types.Bool]
                              (\ eta1 :: GHC.Types.Int
                                 r2 :: Database.Redis.ProtocolPipelining.Connection
                                           Database.Redis.Protocol.Reply
                                 s1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                               case (((AS.DB.API.locationsExist_go locs)
                                        `cast`
                                      (Trans
                                           (Database.Redis.Transactions.NTCo:RedisTx[0] <[Database.Redis.Transactions.Queued
                                                                                              GHC.Types.Bool]>_N)
                                           (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                                <GHC.Types.Int>_N
                                                <Database.Redis.Core.Redis>_R
                                                <[Database.Redis.Transactions.Queued
                                                      GHC.Types.Bool]>_N))
                                        eta1)
                                       `cast`
                                     (Trans
                                          (Database.Redis.Core.NTCo:Redis[0] <([Database.Redis.Transactions.Queued
                                                                                    GHC.Types.Bool],
                                                                               GHC.Types.Int)>_N)
                                          (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                               <Database.Redis.ProtocolPipelining.Connection
                                                    Database.Redis.Protocol.Reply>_R
                                               <GHC.Types.IO>_R
                                               <([Database.Redis.Transactions.Queued
                                                      GHC.Types.Bool],
                                                 GHC.Types.Int)>_N))
                                       r2)
                                      `cast`
                                    (GHC.Types.NTCo:IO[0]
                                         <([Database.Redis.Transactions.Queued GHC.Types.Bool],
                                           GHC.Types.Int)>_R)
                                      s1 of ds1 { (#,#) ipv ipv1 ->
                               case ipv1 of wild { (,) a6 s' ->
                               (# ipv,
                                  (case AS.DB.API.$wgo2 a6 of ww { (##) ww1 ->
                                   Database.Redis.Transactions.Queued @ [GHC.Types.Bool] ww1 },
                                   s') #) } })
                                `cast`
                              (Trans
                                   (<GHC.Types.Int>_R
                                    ->_R Trans
                                             (<Database.Redis.ProtocolPipelining.Connection
                                                   Database.Redis.Protocol.Reply>_R
                                              ->_R Sym (GHC.Types.NTCo:IO[0]
                                                            <(Database.Redis.Transactions.Queued
                                                                  [GHC.Types.Bool],
                                                              GHC.Types.Int)>_R))
                                             (Trans
                                                  (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                            <Database.Redis.ProtocolPipelining.Connection
                                                                 Database.Redis.Protocol.Reply>_R
                                                            <GHC.Types.IO>_R
                                                            <(Database.Redis.Transactions.Queued
                                                                  [GHC.Types.Bool],
                                                              GHC.Types.Int)>_N))
                                                  (Sym (Database.Redis.Core.NTCo:Redis[0]) <(Database.Redis.Transactions.Queued
                                                                                                 [GHC.Types.Bool],
                                                                                             GHC.Types.Int)>_N)))
                                   (Trans
                                        (Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                                  <GHC.Types.Int>_N
                                                  <Database.Redis.Core.Redis>_R
                                                  <Database.Redis.Transactions.Queued
                                                       [GHC.Types.Bool]>_N))
                                        (Sym (Database.Redis.Transactions.NTCo:RedisTx[0]) <Database.Redis.Transactions.Queued
                                                                                                [GHC.Types.Bool]>_N)))
                              r1
                              s of ds1 { (#,#) ipv ipv1 ->
                       case ipv1 of wild {
                         DEFAULT
                         -> (GHC.IO.failIO @ [GHC.Types.Bool] AS.DB.API.locationsExist2)
                              `cast`
                            (GHC.Types.NTCo:IO[0] <[GHC.Types.Bool]>_R)
                              ipv
                         Database.Redis.Transactions.TxSuccess results
                         -> (# ipv, results #) } })
                        `cast`
                      (<Database.Redis.ProtocolPipelining.Connection
                            Database.Redis.Protocol.Reply>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <[GHC.Types.Bool]>_R)))
                     `cast`
                   (GHC.Types.NTCo:IO[0] <[GHC.Types.Bool]>_R)
                     eta) -}
d2561fae5c461664a8b73b8b5e7de3f2
  locationsExist2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "Pattern match failure in do expression at src/AS/DB/API.hs:112:5-21"#) -}
3ed577b108bdcac183f78ce59e50e6ab
  locationsExist_go :: [AS.Types.ASLocation]
                       -> Database.Redis.Transactions.RedisTx
                              [Database.Redis.Transactions.Queued GHC.Types.Bool]
    {- Arity: 1, Strictness: <S,1*U> -}
1fb730fd0202888620c9331af9a6cc07
  modifyWorkbookSheets :: Database.Redis.Core.Connection
                          -> ([AS.Types.ASSheetId] -> [AS.Types.ASSheetId])
                          -> GHC.Base.String
                          -> GHC.Types.IO ()
    {- Arity: 4,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,1*C1(U)><L,U><L,U>,
       Unfolding: (AS.DB.API.modifyWorkbookSheets1
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R <[AS.Types.ASSheetId] -> [AS.Types.ASSheetId]>_R
                    ->_R <GHC.Base.String>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
aa122559a6539aa5153f012ee85a6b57
  modifyWorkbookSheets1 :: Database.Redis.Core.Connection
                           -> ([AS.Types.ASSheetId] -> [AS.Types.ASSheetId])
                           -> GHC.Base.String
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,1*C1(U)><L,U><L,U>,
       Unfolding: (\ conn :: Database.Redis.Core.Connection
                     f :: [AS.Types.ASSheetId] -> [AS.Types.ASSheetId]
                     wName :: GHC.Base.String
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case (Data.Pool.withResource_$swithResource
                           @ (Database.Redis.ProtocolPipelining.Connection
                                  Database.Redis.Protocol.Reply)
                           @ (Data.Maybe.Maybe AS.Types.ASWorkbook)
                           conn `cast` (Database.Redis.Core.NTCo:Connection[0])
                           (\ r1 :: Database.Redis.ProtocolPipelining.Connection
                                        Database.Redis.Protocol.Reply
                              s1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                            case r1 of ww { Database.Redis.ProtocolPipelining.Conn ww1 ww2 ww3 ww4 ->
                            case Database.Redis.Protocol.renderRequest
                                   (GHC.Types.:
                                      @ Data.ByteString.Internal.ByteString
                                      Database.Redis.Commands.get1
                                      (GHC.Types.:
                                         @ Data.ByteString.Internal.ByteString
                                         (Data.ByteString.Internal.packChars wName)
                                         (GHC.Types.[]
                                            @ Data.ByteString.Internal.ByteString))) of ww5 { Data.ByteString.Internal.PS ww6 ww7 ww8 ww9 ->
                            case Database.Redis.ProtocolPipelining.$wa2
                                   @ Database.Redis.Protocol.Reply
                                   ww1
                                   ww2
                                   ww3
                                   ww6
                                   ww7
                                   ww8
                                   ww9
                                   s1 of ds1 { (#,#) ipv ipv1 ->
                            case ipv1 of wild {
                              DEFAULT -> (# ipv, Data.Maybe.Nothing @ AS.Types.ASWorkbook #)
                              Database.Redis.Protocol.SingleLine s2
                              -> (# ipv,
                                    AS.DB.Util.bStrToWorkbook
                                      (Data.Maybe.Just @ Data.ByteString.Internal.ByteString s2) #)
                              Database.Redis.Protocol.Bulk ds2
                              -> case ds2 of wild1 {
                                   Data.Maybe.Nothing -> (# ipv, AS.DB.API.getWorkbook2 #)
                                   Data.Maybe.Just ipv2
                                   -> (# ipv, AS.DB.Util.bStrToWorkbook wild1 #) }
                              Database.Redis.Protocol.MultiBulk ds2
                              -> case ds2 of wild1 {
                                   Data.Maybe.Nothing -> (# ipv, AS.DB.API.getWorkbook2 #)
                                   Data.Maybe.Just ipv2
                                   -> (# ipv, Data.Maybe.Nothing @ AS.Types.ASWorkbook #) } } } } })
                             `cast`
                           (<Database.Redis.ProtocolPipelining.Connection
                                 Database.Redis.Protocol.Reply>_R
                            ->_R Sym (GHC.Types.NTCo:IO[0]
                                          <Data.Maybe.Maybe AS.Types.ASWorkbook>_R)))
                          `cast`
                        (GHC.Types.NTCo:IO[0] <Data.Maybe.Maybe AS.Types.ASWorkbook>_R)
                          s of ds1 { (#,#) ipv ipv1 ->
                   case ipv1 of wild {
                     Data.Maybe.Nothing
                     -> (GHC.IO.failIO @ () AS.DB.API.modifyWorkbookSheets2)
                          `cast`
                        (GHC.Types.NTCo:IO[0] <()>_R)
                          ipv
                     Data.Maybe.Just ds
                     -> case ds of wild1 { AS.Types.Workbook wsName sheetIds ->
                        AS.DB.API.createWorkbook2
                          conn
                          (AS.Types.Workbook wsName (f sheetIds))
                          ipv } } }) -}
b6330dffe0227eb0238e603d8ea1d311
  modifyWorkbookSheets2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "Pattern match failure in do expression at src/AS/DB/API.hs:248:3-35"#) -}
f070fb6b814f904fbd917fb6d3731a9b
  pushCommit :: Database.Redis.Core.Connection
                -> AS.Types.ASCommit
                -> GHC.Types.IO ()
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,1*U(1*U(U,U,U),1*U,1*U,1*U(1*U,1*U(U),1*U(U),1*U(U)))><L,U>,
       Unfolding: (AS.DB.API.addCommit2
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R <AS.Types.ASCommit>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
2518f6ff642048aaec04252630aa46d9
  redo :: Database.Redis.Core.Connection
          -> GHC.Types.IO (Data.Maybe.Maybe AS.Types.ASCommit)
    {- Arity: 2,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U>,
       Unfolding: (AS.DB.API.redo1
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0]
                                  <Data.Maybe.Maybe AS.Types.ASCommit>_R))) -}
c8c1546052a0010eea0806dc8ac87645
  redo1 :: Database.Redis.Core.Connection
           -> GHC.Prim.State# GHC.Prim.RealWorld
           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                 Data.Maybe.Maybe AS.Types.ASCommit #)
    {- Arity: 2,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U>,
       Unfolding: (\ conn :: Database.Redis.Core.Connection
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case (Data.Pool.withResource_$swithResource
                           @ (Database.Redis.ProtocolPipelining.Connection
                                  Database.Redis.Protocol.Reply)
                           @ (Data.Maybe.Maybe AS.Types.ASCommit)
                           conn `cast` (Database.Redis.Core.NTCo:Connection[0])
                           AS.DB.API.redo3
                             `cast`
                           (<Database.Redis.ProtocolPipelining.Connection
                                 Database.Redis.Protocol.Reply>_R
                            ->_R Sym (GHC.Types.NTCo:IO[0]
                                          <Data.Maybe.Maybe AS.Types.ASCommit>_R)))
                          `cast`
                        (GHC.Types.NTCo:IO[0] <Data.Maybe.Maybe AS.Types.ASCommit>_R)
                          s of ds1 { (#,#) ipv ipv1 ->
                   case ipv1 of wild {
                     Data.Maybe.Nothing
                     -> (# ipv, Data.Maybe.Nothing @ AS.Types.ASCommit #)
                     Data.Maybe.Just c
                     -> case c of wild1 { AS.Types.ASCommit uid b a6 t ->
                        case b of wild2 {
                          []
                          -> case a6 of wild3 {
                               [] -> ds1
                               : ipv2 ipv3
                               -> case (Data.Pool.withResource_$swithResource
                                          @ (Database.Redis.ProtocolPipelining.Connection
                                                 Database.Redis.Protocol.Reply)
                                          @ ()
                                          conn `cast` (Database.Redis.Core.NTCo:Connection[0])
                                          (\ eta :: Database.Redis.ProtocolPipelining.Connection
                                                        Database.Redis.Protocol.Reply
                                             eta1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                           case ((AS.DB.API.redo_go1 wild3)
                                                   `cast`
                                                 (Trans
                                                      (Database.Redis.Core.NTCo:Redis[0] <()>_N)
                                                      (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                           <Database.Redis.ProtocolPipelining.Connection
                                                                Database.Redis.Protocol.Reply>_R
                                                           <GHC.Types.IO>_R
                                                           <()>_N))
                                                   eta)
                                                  `cast`
                                                (GHC.Types.NTCo:IO[0] <()>_R)
                                                  eta1 of ds2 { (#,#) ipv4 ipv5 ->
                                           case AS.Util.printTimed1
                                                  AS.DB.API.redo2
                                                  ipv4 of ds3 { (#,#) ipv6 ipv7 ->
                                           (# ipv6, GHC.Tuple.() #) } })
                                            `cast`
                                          (<Database.Redis.ProtocolPipelining.Connection
                                                Database.Redis.Protocol.Reply>_R
                                           ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)))
                                         `cast`
                                       (GHC.Types.NTCo:IO[0] <()>_R)
                                         ipv of ds2 { (#,#) ipv4 ipv5 ->
                                  (# ipv4, wild #) } }
                          : ipv2 ipv3
                          -> let {
                               $j :: GHC.Prim.State# GHC.Prim.RealWorld
                                     -> ()
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.Maybe.Maybe AS.Types.ASCommit #)
                                 {- Arity: 2 -}
                               = \ ipv4 :: GHC.Prim.State# GHC.Prim.RealWorld ipv5 :: () ->
                                 case a6 of wild3 {
                                   [] -> (# ipv4, wild #)
                                   : ipv6 ipv7
                                   -> case (Data.Pool.withResource_$swithResource
                                              @ (Database.Redis.ProtocolPipelining.Connection
                                                     Database.Redis.Protocol.Reply)
                                              @ ()
                                              conn `cast` (Database.Redis.Core.NTCo:Connection[0])
                                              (\ eta :: Database.Redis.ProtocolPipelining.Connection
                                                            Database.Redis.Protocol.Reply
                                                 eta1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                               case ((AS.DB.API.redo_go wild3)
                                                       `cast`
                                                     (Trans
                                                          (Database.Redis.Core.NTCo:Redis[0] <()>_N)
                                                          (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                               <Database.Redis.ProtocolPipelining.Connection
                                                                    Database.Redis.Protocol.Reply>_R
                                                               <GHC.Types.IO>_R
                                                               <()>_N))
                                                       eta)
                                                      `cast`
                                                    (GHC.Types.NTCo:IO[0] <()>_R)
                                                      eta1 of ds2 { (#,#) ipv8 ipv9 ->
                                               case AS.Util.printTimed1
                                                      AS.DB.API.redo2
                                                      ipv8 of ds3 { (#,#) ipv10 ipv11 ->
                                               (# ipv10, GHC.Tuple.() #) } })
                                                `cast`
                                              (<Database.Redis.ProtocolPipelining.Connection
                                                    Database.Redis.Protocol.Reply>_R
                                               ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)))
                                             `cast`
                                           (GHC.Types.NTCo:IO[0] <()>_R)
                                             ipv4 of ds2 { (#,#) ipv8 ipv9 ->
                                      (# ipv8, wild #) } }
                             } in
                             case GHC.Base.map
                                    @ AS.Types.ASCell
                                    @ AS.Types.ASLocation
                                    AS.Types.cellLocation
                                    wild2 of wild3 {
                               [] -> $j ipv GHC.Tuple.()
                               : ipv4 ipv5
                               -> case (Data.Pool.withResource_$swithResource
                                          @ (Database.Redis.ProtocolPipelining.Connection
                                                 Database.Redis.Protocol.Reply)
                                          @ ()
                                          conn `cast` (Database.Redis.Core.NTCo:Connection[0])
                                          (\ conn1 :: Database.Redis.ProtocolPipelining.Connection
                                                          Database.Redis.Protocol.Reply
                                             eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                           case ((AS.DB.API.deleteCells_go wild3)
                                                   `cast`
                                                 (Trans
                                                      (Database.Redis.Core.NTCo:Redis[0] <()>_N)
                                                      (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                           <Database.Redis.ProtocolPipelining.Connection
                                                                Database.Redis.Protocol.Reply>_R
                                                           <GHC.Types.IO>_R
                                                           <()>_N))
                                                   conn1)
                                                  `cast`
                                                (GHC.Types.NTCo:IO[0] <()>_R)
                                                  eta of ds2 { (#,#) ipv6 ipv7 ->
                                           (# ipv6, GHC.Tuple.() #) })
                                            `cast`
                                          (<Database.Redis.ProtocolPipelining.Connection
                                                Database.Redis.Protocol.Reply>_R
                                           ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)))
                                         `cast`
                                       (GHC.Types.NTCo:IO[0] <()>_R)
                                         ipv of ds2 { (#,#) ipv6 ipv7 ->
                                  $j ipv6 ipv7 } } } } } }) -}
d1a22149919b76f045c02bee979aacba
  redo2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "redis set cells"#) -}
fc0321914d8246acadad610d0e767424
  redo3 :: Database.Redis.ProtocolPipelining.Connection
               Database.Redis.Protocol.Reply
           -> GHC.Prim.State# GHC.Prim.RealWorld
           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                 Data.Maybe.Maybe AS.Types.ASCommit #)
    {- Arity: 2,
       Strictness: <S,1*U(U,U(U),U(U(U),U(U(U),U(U),A,U),U(U),A),A)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Database.Redis.ProtocolPipelining.Connection
                              Database.Redis.Protocol.Reply
                     w1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w of ww { Database.Redis.ProtocolPipelining.Conn ww1 ww2 ww3 ww4 ->
                   AS.DB.API.$wa7 ww1 ww2 ww3 w1 }) -}
102caf6df4d64f8bf78bbc8abc93d213
  redo4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "Pattern match failure in do expression at src/AS/DB/API.hs:191:5-16"#) -}
e47a487684e4e7054178688d2a6ceb57
  redo5 :: Data.ByteString.Internal.ByteString
    {- Unfolding: (case GHC.Prim.newMutVar#
                          @ GHC.ForeignPtr.Finalizers
                          @ GHC.Prim.RealWorld
                          GHC.ForeignPtr.NoFinalizers
                          GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                   let {
                     addr# :: GHC.Prim.Addr# = "pushed"#
                   } in
                   case {__pkg_ccall bytestring-0.10.4.0 strlen GHC.Prim.Addr#
                                                                -> GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                -> (# GHC.Prim.State#
                                                                          GHC.Prim.RealWorld,
                                                                      GHC.Prim.Word# #)}
                          addr#
                          ipv of wild { (#,#) ds3 ds4 ->
                   Data.ByteString.Internal.PS
                     addr#
                     (GHC.ForeignPtr.PlainForeignPtr ipv1)
                     0
                     (GHC.Prim.word2Int# ds4) } }) -}
8b7db2d57afcb817a640186dfbbcbf53
  redo6 :: [Data.ByteString.Internal.ByteString]
    {- Unfolding: (GHC.Types.:
                     @ Data.ByteString.Internal.ByteString
                     Database.Redis.Commands.lpop1
                     AS.DB.API.redo7) -}
70addbaa7c2a36950c7c493183552f6b
  redo7 :: [Data.ByteString.Internal.ByteString]
    {- Unfolding: (GHC.Types.:
                     @ Data.ByteString.Internal.ByteString
                     AS.DB.API.redo8
                     (GHC.Types.[] @ Data.ByteString.Internal.ByteString)) -}
44086bbebd2429fe849d0a99edc8afa6
  redo8 :: Data.ByteString.Internal.ByteString
    {- Unfolding: (case GHC.Prim.newMutVar#
                          @ GHC.ForeignPtr.Finalizers
                          @ GHC.Prim.RealWorld
                          GHC.ForeignPtr.NoFinalizers
                          GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                   let {
                     addr# :: GHC.Prim.Addr# = "popped"#
                   } in
                   case {__pkg_ccall bytestring-0.10.4.0 strlen GHC.Prim.Addr#
                                                                -> GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                -> (# GHC.Prim.State#
                                                                          GHC.Prim.RealWorld,
                                                                      GHC.Prim.Word# #)}
                          addr#
                          ipv of wild { (#,#) ds3 ds4 ->
                   Data.ByteString.Internal.PS
                     addr#
                     (GHC.ForeignPtr.PlainForeignPtr ipv1)
                     0
                     (GHC.Prim.word2Int# ds4) } }) -}
6f8a1614646d935c09629ed9581aaca9
  redo_go :: [AS.Types.ASCell] -> Database.Redis.Core.Redis ()
    {- Arity: 1, Strictness: <S,1*U> -}
dcb8098c6c712bf9f41ae30c32e83d88
  redo_go1 :: [AS.Types.ASCell] -> Database.Redis.Core.Redis ()
    {- Arity: 1, Strictness: <S,1*U> -}
f4b07b7acef53f5c171cd0ab2e758155
  redo_lvl9 :: Data.ByteString.Internal.ByteString
    {- Unfolding: (Database.Redis.Protocol.renderRequest
                     AS.DB.API.redo6) -}
c870a6120223989fbbeeb8c0b76d10ec
  setCell :: Database.Redis.Core.Connection
             -> AS.Types.ASCell
             -> GHC.Types.IO ()
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U><L,U>,
       Unfolding: (AS.DB.API.setCell1
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R <AS.Types.ASCell>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
d4aa5ed088cbfb196782cc28f8835f9e
  setCell1 :: Database.Redis.Core.Connection
              -> AS.Types.ASCell
              -> GHC.Prim.State# GHC.Prim.RealWorld
              -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U><L,U>,
       Unfolding: (\ conn :: Database.Redis.Core.Connection
                     c :: AS.Types.ASCell
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   (Data.Pool.withResource_$swithResource
                      @ (Database.Redis.ProtocolPipelining.Connection
                             Database.Redis.Protocol.Reply)
                      @ ()
                      conn `cast` (Database.Redis.Core.NTCo:Connection[0])
                      (\ eta1 :: Database.Redis.ProtocolPipelining.Connection
                                     Database.Redis.Protocol.Reply
                         eta2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case ((AS.DB.API.setCell_go
                                (GHC.Types.: @ AS.Types.ASCell c (GHC.Types.[] @ AS.Types.ASCell)))
                               `cast`
                             (Trans
                                  (Database.Redis.Core.NTCo:Redis[0] <()>_N)
                                  (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                       <Database.Redis.ProtocolPipelining.Connection
                                            Database.Redis.Protocol.Reply>_R
                                       <GHC.Types.IO>_R
                                       <()>_N))
                               eta1)
                              `cast`
                            (GHC.Types.NTCo:IO[0] <()>_R)
                              eta2 of ds1 { (#,#) ipv ipv1 ->
                       case AS.Util.printTimed1
                              AS.DB.API.redo2
                              ipv of ds2 { (#,#) ipv2 ipv3 ->
                       (# ipv2, GHC.Tuple.() #) } })
                        `cast`
                      (<Database.Redis.ProtocolPipelining.Connection
                            Database.Redis.Protocol.Reply>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)))
                     `cast`
                   (GHC.Types.NTCo:IO[0] <()>_R)
                     eta) -}
ca7c907d08d1b0c8043bf20a3f94fb9a
  setCell_go :: [AS.Types.ASCell] -> Database.Redis.Core.Redis ()
    {- Arity: 1, Strictness: <S,1*U> -}
cdb1a72e695590454ca44323763d8dfb
  setCells :: Database.Redis.Core.Connection
              -> [AS.Types.ASCell]
              -> GHC.Types.IO ()
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><S,1*U><L,U>,
       Unfolding: (AS.DB.API.setCells1
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R <[AS.Types.ASCell]>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
16197620f551f00fcb483d9eaae2a622
  setCells1 :: Database.Redis.Core.Connection
               -> [AS.Types.ASCell]
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><S,1*U><L,U>,
       Unfolding: (\ ds :: Database.Redis.Core.Connection
                     ds1 :: [AS.Types.ASCell]
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ds1 of wild {
                     [] -> (# eta, GHC.Tuple.() #)
                     : ipv ipv1
                     -> (Data.Pool.withResource_$swithResource
                           @ (Database.Redis.ProtocolPipelining.Connection
                                  Database.Redis.Protocol.Reply)
                           @ ()
                           ds `cast` (Database.Redis.Core.NTCo:Connection[0])
                           (\ eta1 :: Database.Redis.ProtocolPipelining.Connection
                                          Database.Redis.Protocol.Reply
                              eta2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                            case ((AS.DB.API.setCell_go wild)
                                    `cast`
                                  (Trans
                                       (Database.Redis.Core.NTCo:Redis[0] <()>_N)
                                       (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                            <Database.Redis.ProtocolPipelining.Connection
                                                 Database.Redis.Protocol.Reply>_R
                                            <GHC.Types.IO>_R
                                            <()>_N))
                                    eta1)
                                   `cast`
                                 (GHC.Types.NTCo:IO[0] <()>_R)
                                   eta2 of ds2 { (#,#) ipv2 ipv3 ->
                            case AS.Util.printTimed1
                                   AS.DB.API.redo2
                                   ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                            (# ipv4, GHC.Tuple.() #) } })
                             `cast`
                           (<Database.Redis.ProtocolPipelining.Connection
                                 Database.Redis.Protocol.Reply>_R
                            ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)))
                          `cast`
                        (GHC.Types.NTCo:IO[0] <()>_R)
                          eta }) -}
455a020fda636858fe92d5e58cc6f604
  setChunkVolatileCells :: [AS.Types.ASCell]
                           -> Database.Redis.Core.Redis ()
    {- Arity: 1, Strictness: <L,1*U>,
       Unfolding: (\ cells :: [AS.Types.ASCell] ->
                   let {
                     lvl22 :: Data.ByteString.Internal.ByteString
                     = Database.Redis.Protocol.renderRequest
                         (GHC.Types.:
                            @ Data.ByteString.Internal.ByteString
                            Database.Redis.Commands.sadd1
                            (GHC.Types.:
                               @ Data.ByteString.Internal.ByteString
                               AS.DB.API.setChunkVolatileCells1
                               (GHC.Base.map
                                  @ Data.ByteString.Internal.ByteString
                                  @ Data.ByteString.Internal.ByteString
                                  (GHC.Base.id @ Data.ByteString.Internal.ByteString)
                                  (AS.DB.API.setChunkVolatileCells_go cells))))
                   } in
                   (\ eta :: Database.Redis.ProtocolPipelining.Connection
                                 Database.Redis.Protocol.Reply
                      eta1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                    case eta of ww { Database.Redis.ProtocolPipelining.Conn ww1 ww2 ww3 ww4 ->
                    case lvl22 of ww5 { Data.ByteString.Internal.PS ww6 ww7 ww8 ww9 ->
                    case Database.Redis.ProtocolPipelining.$wa2
                           @ Database.Redis.Protocol.Reply
                           ww1
                           ww2
                           ww3
                           ww6
                           ww7
                           ww8
                           ww9
                           eta1 of ds1 { (#,#) ipv ipv1 ->
                    (# ipv, GHC.Tuple.() #) } } })
                     `cast`
                   (Trans
                        (<Database.Redis.ProtocolPipelining.Connection
                              Database.Redis.Protocol.Reply>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Trans
                             (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                       <Database.Redis.ProtocolPipelining.Connection
                                            Database.Redis.Protocol.Reply>_R
                                       <GHC.Types.IO>_R
                                       <()>_N))
                             (Sym (Database.Redis.Core.NTCo:Redis[0]) <()>_N)))) -}
a649734fecb5a7d108bb72ac7f944ccf
  setChunkVolatileCells1 :: Data.ByteString.Internal.ByteString
    {- Unfolding: (case GHC.Prim.newMutVar#
                          @ GHC.ForeignPtr.Finalizers
                          @ GHC.Prim.RealWorld
                          GHC.ForeignPtr.NoFinalizers
                          GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                   let {
                     addr# :: GHC.Prim.Addr# = "volatileLocs"#
                   } in
                   case {__pkg_ccall bytestring-0.10.4.0 strlen GHC.Prim.Addr#
                                                                -> GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                -> (# GHC.Prim.State#
                                                                          GHC.Prim.RealWorld,
                                                                      GHC.Prim.Word# #)}
                          addr#
                          ipv of wild { (#,#) ds3 ds4 ->
                   Data.ByteString.Internal.PS
                     addr#
                     (GHC.ForeignPtr.PlainForeignPtr ipv1)
                     0
                     (GHC.Prim.word2Int# ds4) } }) -}
e46a7ca9b64e301ce47522379dcd3284
  setChunkVolatileCells_go :: [AS.Types.ASCell]
                              -> [Data.ByteString.Internal.ByteString]
    {- Arity: 1, Strictness: <S,1*U> -}
165ed12510cfe4d951ec11f1f7ad3cbf
  setSheet :: Database.Redis.Core.Connection
              -> AS.Types.ASSheet
              -> GHC.Types.IO ()
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U(U(U,U,U),1*U,1*U)><L,U>,
       Unfolding: (AS.DB.API.createSheet2
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R <AS.Types.ASSheet>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
e96af0ac483485e8715674b7a48cdd07
  setWorkbook :: Database.Redis.Core.Connection
                 -> AS.Types.ASWorkbook
                 -> GHC.Types.IO ()
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U(U,1*U)><L,U>,
       Unfolding: (AS.DB.API.createWorkbook2
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R <AS.Types.ASWorkbook>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
c36df94ccf95e5dca358c1bf7fb7e7ef
  undo :: Database.Redis.Core.Connection
          -> GHC.Types.IO (Data.Maybe.Maybe AS.Types.ASCommit)
    {- Arity: 2,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U>,
       Unfolding: (AS.DB.API.undo1
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0]
                                  <Data.Maybe.Maybe AS.Types.ASCommit>_R))) -}
eea1b7b1f0b38cebb75a51c04bd2d835
  undo1 :: Database.Redis.Core.Connection
           -> GHC.Prim.State# GHC.Prim.RealWorld
           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                 Data.Maybe.Maybe AS.Types.ASCommit #)
    {- Arity: 2,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U>,
       Unfolding: (\ conn :: Database.Redis.Core.Connection
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case (Data.Pool.withResource_$swithResource
                           @ (Database.Redis.ProtocolPipelining.Connection
                                  Database.Redis.Protocol.Reply)
                           @ (Data.Maybe.Maybe AS.Types.ASCommit)
                           conn `cast` (Database.Redis.Core.NTCo:Connection[0])
                           AS.DB.API.undo2
                             `cast`
                           (<Database.Redis.ProtocolPipelining.Connection
                                 Database.Redis.Protocol.Reply>_R
                            ->_R Sym (GHC.Types.NTCo:IO[0]
                                          <Data.Maybe.Maybe AS.Types.ASCommit>_R)))
                          `cast`
                        (GHC.Types.NTCo:IO[0] <Data.Maybe.Maybe AS.Types.ASCommit>_R)
                          s of ds1 { (#,#) ipv ipv1 ->
                   case ipv1 of wild {
                     Data.Maybe.Nothing
                     -> (# ipv, Data.Maybe.Nothing @ AS.Types.ASCommit #)
                     Data.Maybe.Just c
                     -> case c of wild1 { AS.Types.ASCommit uid b a6 t ->
                        case a6 of wild2 {
                          []
                          -> case b of wild3 {
                               [] -> ds1
                               : ipv2 ipv3
                               -> case (Data.Pool.withResource_$swithResource
                                          @ (Database.Redis.ProtocolPipelining.Connection
                                                 Database.Redis.Protocol.Reply)
                                          @ ()
                                          conn `cast` (Database.Redis.Core.NTCo:Connection[0])
                                          (\ eta :: Database.Redis.ProtocolPipelining.Connection
                                                        Database.Redis.Protocol.Reply
                                             eta1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                           case ((AS.DB.API.undo_go1 wild3)
                                                   `cast`
                                                 (Trans
                                                      (Database.Redis.Core.NTCo:Redis[0] <()>_N)
                                                      (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                           <Database.Redis.ProtocolPipelining.Connection
                                                                Database.Redis.Protocol.Reply>_R
                                                           <GHC.Types.IO>_R
                                                           <()>_N))
                                                   eta)
                                                  `cast`
                                                (GHC.Types.NTCo:IO[0] <()>_R)
                                                  eta1 of ds2 { (#,#) ipv4 ipv5 ->
                                           case AS.Util.printTimed1
                                                  AS.DB.API.redo2
                                                  ipv4 of ds3 { (#,#) ipv6 ipv7 ->
                                           (# ipv6, GHC.Tuple.() #) } })
                                            `cast`
                                          (<Database.Redis.ProtocolPipelining.Connection
                                                Database.Redis.Protocol.Reply>_R
                                           ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)))
                                         `cast`
                                       (GHC.Types.NTCo:IO[0] <()>_R)
                                         ipv of ds2 { (#,#) ipv4 ipv5 ->
                                  (# ipv4, wild #) } }
                          : ipv2 ipv3
                          -> let {
                               $j :: GHC.Prim.State# GHC.Prim.RealWorld
                                     -> ()
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.Maybe.Maybe AS.Types.ASCommit #)
                                 {- Arity: 2 -}
                               = \ ipv4 :: GHC.Prim.State# GHC.Prim.RealWorld ipv5 :: () ->
                                 case b of wild3 {
                                   [] -> (# ipv4, wild #)
                                   : ipv6 ipv7
                                   -> case (Data.Pool.withResource_$swithResource
                                              @ (Database.Redis.ProtocolPipelining.Connection
                                                     Database.Redis.Protocol.Reply)
                                              @ ()
                                              conn `cast` (Database.Redis.Core.NTCo:Connection[0])
                                              (\ eta :: Database.Redis.ProtocolPipelining.Connection
                                                            Database.Redis.Protocol.Reply
                                                 eta1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                               case ((AS.DB.API.undo_go wild3)
                                                       `cast`
                                                     (Trans
                                                          (Database.Redis.Core.NTCo:Redis[0] <()>_N)
                                                          (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                               <Database.Redis.ProtocolPipelining.Connection
                                                                    Database.Redis.Protocol.Reply>_R
                                                               <GHC.Types.IO>_R
                                                               <()>_N))
                                                       eta)
                                                      `cast`
                                                    (GHC.Types.NTCo:IO[0] <()>_R)
                                                      eta1 of ds2 { (#,#) ipv8 ipv9 ->
                                               case AS.Util.printTimed1
                                                      AS.DB.API.redo2
                                                      ipv8 of ds3 { (#,#) ipv10 ipv11 ->
                                               (# ipv10, GHC.Tuple.() #) } })
                                                `cast`
                                              (<Database.Redis.ProtocolPipelining.Connection
                                                    Database.Redis.Protocol.Reply>_R
                                               ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)))
                                             `cast`
                                           (GHC.Types.NTCo:IO[0] <()>_R)
                                             ipv4 of ds2 { (#,#) ipv8 ipv9 ->
                                      (# ipv8, wild #) } }
                             } in
                             case GHC.Base.map
                                    @ AS.Types.ASCell
                                    @ AS.Types.ASLocation
                                    AS.Types.cellLocation
                                    wild2 of wild3 {
                               [] -> $j ipv GHC.Tuple.()
                               : ipv4 ipv5
                               -> case (Data.Pool.withResource_$swithResource
                                          @ (Database.Redis.ProtocolPipelining.Connection
                                                 Database.Redis.Protocol.Reply)
                                          @ ()
                                          conn `cast` (Database.Redis.Core.NTCo:Connection[0])
                                          (\ conn1 :: Database.Redis.ProtocolPipelining.Connection
                                                          Database.Redis.Protocol.Reply
                                             eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                           case ((AS.DB.API.deleteCells_go wild3)
                                                   `cast`
                                                 (Trans
                                                      (Database.Redis.Core.NTCo:Redis[0] <()>_N)
                                                      (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                           <Database.Redis.ProtocolPipelining.Connection
                                                                Database.Redis.Protocol.Reply>_R
                                                           <GHC.Types.IO>_R
                                                           <()>_N))
                                                   conn1)
                                                  `cast`
                                                (GHC.Types.NTCo:IO[0] <()>_R)
                                                  eta of ds2 { (#,#) ipv6 ipv7 ->
                                           (# ipv6, GHC.Tuple.() #) })
                                            `cast`
                                          (<Database.Redis.ProtocolPipelining.Connection
                                                Database.Redis.Protocol.Reply>_R
                                           ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)))
                                         `cast`
                                       (GHC.Types.NTCo:IO[0] <()>_R)
                                         ipv of ds2 { (#,#) ipv6 ipv7 ->
                                  $j ipv6 ipv7 } } } } } }) -}
dc943f09618202d94e594ffaf85de271
  undo2 :: Database.Redis.ProtocolPipelining.Connection
               Database.Redis.Protocol.Reply
           -> GHC.Prim.State# GHC.Prim.RealWorld
           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                 Data.Maybe.Maybe AS.Types.ASCommit #)
    {- Arity: 2,
       Strictness: <L,U(U,U(U),U(U(U),U(U(U),U(U),U,U),U(U),U),U)><L,U>,
       Unfolding: (\ r1 :: Database.Redis.ProtocolPipelining.Connection
                               Database.Redis.Protocol.Reply
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case Database.Redis.Transactions.multiExec1
                          @ (Data.Maybe.Maybe Data.ByteString.Internal.ByteString)
                          AS.DB.API.undo4
                            `cast`
                          (Trans
                               (<GHC.Types.Int>_R
                                ->_R Trans
                                         (<Database.Redis.ProtocolPipelining.Connection
                                               Database.Redis.Protocol.Reply>_R
                                          ->_R Sym (GHC.Types.NTCo:IO[0]
                                                        <(Database.Redis.Transactions.Queued
                                                              (Data.Maybe.Maybe
                                                                   Data.ByteString.Internal.ByteString),
                                                          GHC.Types.Int)>_R))
                                         (Trans
                                              (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                        <Database.Redis.ProtocolPipelining.Connection
                                                             Database.Redis.Protocol.Reply>_R
                                                        <GHC.Types.IO>_R
                                                        <(Database.Redis.Transactions.Queued
                                                              (Data.Maybe.Maybe
                                                                   Data.ByteString.Internal.ByteString),
                                                          GHC.Types.Int)>_N))
                                              (Sym (Database.Redis.Core.NTCo:Redis[0]) <(Database.Redis.Transactions.Queued
                                                                                             (Data.Maybe.Maybe
                                                                                                  Data.ByteString.Internal.ByteString),
                                                                                         GHC.Types.Int)>_N)))
                               (Trans
                                    (Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                              <GHC.Types.Int>_N
                                              <Database.Redis.Core.Redis>_R
                                              <Database.Redis.Transactions.Queued
                                                   (Data.Maybe.Maybe
                                                        Data.ByteString.Internal.ByteString)>_N))
                                    (Sym (Database.Redis.Transactions.NTCo:RedisTx[0]) <Database.Redis.Transactions.Queued
                                                                                            (Data.Maybe.Maybe
                                                                                                 Data.ByteString.Internal.ByteString)>_N)))
                          r1
                          s of ds1 { (#,#) ipv ipv1 ->
                   case ipv1 of wild {
                     DEFAULT
                     -> (GHC.IO.failIO
                           @ (Data.Maybe.Maybe AS.Types.ASCommit)
                           AS.DB.API.undo3)
                          `cast`
                        (GHC.Types.NTCo:IO[0] <Data.Maybe.Maybe AS.Types.ASCommit>_R)
                          ipv
                     Database.Redis.Transactions.TxSuccess justC
                     -> (# ipv, AS.DB.Util.bStrToASCommit justC #) } }) -}
df6a5140820196207a488dfc8ab35bf5
  undo3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "Pattern match failure in do expression at src/AS/DB/API.hs:177:5-19"#) -}
9adda0dca87336b7b05ff72d0990ca1f
  undo4 :: GHC.Types.Int
           -> Database.Redis.ProtocolPipelining.Connection
                  Database.Redis.Protocol.Reply
           -> GHC.Prim.State# GHC.Prim.RealWorld
           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                 (Database.Redis.Transactions.Queued
                      (Data.Maybe.Maybe Data.ByteString.Internal.ByteString),
                  GHC.Types.Int) #)
    {- Arity: 3,
       Strictness: <L,U(U)><S,1*U(U,1*U(U),1*U(U(U),U(U(U),U(U),A,U),U(U),A),A)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ w :: GHC.Types.Int
                     w1 :: Database.Redis.ProtocolPipelining.Connection
                               Database.Redis.Protocol.Reply
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w1 of ww { Database.Redis.ProtocolPipelining.Conn ww1 ww2 ww3 ww4 ->
                   AS.DB.API.$wa8 w ww1 ww2 ww3 w2 }) -}
c4ca9a9c807648fb2ccb45831777544e
  undo5 :: [Data.ByteString.Internal.ByteString]
    {- Unfolding: (GHC.Types.:
                     @ Data.ByteString.Internal.ByteString
                     Database.Redis.Commands.rpoplpush1
                     AS.DB.API.undo6) -}
8dca41cee148d1b451e933962fe81f36
  undo6 :: [Data.ByteString.Internal.ByteString]
    {- Unfolding: (GHC.Types.:
                     @ Data.ByteString.Internal.ByteString
                     AS.DB.API.undo9
                     AS.DB.API.undo7) -}
83317be9fbd77083c912dccb1a2abb2d
  undo7 :: [Data.ByteString.Internal.ByteString]
    {- Unfolding: (GHC.Types.:
                     @ Data.ByteString.Internal.ByteString
                     AS.DB.API.undo8
                     (GHC.Types.[] @ Data.ByteString.Internal.ByteString)) -}
c08e0edcb12c2ad6129d48c7275f4f89
  undo8 :: Data.ByteString.Internal.ByteString
    {- Unfolding: (case GHC.Prim.newMutVar#
                          @ GHC.ForeignPtr.Finalizers
                          @ GHC.Prim.RealWorld
                          GHC.ForeignPtr.NoFinalizers
                          GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                   let {
                     addr# :: GHC.Prim.Addr# = "popped"#
                   } in
                   case {__pkg_ccall bytestring-0.10.4.0 strlen GHC.Prim.Addr#
                                                                -> GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                -> (# GHC.Prim.State#
                                                                          GHC.Prim.RealWorld,
                                                                      GHC.Prim.Word# #)}
                          addr#
                          ipv of wild { (#,#) ds3 ds4 ->
                   Data.ByteString.Internal.PS
                     addr#
                     (GHC.ForeignPtr.PlainForeignPtr ipv1)
                     0
                     (GHC.Prim.word2Int# ds4) } }) -}
bce31744aa30ae3fe667fd9fa32e855c
  undo9 :: Data.ByteString.Internal.ByteString
    {- Unfolding: (case GHC.Prim.newMutVar#
                          @ GHC.ForeignPtr.Finalizers
                          @ GHC.Prim.RealWorld
                          GHC.ForeignPtr.NoFinalizers
                          GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                   let {
                     addr# :: GHC.Prim.Addr# = "pushed"#
                   } in
                   case {__pkg_ccall bytestring-0.10.4.0 strlen GHC.Prim.Addr#
                                                                -> GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                -> (# GHC.Prim.State#
                                                                          GHC.Prim.RealWorld,
                                                                      GHC.Prim.Word# #)}
                          addr#
                          ipv of wild { (#,#) ds3 ds4 ->
                   Data.ByteString.Internal.PS
                     addr#
                     (GHC.ForeignPtr.PlainForeignPtr ipv1)
                     0
                     (GHC.Prim.word2Int# ds4) } }) -}
d79afb17c81dc3257db9e728664b12b6
  undo_go :: [AS.Types.ASCell] -> Database.Redis.Core.Redis ()
    {- Arity: 1, Strictness: <S,1*U> -}
4cfc9a9b0af62bb4a947d9ef2cab1081
  undo_go1 :: [AS.Types.ASCell] -> Database.Redis.Core.Redis ()
    {- Arity: 1, Strictness: <S,1*U> -}
53b7849e1e850d42342e6d0f598a084e
  undo_lvl9 :: Data.ByteString.Internal.ByteString
    {- Unfolding: (Database.Redis.Protocol.renderRequest
                     AS.DB.API.undo5) -}
07f8b4532510daa94b8ba320e7c386d4
  updateAfterEval :: Database.Redis.Core.Connection
                     -> AS.Types.ASUserId
                     -> AS.Types.ASCell
                     -> [AS.Types.ASCell]
                     -> [AS.Types.ASCell]
                     -> GHC.Types.IO ()
    {- Arity: 6,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,1*U(U,U,U)><L,1*U(A,A,A,1*U)><L,1*U><L,U><L,U>,
       Unfolding: (AS.DB.API.updateAfterEval1
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R <AS.Types.ASUserId>_R
                    ->_R <AS.Types.ASCell>_R
                    ->_R <[AS.Types.ASCell]>_R
                    ->_R <[AS.Types.ASCell]>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
7ca40e812d259c059fbabcb4b2d7cc13
  updateAfterEval1 :: Database.Redis.Core.Connection
                      -> AS.Types.ASUserId
                      -> AS.Types.ASCell
                      -> [AS.Types.ASCell]
                      -> [AS.Types.ASCell]
                      -> GHC.Prim.State# GHC.Prim.RealWorld
                      -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 6,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,1*U(U,U,U)><L,1*U(A,A,A,1*U)><L,1*U><L,U><L,U>,
       Unfolding: (\ conn :: Database.Redis.Core.Connection
                     uid :: AS.Types.ASUserId
                     origCell :: AS.Types.ASCell
                     desc :: [AS.Types.ASCell]
                     cells :: [AS.Types.ASCell]
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case AS.Util.printTimed1
                          AS.DB.API.updateAfterEval4
                          s of ds1 { (#,#) ipv ipv1 ->
                   let {
                     $w$j :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                       {- Arity: 1, Strictness: <L,U> -}
                     = \ w :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case AS.Util.printTimed1
                              AS.DB.API.updateAfterEval3
                              w of ds2 { (#,#) ipv2 ipv3 ->
                       case AS.DB.API.addCommit2
                              conn
                              (AS.Types.ASCommit uid desc cells AS.Util.getASTime2)
                              ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                       case AS.Util.printTimed1
                              AS.DB.API.updateAfterEval2
                              ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                       case AS.Util.containsTrackingTag
                              (AS.Types.cellTags origCell) of wild { DEFAULT ->
                       (# ipv6, GHC.Tuple.() #) } } } }
                   } in
                   case cells of wild {
                     [] -> $w$j ipv
                     : ipv2 ipv3
                     -> case (Data.Pool.withResource_$swithResource
                                @ (Database.Redis.ProtocolPipelining.Connection
                                       Database.Redis.Protocol.Reply)
                                @ ()
                                conn `cast` (Database.Redis.Core.NTCo:Connection[0])
                                (\ eta :: Database.Redis.ProtocolPipelining.Connection
                                              Database.Redis.Protocol.Reply
                                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                 case ((AS.DB.API.updateAfterEval_go wild)
                                         `cast`
                                       (Trans
                                            (Database.Redis.Core.NTCo:Redis[0] <()>_N)
                                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                 <Database.Redis.ProtocolPipelining.Connection
                                                      Database.Redis.Protocol.Reply>_R
                                                 <GHC.Types.IO>_R
                                                 <()>_N))
                                         eta)
                                        `cast`
                                      (GHC.Types.NTCo:IO[0] <()>_R)
                                        eta1 of ds2 { (#,#) ipv4 ipv5 ->
                                 case AS.Util.printTimed1
                                        AS.DB.API.redo2
                                        ipv4 of ds3 { (#,#) ipv6 ipv7 ->
                                 (# ipv6, GHC.Tuple.() #) } })
                                  `cast`
                                (<Database.Redis.ProtocolPipelining.Connection
                                      Database.Redis.Protocol.Reply>_R
                                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)))
                               `cast`
                             (GHC.Types.NTCo:IO[0] <()>_R)
                               ipv of ds2 { (#,#) ipv4 ipv5 ->
                        $w$j ipv4 } } }) -}
fac779d94fb81ea2ebdc532ed021bf4e
  updateAfterEval2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "added commit"#) -}
7d81d13fc726deea8c17db60e1f1024e
  updateAfterEval3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "finished set cells"#) -}
d7dc0a03f42e6105d6ac187b19346072
  updateAfterEval4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "begin set cells"#) -}
1321f178c502ad632c5a3681faed7d85
  updateAfterEval_go :: [AS.Types.ASCell]
                        -> Database.Redis.Core.Redis ()
    {- Arity: 1, Strictness: <S,1*U> -}
bcbead2b607b8220aa845eb128bc390a
  updateDAG :: Database.Redis.Core.Connection
               -> [([AS.Types.ASLocation], AS.Types.ASLocation)]
               -> GHC.Types.IO ()
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><S,1*U><L,U>,
       Unfolding: (AS.DB.API.updateDAG1
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R <[([AS.Types.ASLocation], AS.Types.ASLocation)]>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
38d1600601defc0ad2cdfd4f0aeaef25
  updateDAG1 :: Database.Redis.Core.Connection
                -> [([AS.Types.ASLocation], AS.Types.ASLocation)]
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><S,1*U><L,U>,
       Unfolding: (\ ds :: Database.Redis.Core.Connection
                     ds1 :: [([AS.Types.ASLocation], AS.Types.ASLocation)]
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ds1 of wild {
                     [] -> (# eta, GHC.Tuple.() #)
                     : ipv ipv1
                     -> AS.DB.Util.chunkM_1
                          @ ([AS.Types.ASLocation], AS.Types.ASLocation)
                          ds
                          AS.DB.Util.updateChunkDAG
                          AS.DB.Util.dagChunkSize
                          wild
                          eta }) -}
13afd79d9968b9fa5edc253b4e5bec7b
  workbookExists :: Database.Redis.Core.Connection
                    -> GHC.Base.String
                    -> GHC.Types.IO GHC.Types.Bool
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U><L,U>,
       Unfolding: (AS.DB.API.workbookExists1
                     `cast`
                   (<Database.Redis.Core.Connection>_R
                    ->_R <GHC.Base.String>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Types.Bool>_R))) -}
6a380364cd1197c69703513853e28917
  workbookExists1 :: Database.Redis.Core.Connection
                     -> GHC.Base.String
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
    {- Arity: 3,
       Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,U><L,U>,
       Unfolding: (\ conn :: Database.Redis.Core.Connection
                     wName :: GHC.Base.String
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   (Data.Pool.withResource_$swithResource
                      @ (Database.Redis.ProtocolPipelining.Connection
                             Database.Redis.Protocol.Reply)
                      @ GHC.Types.Bool
                      conn `cast` (Database.Redis.Core.NTCo:Connection[0])
                      (\ r1 :: Database.Redis.ProtocolPipelining.Connection
                                   Database.Redis.Protocol.Reply
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case r1 of ww { Database.Redis.ProtocolPipelining.Conn ww1 ww2 ww3 ww4 ->
                       case Database.Redis.Protocol.renderRequest
                              (GHC.Types.:
                                 @ Data.ByteString.Internal.ByteString
                                 Database.Redis.Commands.exists1
                                 (GHC.Types.:
                                    @ Data.ByteString.Internal.ByteString
                                    (Data.ByteString.Internal.packChars wName)
                                    (GHC.Types.[]
                                       @ Data.ByteString.Internal.ByteString))) of ww5 { Data.ByteString.Internal.PS ww6 ww7 ww8 ww9 ->
                       case Database.Redis.ProtocolPipelining.$wa2
                              @ Database.Redis.Protocol.Reply
                              ww1
                              ww2
                              ww3
                              ww6
                              ww7
                              ww8
                              ww9
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Database.Redis.Types.$fRedisResultBool_$cdecode ipv1 of wild {
                         Data.Either.Left ipv2
                         -> (GHC.IO.failIO @ GHC.Types.Bool AS.DB.API.workbookExists2)
                              `cast`
                            (GHC.Types.NTCo:IO[0] <GHC.Types.Bool>_R)
                              ipv
                         Data.Either.Right result -> (# ipv, result #) } } } })
                        `cast`
                      (<Database.Redis.ProtocolPipelining.Connection
                            Database.Redis.Protocol.Reply>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Types.Bool>_R)))
                     `cast`
                   (GHC.Types.NTCo:IO[0] <GHC.Types.Bool>_R)
                     eta) -}
c02877a56dde4ddb1f26dfe3e99dafd0
  workbookExists2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "Pattern match failure in do expression at src/AS/DB/API.hs:294:5-16"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

