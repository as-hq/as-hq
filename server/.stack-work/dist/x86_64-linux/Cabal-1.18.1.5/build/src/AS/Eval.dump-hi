
==================== FINAL INTERFACE ====================
2015-08-20 07:10:36.266251 UTC

interface alphasheets-0.1.0.0:AS.Eval 7084
  interface hash: 6f60c5674c1a798d5aecdf9a701018d2
  ABI hash: b5ed8acff9b9c1efea56cfefc3843cec
  export-list hash: 53a629b4df3de569c8af7ea232a42844
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f8b866267ce58dc6290b8020b2e82f8c
  used TH splices: True
  where
exports:
  AS.Eval.clearReplRecord
  AS.Eval.eval
  AS.Eval.evalCode
  AS.Eval.evalCodeRepl
  AS.Eval.evalExcel
  AS.Eval.evalExpression
  AS.Eval.evalRef
  AS.Eval.evalString
  AS.Eval.handleEval
  AS.Eval.pyString
  AS.Eval.pyfiString
  AS.Eval.readOutput
  AS.Eval.runFile
  AS.Eval.runReplFile
  AS.Eval.writeExecFile
  AS.Eval.writeReplFile
  AS.Eval.writeReplRecord
module dependencies: AS.Config.Paths AS.DB AS.Eval.Lang
                     AS.Parsing.Common AS.Parsing.In AS.Parsing.Out AS.Types AS.Util
package dependencies: SHA-1.6.4.2 aeson-0.8.0.2 array-0.5.0.0
                      attoparsec-0.12.1.6 base base64-bytestring-1.0.0.1 binary-0.7.1.0
                      blaze-builder-0.4.0.1 bytestring-0.10.4.0 case-insensitive-1.2.0.4
                      cereal-0.4.1.1 containers-0.5.5.1 crypto-api-0.13.2 deepseq-1.3.0.2
                      directory-1.2.1.0 dlist-0.7.1.1 entropy-0.3.7 filepath-1.3.0.2
                      ghc-prim hashable-1.2.3.3 integer-gmp mtl-2.1.3.1 network-2.6.2.0
                      old-locale-1.0.0.6 parsec-3.1.9 pretty-1.1.1.1 primitive-0.6
                      process-1.2.0.0 pureMD5-2.1.2.1 pyfi-0.4.0.4 random-1.1
                      regex-base-0.93.2 regex-posix-0.95.2 scientific-0.3.3.8 split-0.2.2
                      strict-0.3.2 tagged-0.7.3 template-haskell text-1.2.0.6 time-1.4.2
                      transformers-0.3.0.0 unix-2.7.0.1 unordered-containers-0.2.5.1
                      vector-0.10.12.3 websockets-0.9.5.0
orphans: aeson-0.8.0.2:Data.Aeson.Types.Generic
         aeson-0.8.0.2:Data.Aeson.Types.Instances
         aeson-0.8.0.2:Data.Aeson.Types.Internal
         alphasheets-0.1.0.0:AS.Eval.Lang alphasheets-0.1.0.0:AS.Parsing.In
         attoparsec-0.12.1.6:Data.Attoparsec.ByteString.Char8 base:GHC.Base
         base:GHC.Float base:GHC.Real binary-0.7.1.0:Data.Binary.Generic
         bytestring-0.10.4.0:Data.ByteString.Builder
         crypto-api-0.13.2:Crypto.Classes crypto-api-0.13.2:Crypto.Random
         hashable-1.2.3.3:Data.Hashable.Generic
         network-2.6.2.0:Network.Socket network-2.6.2.0:Network.Socket.Types
         pyfi-0.4.0.4:Python random-1.1:System.Random
         regex-base-0.93.2:Text.Regex.Base.Context
         regex-posix-0.95.2:Text.Regex.Posix.ByteString
         regex-posix-0.95.2:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2:Text.Regex.Posix.Sequence
         regex-posix-0.95.2:Text.Regex.Posix.String
         template-haskell:Language.Haskell.TH.PprLib text-1.2.0.6:Data.Text
         text-1.2.0.6:Data.Text.Lazy time-1.4.2:Data.Time.Calendar.Gregorian
         time-1.4.2:Data.Time.Format.Parse
         time-1.4.2:Data.Time.LocalTime.LocalTime
         transformers-0.3.0.0:Control.Monad.Trans.Error
         vector-0.10.12.3:Data.Vector.Fusion.Stream
         vector-0.10.12.3:Data.Vector.Unboxed
family instance modules: alphasheets-0.1.0.0:AS.Types
                         attoparsec-0.12.1.6:Data.Attoparsec.Internal.Types
                         base:Control.Applicative base:Data.Either base:Data.Monoid
                         base:Data.Type.Equality base:GHC.Exts base:GHC.Generics
                         dlist-0.7.1.1:Data.DList primitive-0.6:Control.Monad.Primitive
                         text-1.2.0.6:Data.Text text-1.2.0.6:Data.Text.Lazy
                         unordered-containers-0.2.5.1:Data.HashMap.Base
                         unordered-containers-0.2.5.1:Data.HashSet
                         vector-0.10.12.3:Data.Vector vector-0.10.12.3:Data.Vector.Primitive
                         vector-0.10.12.3:Data.Vector.Storable
                         vector-0.10.12.3:Data.Vector.Unboxed
                         vector-0.10.12.3:Data.Vector.Unboxed.Base
import  -/  AS.DB b12b1d3c11d94c6f9f9b9f3592040d65
  exports: 3c362108996cc5146ac2250c1b1c6210
import  -/  AS.Eval.Lang 247f44e428921c8183ccf7f95a726209
  exports: 6afe7b60cfad3affeaaac98964525d74
  addCompileCmd 53a1259b39002581534c73ef9608af96
  formatRunArgs af1e464c8eb6645714733437fd5fa581
  getReplRecord de1219a41092898d29ef055c669d86fc
  getReplRecordFile 5764c837bba440f78b7a10ac66840f96
  getRunFile 06ff2d213b689f28121829d620f72c85
  getRunReplFile f503527a361d78f6fb6b409a3080f08e
  getRunnerArgs 57214331494ae50dcc14281efc8564b7
  getRunnerCmd c621df4ccf387d63af71ec2a9d777bee
  getRunnerCmdRepl 78a345dc5daf12d45488f00f9b9bcd84
  interpolate 70da7d5e07ff03d85ebffff528ae5947
  interpolateFile 1e3bc97ec7a56960bd0f916d2d021893
  interpolateFileRepl f7bcd8cf8e89b989a3bd4c61e6e91d2b
  lookupString 188be011c6255f0eef596f48cc090335
  removePrintStmt 29271b346bb5820ac63f9f38a5474a3f
import  -/  AS.Parsing.Common 2fdb05fa6cb85dd95bd00704eb6e020b
  exports: 6373d90a9aaddcd2d18cba04a491c26c
import  -/  AS.Parsing.In b6b481fc0bd8e9ceda0ab62e76f828d2
  exports: 62019d4dda5ea5e6817c5777f94ba732
  parseValue 031e722cba41d96e164b91f673792075
import  -/  AS.Parsing.Out fba6f9deafe016118fae642fb99574ed
  exports: a35a850caac02fe781c1c3ce3af3ec40
  exLocToASLocation 370e65ed54669f1d3807186c045e638d
  excelMatch 76ef8218a984db57ad0842ec78f35c91
  getMatchesWithContext 124ceca39897287ce4a6156fc6261390
  replaceMatches efc937eaa950cd7daac838c89238cffe
import  -/  AS.Types b606c3629b6c721cf8b97ba4ece45fb1
  exports: 66ecab93115eea25472e439473866aa8
  ASExpression 202fe15cb9625b3476a51d6a1b19686c
  ASLanguage fe64043cb1e3f3d06f3bab2e586b8c96
  ASLocation c3999fef437ba89bfafc0ba56adaa4e1
  ASValue b1acb5fd16e89609b5c353aa6b20e24f
  Excel 6f0c1e795df7563c73906c63f4a7551d
  Expression d3eb52f5348f449ca41cbf92f7270c44
  OCaml 60aba87dc36e4bf82b5b1cf38a91c070
  Python ce1f286eba669d7c31d15d8f4f9ce369
  Reference ddd5f4288526870e17c56775be43379f
  SQL 1d65d8106d848b73ade1a7081249b16b
  ValueError b655af82ea33111b6e5cbe720955ed25
  ValueL 7f6bc38d21b476842e803fe228ce3ebe
  expression bb46e6eaff36b352d59123812921fd83
  language a464de82425c95b8fe43de0f0debbb43
import  -/  AS.Util d80e7b17172dcaa38faa0d323bd0543a
  exports: 22c6c0c3cabbbc0dbbfea98994afcbca
  printTimed 11b90d9741b8dab38b3d34d2cb6d2915
import  -/  base:Control.Applicative 30b769206cb5c020684e1bda0d7e7dd3
import  -/  base:Control.Monad 483e787e07c2e49f1fb1c1b88665cb92
import  -/  base:Data.List 8b77870d02d66076337587b759b7ee19
import  -/  base:Data.Maybe 5034d40e23c3a7110309f188001df4ca
import  -/  base:Data.Tuple cac4e06c48274e85317bd3e59867ef5b
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:GHC.IO 4f1da187b3631b8d72997b7dc992301d
import  -/  base:GHC.IO.Handle.Text 69f1e461016fd70cdf6f3676c04d367a
import  -/  base:GHC.List 4cff382327e59a5787355ca0a4174450
import  -/  base:GHC.Num 5e7786970581cacc802bf850d458a30b
import  -/  base:GHC.Show cf1a7ff9edb0f41528085aad04d33753
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  base:System.IO cadd0efb01c47ddd8f52d750739fdbdf
import  -/  containers-0.5.5.1:Data.Map 39e9346954b9366e01d2c8afb617e216
import  -/  containers-0.5.5.1:Data.Map.Base 4216c6c0396261d88891bb4aaa09340a
import  -/  ghc-prim:GHC.Classes 3e6cbe1e7e80480408cfa8d5450726a0
import  -/  ghc-prim:GHC.Types dcba736fa3dfba12d307ab18354845d2
import  -/  process-1.2.0.0:System.Process 534819ef92df378799aeca5ffa040253
import  -/  pyfi-0.4.0.4:Python 844c1e36ff7e527ab1185eb14e213b73
import  -/  text-1.2.0.6:Data.Text 0a4e6ca8ca412aa3cbc86c5bc7204623
import  -/  time-1.4.2:Data.Time.Clock 86049c786591e38a79a841e152726f37
import  -/  time-1.4.2:Data.Time.Clock.UTC 2eaf66db96f758ff3a5badfa24a9ff43
c7bb012fecfaf84fbc1eaa7851b4660b
  clearReplRecord :: AS.Types.ASLanguage -> GHC.Types.IO ()
    {- Arity: 1, Strictness: <L,1*U>,
       Unfolding: (AS.Eval.clearReplRecord1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
87ee59e0ae043f75b0dbe01ac8280a93
  clearReplRecord1 :: AS.Types.ASLanguage
                      -> GHC.Prim.State# GHC.Prim.RealWorld
                      -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 1, Strictness: <L,1*U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage ->
                   System.IO.writeFile1
                     (AS.Eval.Lang.getReplRecordFile lang)
                     (GHC.Types.[] @ GHC.Types.Char)) -}
f070d05c51e154d2e7055cdc42dc2f3c
  eval :: GHC.Base.String
          -> AS.Types.ASLanguage
          -> GHC.Types.IO GHC.Base.String
    {- Arity: 3, Strictness: <L,U><L,1*U><L,U>,
       Unfolding: (AS.Eval.eval1
                     `cast`
                   (<GHC.Base.String>_R
                    ->_R <AS.Types.ASLanguage>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
e7caa7505b1f1963f8b39093c56e11fc
  eval1 :: GHC.Base.String
           -> AS.Types.ASLanguage
           -> GHC.Prim.State# GHC.Prim.RealWorld
           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 3, Strictness: <L,U><L,1*U><L,U>,
       Unfolding: (\ s :: GHC.Base.String
                     lang :: AS.Types.ASLanguage
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case System.Process.runInteractiveCommand1
                          s
                          eta of ds1 { (#,#) ipv ipv1 ->
                   case ipv1 of wild { (,,,) ds stdOut stdErr hProcess ->
                   case GHC.IO.Handle.Text.hGetContents1
                          stdOut
                          ipv of ds2 { (#,#) ipv2 ipv3 ->
                   case GHC.IO.Handle.Text.hGetContents1
                          stdErr
                          ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                   letrec {
                     a :: [GHC.Types.Char]
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                GHC.IO.Exception.ExitCode #)
                       {- Arity: 2, Strictness: <S,1*U><L,U> -}
                     = \ ds4 :: [GHC.Types.Char]
                         eta1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case ds4 of wild1 {
                         [] -> System.Process.callCommand3 hProcess eta1
                         : y ys -> case y of tpl { GHC.Types.C# ipv6 -> a ys eta1 } }
                   } in
                   case a ipv3 ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                   letrec {
                     a1 :: [GHC.Types.Char]
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.IO.Exception.ExitCode #)
                       {- Arity: 2, Strictness: <S,1*U><L,U> -}
                     = \ ds5 :: [GHC.Types.Char]
                         eta1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case ds5 of wild1 {
                         [] -> System.Process.callCommand3 hProcess eta1
                         : y ys -> case y of tpl { GHC.Types.C# ipv8 -> a1 ys eta1 } }
                   } in
                   case a1 ipv5 ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                   (# ipv8, AS.Eval.readOutput lang ipv3 ipv5 #) } } } } } }) -}
d34d8eeac51a88bca491301140c0b8ef
  evalCode :: AS.Types.ASLocation
              -> Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue
              -> AS.Types.ASExpression
              -> GHC.Types.IO AS.Types.ASValue
    {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>,
       Unfolding: (AS.Eval.evalCode1
                     `cast`
                   (<AS.Types.ASLocation>_R
                    ->_R <Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue>_R
                    ->_R <AS.Types.ASExpression>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <AS.Types.ASValue>_R))) -}
bb018929c8024dce4b5d5a839ea2324e
  evalCode1 :: AS.Types.ASLocation
               -> Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue
               -> AS.Types.ASExpression
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ASValue #)
    {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U> -}
9d8776f6dd4d23142045a41e2eaaa425
  evalCodeRepl :: AS.Types.ASExpression
                  -> GHC.Types.IO AS.Types.ASValue
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (AS.Eval.evalCodeRepl1
                     `cast`
                   (<AS.Types.ASExpression>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <AS.Types.ASValue>_R))) -}
c2b784dfc864033b19bb547f00adcd12
  evalCodeRepl1 :: AS.Types.ASExpression
                   -> GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ASValue #)
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (\ xp :: AS.Types.ASExpression
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   let {
                     lang :: AS.Types.ASLanguage
                     = case xp of wild {
                         AS.Types.Expression ds1 ds2 -> ds2
                         AS.Types.Reference ipv2 ipv3 -> AS.Types.language1 }
                   } in
                   case AS.Eval.Lang.getReplTemplate1
                          lang
                          eta of ds1 { (#,#) ipv ipv1 ->
                   let {
                     ipv2 :: GHC.Base.String
                     = AS.Eval.Lang.$wlayoutCodeFile
                         lang
                         (GHC.Types.[] @ GHC.Types.Char)
                         ipv1
                         (case xp of wild {
                            AS.Types.Expression ds2 ds3 -> ds2
                            AS.Types.Reference ipv3 ipv4 -> AS.Types.expression1 })
                   } in
                   case System.IO.writeFile1
                          (AS.Eval.Lang.getRunReplFile lang)
                          ipv2
                          ipv of ds2 { (#,#) ipv3 ipv4 ->
                   case AS.Eval.evalCodeRepl3 ipv2 ipv3 of ds3 { (#,#) ipv5 ipv6 ->
                   case AS.Eval.Lang.getReplRecord1
                          lang
                          ipv5 of ds4 { (#,#) ipv7 ipv8 ->
                   case AS.Parsing.In.parseValue lang ipv6 of wild {
                     DEFAULT
                     -> case System.IO.writeFile1
                               (AS.Eval.Lang.getReplRecordFile lang)
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  ipv8
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     AS.Eval.evalCodeRepl2
                                     (AS.Eval.Lang.removePrintStmt
                                        lang
                                        (case xp of wild1 {
                                           AS.Types.Expression ds5 ds6 -> ds5
                                           AS.Types.Reference ipv9 ipv10
                                           -> AS.Types.expression1 }))))
                               ipv7 of ds5 { (#,#) ipv9 ipv10 ->
                        (# ipv9, wild #) }
                     AS.Types.ValueError ds ds5 ds6 ds7
                     -> (# ipv7, wild #) } } } } }) -}
6f1a1e41a636a240980266f264b7d561
  evalCodeRepl2 :: GHC.Types.Char
    {- HasNoCafRefs, Unfolding: (GHC.Types.C# '\n') -}
bd6e39656e01bf868e961d2c783239e0
  evalCodeRepl3 :: GHC.Base.String
                   -> GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (\ evalStr :: GHC.Base.String
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case GHC.IO.Handle.Text.hPutStr2
                          GHC.IO.Handle.FD.stdout
                          AS.Eval.evalCodeRepl5
                          GHC.Types.True
                          s of ds1 { (#,#) ipv ipv1 ->
                   Python.defVV1
                     @ GHC.Base.String
                     @ GHC.Base.String
                     Data.Aeson.Types.Instances.$fToJSON[]0_$ctoJSON
                       `cast`
                     (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0] <[GHC.Types.Char]>_N))
                     Data.Aeson.Types.Instances.$fFromJSON[]0_$cparseJSON
                       `cast`
                     (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0]
                               <[GHC.Types.Char]>_N))
                     (GHC.Base.++ @ GHC.Types.Char evalStr AS.Eval.pyString)
                     AS.Eval.evalCodeRepl4
                     ipv }) -}
fa656c8e9a1a055f03bd7c9ba7778638
  evalCodeRepl4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "Hello"#) -}
d0d72f1e7573dfe6df9aa0a3850dfadd
  evalCodeRepl5 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "IN PYFI"#) -}
aa5a702472b4c0d63f303a6de0534f65
  evalExcel :: AS.Types.ASExpression
               -> GHC.Types.IO AS.Types.ASExpression
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (AS.Eval.evalExcel1
                     `cast`
                   (<AS.Types.ASExpression>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <AS.Types.ASExpression>_R))) -}
2622549ccd16261b46eef0b2676de58e
  evalExcel1 :: AS.Types.ASExpression
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ASExpression #)
    {- Arity: 2, Strictness: <L,1*U><L,U> -}
d57d768d17f493c3dd65aac2a0ccda7d
  evalExpression :: AS.Types.ASLocation
                    -> Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue
                    -> AS.Types.ASExpression
                    -> GHC.Types.IO AS.Types.ASValue
    {- Arity: 4, Strictness: <L,U><L,U><S,1*U><L,U>,
       Unfolding: (AS.Eval.evalExpression1
                     `cast`
                   (<AS.Types.ASLocation>_R
                    ->_R <Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue>_R
                    ->_R <AS.Types.ASExpression>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <AS.Types.ASValue>_R))) -}
1b4cf72d98e6afaabd2ad729d6ff45d2
  evalExpression1 :: AS.Types.ASLocation
                     -> Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue
                     -> AS.Types.ASExpression
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ASValue #)
    {- Arity: 4, Strictness: <L,U><L,U><S,1*U><L,U>,
       Unfolding: (\ loc :: AS.Types.ASLocation
                     dict :: Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue
                     expr :: AS.Types.ASExpression
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case expr of wild {
                     AS.Types.Expression ds ds1 -> AS.Eval.evalCode1 loc dict wild eta
                     AS.Types.Reference ds ds1
                     -> AS.Eval.evalExpression2 loc dict wild eta }) -}
d87905a6ba557f7ee59c4496af43849d
  evalExpression2 :: AS.Types.ASLocation
                     -> Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue
                     -> AS.Types.ASExpression
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ASValue #)
    {- Arity: 4, Strictness: <L,1*U><L,U><S,1*U><L,U>,
       Unfolding: (\ loc :: AS.Types.ASLocation
                     dict :: Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue
                     ds :: AS.Types.ASExpression
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ds of wild {
                     AS.Types.Expression ipv ipv1
                     -> case AS.Eval.evalExpression3
                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ASValue #)
                        of {}
                     AS.Types.Reference l ds1
                     -> case ds1 of wild1 { (,) a b ->
                        (# eta,
                           case AS.Eval.Lang.$s!1 @ AS.Types.ASValue l dict of wild2 {
                             DEFAULT -> AS.Eval.Lang.$s!1 @ AS.Types.ASValue loc dict
                             AS.Types.ValueL lst
                             -> case b of wild3 { GHC.Types.I# n0 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<# n0 0) of wild4 {
                                  GHC.Types.False
                                  -> case GHC.List.!!_sub @ AS.Types.ASValue lst n0 of wild5 {
                                       DEFAULT -> wild5
                                       AS.Types.ValueL row -> GHC.List.!! @ AS.Types.ASValue row a }
                                  GHC.Types.True
                                  -> case GHC.List.!!1
                                     ret_ty AS.Types.ASValue
                                     of {} } } } #) } }) -}
b650435c9b1113658000bc86f054b769
  evalExpression3 :: GHC.Types.IO AS.Types.ASValue
    {- Strictness: b -}
e81accd8a03e64196cc7deb965d525d2
  evalRef :: AS.Types.ASLocation
             -> Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue
             -> AS.Types.ASExpression
             -> GHC.Types.IO AS.Types.ASValue
    {- Arity: 4, Strictness: <L,1*U><L,U><S,1*U><L,U>,
       Unfolding: (AS.Eval.evalExpression2
                     `cast`
                   (<AS.Types.ASLocation>_R
                    ->_R <Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue>_R
                    ->_R <AS.Types.ASExpression>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <AS.Types.ASValue>_R))) -}
47d00c38b892b06aa42cdd29509fef34
  evalString :: AS.Types.ASLanguage
                -> GHC.Base.String
                -> GHC.Types.IO AS.Types.ASValue
    {- Arity: 3, Strictness: <L,U><L,1*U><L,U>,
       Unfolding: (AS.Eval.evalString1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R <GHC.Base.String>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <AS.Types.ASValue>_R))) -}
ec103ddd33f7749cba18341f5e55aeee
  evalString1 :: AS.Types.ASLanguage
                 -> GHC.Base.String
                 -> GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ASValue #)
    {- Arity: 3, Strictness: <L,U><L,1*U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     evalStr :: GHC.Base.String
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case AS.Eval.evalCodeRepl3 evalStr s of ds1 { (#,#) ipv ipv1 ->
                   (# ipv, AS.Parsing.In.parseValue lang ipv1 #) }) -}
809119053129580993eb48da5ef93611
  handleEval :: AS.Types.ASLanguage
                -> GHC.Base.String
                -> GHC.Types.IO GHC.Base.String
    {- Arity: 3, Strictness: <S,1*U><L,U><L,U>,
       Unfolding: (AS.Eval.handleEval1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R <GHC.Base.String>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
f251843a580a3f3b3a7bac80a0fbfb15
  handleEval1 :: AS.Types.ASLanguage
                 -> GHC.Base.String
                 -> GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 3, Strictness: <S,1*U><L,U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     str :: GHC.Base.String
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case lang of wild {
                     DEFAULT
                     -> case System.IO.writeFile1
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  AS.Config.Paths.getEvalPath
                                  (case wild of wild1 {
                                     AS.Types.R -> AS.Eval.Lang.getRunFile7
                                     AS.Types.OCaml -> AS.Eval.Lang.getRunFile5
                                     AS.Types.CPP -> AS.Eval.Lang.getRunFile4
                                     AS.Types.Java -> AS.Eval.Lang.getRunFile3 }))
                               str
                               eta of ds1 { (#,#) ipv ipv1 ->
                        case Data.Time.Clock.POSIX.getPOSIXTime1
                               ipv of ds2 { (#,#) ipv2 ipv3 ->
                        AS.Eval.handleEval3 wild ipv2 } }
                     AS.Types.Python -> AS.Eval.evalCodeRepl3 str eta
                     AS.Types.SQL
                     -> case System.IO.writeFile1
                               AS.Eval.handleEval2
                               str
                               eta of ds1 { (#,#) ipv ipv1 ->
                        case Data.Time.Clock.POSIX.getPOSIXTime1
                               ipv of ds2 { (#,#) ipv2 ipv3 ->
                        AS.Eval.evalCodeRepl3 str ipv2 } }
                     AS.Types.Excel -> AS.Eval.evalCodeRepl3 str eta }) -}
bb6a880290fa273aa623d51f264be6b6
  handleEval2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.Base.++
                     @ GHC.Types.Char
                     AS.Config.Paths.getEvalPath
                     AS.Eval.Lang.getRunFile2) -}
1c73debee20e06331f072305a3d875ef
  handleEval3 :: AS.Types.ASLanguage
                 -> GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   AS.Eval.eval1
                     (AS.Eval.Lang.addCompileCmd
                        lang
                        (AS.Eval.Lang.$wformatRunArgs
                           (AS.Eval.Lang.getRunnerCmd lang)
                           (AS.Eval.Lang.getRunFile lang)
                           (case lang of wild {
                              DEFAULT -> GHC.Types.[] @ GHC.Base.String
                              AS.Types.OCaml -> AS.Eval.Lang.getRunnerArgs8
                              AS.Types.CPP -> AS.Eval.Lang.getRunnerArgs1 })))
                     lang
                     s) -}
8fd1efa869b38eb661178ee951d28a95
  pyString :: GHC.Base.String
    {- Unfolding: (GHC.CString.unpackCString#
                     "\n\
                     \def export(x=1):\n\
                     \\treturn repr(result)"#) -}
6fbba9aeba213e5ccb88faf4d0c30245
  pyfiString :: GHC.Base.String -> GHC.Types.IO GHC.Base.String
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (AS.Eval.evalCodeRepl3
                     `cast`
                   (<GHC.Base.String>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
ad7fca9d50be60af1d7effc6827d7f5b
  readOutput :: AS.Types.ASLanguage
                -> GHC.Base.String
                -> GHC.Base.String
                -> GHC.Base.String
    {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U><L,1*U><S,1*U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     res :: GHC.Base.String
                     err :: GHC.Base.String ->
                   case err of wild {
                     [] -> res
                     : ipv ipv1
                     -> case lang of wild1 {
                          DEFAULT -> wild
                          AS.Types.Python
                          -> case res of wild2 { [] -> wild : ipv2 ipv3 -> wild2 } } }) -}
b45eacdd3dacf5579897b9ac324a944e
  runFile :: AS.Types.ASLanguage -> GHC.Types.IO GHC.Base.String
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (AS.Eval.handleEval3
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
518434dc690f0ec20fe0fe83e2b60489
  runReplFile :: AS.Types.ASLanguage -> GHC.Types.IO GHC.Base.String
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (AS.Eval.runReplFile1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
71f47c75a018449be4952fbc3243e2e3
  runReplFile1 :: AS.Types.ASLanguage
                  -> GHC.Prim.State# GHC.Prim.RealWorld
                  -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   AS.Eval.eval1
                     (case lang of wild {
                        DEFAULT -> AS.Eval.Lang.getRunnerCmdRepl1
                        AS.Types.Python -> AS.Eval.runReplFile2 })
                     lang
                     s) -}
722aaa935361799b92b2b92e25e358af
  runReplFile2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.Base.++
                     @ GHC.Types.Char
                     AS.Eval.Lang.getRunnerCmd1
                     AS.Eval.runReplFile3) -}
0cacfd077dc81f07e0b777ba48f63c33
  runReplFile3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.Base.++
                     @ GHC.Types.Char
                     AS.Eval.runReplFile5
                     AS.Eval.runReplFile4) -}
6fe508aceb674ea82bb17eb49f8e4608
  runReplFile4 :: [GHC.Types.Char]
    {- HasNoCafRefs,
       Unfolding: (GHC.Types.:
                     @ GHC.Types.Char
                     AS.Eval.Lang.formatRunArgs2
                     (GHC.Types.[] @ GHC.Types.Char)) -}
6cc50c0b4329c097824b31f1f225f9f6
  runReplFile5 :: [GHC.Types.Char]
    {- Unfolding: (GHC.Base.++
                     @ GHC.Types.Char
                     AS.Config.Paths.getEvalPath
                     AS.Eval.Lang.getRunReplFile3) -}
5491c249a86ba594e979e127e94fd5bc
  writeExecFile :: AS.Types.ASLanguage
                   -> GHC.Base.String
                   -> GHC.Types.IO ()
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (AS.Eval.writeExecFile1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R <GHC.Base.String>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
b8d97b204c7bcfa4c6ecd4b88a821b1c
  writeExecFile1 :: AS.Types.ASLanguage
                    -> GHC.Base.String
                    -> GHC.Prim.State# GHC.Prim.RealWorld
                    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     contents :: GHC.Base.String ->
                   System.IO.writeFile1 (AS.Eval.Lang.getRunFile lang) contents) -}
13adace496e4e287ef00173f417ceae7
  writeReplFile :: AS.Types.ASLanguage
                   -> GHC.Base.String
                   -> GHC.Types.IO ()
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (AS.Eval.writeReplFile1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R <GHC.Base.String>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
7cf3de6890d6ddbb97d67e3b6ee24eb3
  writeReplFile1 :: AS.Types.ASLanguage
                    -> GHC.Base.String
                    -> GHC.Prim.State# GHC.Prim.RealWorld
                    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     contents :: GHC.Base.String ->
                   System.IO.writeFile1
                     (AS.Eval.Lang.getRunReplFile lang)
                     contents) -}
e89e966ec50710f0520c3e2b35da9981
  writeReplRecord :: AS.Types.ASLanguage
                     -> GHC.Base.String
                     -> GHC.Types.IO ()
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (AS.Eval.writeReplRecord1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R <GHC.Base.String>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
87fe7207a27510a2930d4ae6ef179c32
  writeReplRecord1 :: AS.Types.ASLanguage
                      -> GHC.Base.String
                      -> GHC.Prim.State# GHC.Prim.RealWorld
                      -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     contents :: GHC.Base.String ->
                   System.IO.writeFile1
                     (AS.Eval.Lang.getReplRecordFile lang)
                     contents) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

