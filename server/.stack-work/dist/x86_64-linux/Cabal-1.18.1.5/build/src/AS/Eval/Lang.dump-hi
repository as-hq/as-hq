
==================== FINAL INTERFACE ====================
2015-09-25 00:27:15.919029 UTC

interface alphasheets-0.1.0.0:AS.Eval.Lang [orphan module] 7084
  interface hash: 66f413a8185b8dce24fd844b7e7eb516
  ABI hash: 1ebaeacd881c235fd2a8983da5e9d146
  export-list hash: 1de0d43afedb183b51cd3a9e0a515463
  orphan hash: 03a0f22a648e6caee42906a9dd7ff352
  flag hash: e156f5ccc0a4b7238641a9085ca60f8f
  used TH splices: False
  where
exports:
  AS.Eval.Lang.addCompileCmd
  AS.Eval.Lang.formatRunArgs
  AS.Eval.Lang.getReplRecord
  AS.Eval.Lang.getReplRecordFile
  AS.Eval.Lang.getReplTemplate
  AS.Eval.Lang.getRunFile
  AS.Eval.Lang.getRunReplFile
  AS.Eval.Lang.getRunnerArgs
  AS.Eval.Lang.getRunnerCmd
  AS.Eval.Lang.getRunnerCmdRepl
  AS.Eval.Lang.getTemplate
  AS.Eval.Lang.importFile
  AS.Eval.Lang.insertPrintCmd
  AS.Eval.Lang.interpolate
  AS.Eval.Lang.interpolateFile
  AS.Eval.Lang.interpolateFileRepl
  AS.Eval.Lang.layoutCodeFile
  AS.Eval.Lang.lookupString
  AS.Eval.Lang.pid
  AS.Eval.Lang.printCmd
  AS.Eval.Lang.splitLastCmd
module dependencies: AS.Config.Paths AS.Parsing.Common
                     AS.Parsing.Out AS.Types AS.Util
package dependencies: BoundedChan-1.0.3.0 SHA-1.6.4.2 aeson-0.8.1.1
                      array-0.5.0.0 attoparsec-0.13.0.1 base base64-bytestring-1.0.0.1
                      binary-0.7.1.0 blaze-builder-0.4.0.1 bytestring-0.10.4.0
                      bytestring-lexing-0.5.0.2 case-insensitive-1.2.0.4
                      containers-0.5.5.1 deepseq-1.3.0.2 directory-1.2.2.1 dlist-0.7.1.1
                      entropy-0.3.7 filepath-1.3.0.2 ghc-prim hashable-1.2.3.3
                      hedis-0.6.9 integer-gmp monad-control-1.0.0.4 mtl-2.2.1
                      network-2.6.2.1 parsec-3.1.9 primitive-0.6 random-1.1
                      regex-base-0.93.2 regex-posix-0.95.2 resource-pool-0.2.3.2
                      scientific-0.3.3.8 split-0.2.2 stm-2.4.4 strict-0.3.2 text-1.2.1.1
                      time-1.5.0.1 transformers-0.4.3.0 transformers-base-0.4.4
                      unix-2.7.1.0 unordered-containers-0.2.5.1 uuid-1.3.10
                      uuid-types-1.0.1 vector-0.11.0.0 websockets-0.9.5.0
orphans: aeson-0.8.1.1:Data.Aeson.Types.Generic
         aeson-0.8.1.1:Data.Aeson.Types.Instances
         aeson-0.8.1.1:Data.Aeson.Types.Internal
         attoparsec-0.13.0.1:Data.Attoparsec.ByteString.Char8 base:GHC.Base
         base:GHC.Float base:GHC.Real binary-0.7.1.0:Data.Binary.Generic
         bytestring-0.10.4.0:Data.ByteString.Builder
         bytestring-lexing-0.5.0.2:Data.ByteString.Lex.Fractional
         hashable-1.2.3.3:Data.Hashable.Generic
         network-2.6.2.1:Network.Socket network-2.6.2.1:Network.Socket.Types
         random-1.1:System.Random regex-base-0.93.2:Text.Regex.Base.Context
         regex-posix-0.95.2:Text.Regex.Posix.ByteString
         regex-posix-0.95.2:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2:Text.Regex.Posix.Sequence
         regex-posix-0.95.2:Text.Regex.Posix.String
         resource-pool-0.2.3.2:Data.Pool stm-2.4.4:Control.Monad.STM
         text-1.2.1.1:Data.Text text-1.2.1.1:Data.Text.Lazy
         text-1.2.1.1:Data.Text.Show
         time-1.5.0.1:Data.Time.Calendar.Gregorian
         time-1.5.0.1:Data.Time.Format.Parse
         time-1.5.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.4.3.0:Control.Monad.Trans.Error
         vector-0.11.0.0:Data.Vector.Fusion.Bundle
         vector-0.11.0.0:Data.Vector.Unboxed
family instance modules: alphasheets-0.1.0.0:AS.Types
                         attoparsec-0.13.0.1:Data.Attoparsec.Internal.Types
                         base:Control.Applicative base:Data.Either base:Data.Monoid
                         base:Data.Type.Equality base:GHC.Exts base:GHC.Generics
                         dlist-0.7.1.1:Data.DList
                         monad-control-1.0.0.4:Control.Monad.Trans.Control
                         primitive-0.6:Control.Monad.Primitive text-1.2.1.1:Data.Text
                         text-1.2.1.1:Data.Text.Lazy
                         unordered-containers-0.2.5.1:Data.HashMap.Base
                         unordered-containers-0.2.5.1:Data.HashSet
                         uuid-types-1.0.1:Data.UUID.Types.Internal
                         uuid-types-1.0.1:Data.UUID.Types.Internal.Builder
                         vector-0.11.0.0:Data.Vector vector-0.11.0.0:Data.Vector.Primitive
                         vector-0.11.0.0:Data.Vector.Storable
                         vector-0.11.0.0:Data.Vector.Unboxed
                         vector-0.11.0.0:Data.Vector.Unboxed.Base
import  -/  AS.Config.Paths 383b11f52f4251137d3fdd3ce58b74ae
  exports: fbf8dc02266f89ec0a8c7dc0738f3506
  getEvalPath 7353a2e4f49205b5eb641c2519c25d1b
import  -/  AS.Parsing.Common ceccfbae6a55ecc56f531616855b9b06
  exports: b53f07d91299e788b6ffa7cfbc3e8f8f
  replaceSubstrings 8848774ecf4804a2083b49a660e4dff1
import  -/  AS.Parsing.Out dd270cee574919ef59c3b5c824275231
  exports: b4cc2ee9878e9c201d4134316c957a72
  exLocToASLocation 31e174c69836028e375c5dade213c1d6
  excelMatch 9b9ec9f71fb465c6567bd9be87fbfd23
  getBlockDelim 99460ec4bb5c3904f438bbb01854e375
  getInlineDelim e99d28e9ee60e9c277dec9de78688056
  getMatchesWithContext 577784235c207381cf34d48eb7d1e701
  modifiedLists d5eb139460c0dd6fbc979cde07dd23d4
  replaceMatches efc937eaa950cd7daac838c89238cffe
  showFilteredValue d74e087cc4c3fbf95e2a35b96f634186
  toListStr 7af97889165fd0aef2fce7a5d8161b75
import  -/  AS.Types ac0aeb8d2661160e6345f7fec8fc36e5
  exports: 4f33e2305e9f32540a30fe3603c0662c
  ASExpression 64e605941635d5560dadb6b522a83662
  ASLanguage 37e5d158f6c905c972eb637f34e85db0
  ASLocation 42b88bd590b6186a8f42af5a0deb461a
  ASSheetId 4ed60fa4a266e9c370748b465970547f
  ASValue cf27945d6d550d5b2c4aa963af53bf25
  CPP b4a4c8f2505bf40c7d27cb4849687ddb
  Excel 42d5319c0fb1ce752e5a0b3af0288451
  Index 32bc2c9c50c80ae6c93286c30ef7b208
  Java 8a2cf7ad3bb81f17585e28b4cccb5ba5
  OCaml 5b3b1ae20cfc4a6a1a4504a2b84e1b52
  Python ac7cdaae311730879724e4fbfab50a2b
  R 92cf8dcce290a7851ccef94628c17c64
  Range 1619818a9064827107fb6d04d8e72cf3
  SQL e4a5a897edfd83a9739604cfeb3dd472
  expression 6ea1c8a95a3119194a24a1b062d4f02c
  language 96d4cc4ee6772e20c09c6cc6a5feae9a
import  -/  base:Control.Applicative 30b769206cb5c020684e1bda0d7e7dd3
import  -/  base:Data.List 8b77870d02d66076337587b759b7ee19
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:GHC.List 4cff382327e59a5787355ca0a4174450
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  base:System.IO cadd0efb01c47ddd8f52d750739fdbdf
import  -/  containers-0.5.5.1:Data.Map 39e9346954b9366e01d2c8afb617e216
import  -/  containers-0.5.5.1:Data.Map.Base 4216c6c0396261d88891bb4aaa09340a
import  -/  directory-1.2.2.1:System.Directory 2c067e3baa72dc2e9bfa0bef5698bda8
import  -/  ghc-prim:GHC.Classes 3e6cbe1e7e80480408cfa8d5450726a0
import  -/  ghc-prim:GHC.Types dcba736fa3dfba12d307ab18354845d2
import  -/  split-0.2.2:Data.List.Split 9e8c4182840695ff3a75320d1faeebd2
import  -/  strict-0.3.2:System.IO.Strict 6b5a72a75edb9ef12af62d8397ba0f30
import  -/  text-1.2.1.1:Data.Text ddf865ef7152d1de0d03707558cc6523
import  -/  text-1.2.1.1:Data.Text.Show 5e3bc9590794e8c16cd05f65f5a80f3c
import  -/  transformers-0.4.3.0:Control.Monad.IO.Class 1fe01dea961eadb0b037d705f6cb22bb
50318a5d5e278855e24cfbcfcd1e285b
  $s! :: Data.Map.Base.Map AS.Types.ASLocation a
         -> AS.Types.ASLocation
         -> a
    {- Arity: 2, Strictness: <S,1*U><S,1*U>,
       Unfolding: (\ @ a
                     m :: Data.Map.Base.Map AS.Types.ASLocation a
                     k1 :: AS.Types.ASLocation ->
                   AS.Eval.Lang.$s!1 @ a k1 m) -}
bd6888c22e80366eea5db10300240d99
  $s!1 :: AS.Types.ASLocation
          -> Data.Map.Base.Map AS.Types.ASLocation a
          -> a
    {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
a39b922645959a9bf1a17fac53a6194f
  $sfind :: AS.Types.ASLocation
            -> Data.Map.Base.Map AS.Types.ASLocation a
            -> a
    {- Arity: 2, Strictness: <S,1*U><S,1*U>,
       Unfolding: (\ @ a
                     eta :: AS.Types.ASLocation
                     eta1 :: Data.Map.Base.Map AS.Types.ASLocation a ->
                   AS.Eval.Lang.$s!1 @ a eta eta1) -}
c0185813cdbb6116204fc0d1ea7b6227
  $wformatRunArgs :: GHC.Base.String
                     -> GHC.Base.String
                     -> [GHC.Base.String]
                     -> [GHC.Types.Char]
    {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,1*U><L,1*U>,
       Unfolding: (\ w :: GHC.Base.String
                     w1 :: GHC.Base.String
                     w2 :: [GHC.Base.String] ->
                   GHC.Base.++
                     @ GHC.Types.Char
                     w
                     (GHC.Base.++
                        @ GHC.Types.Char
                        w1
                        (GHC.Types.:
                           @ GHC.Types.Char
                           AS.Eval.Lang.formatRunArgs2
                           (case w2 of wild {
                              [] -> GHC.Types.[] @ GHC.Types.Char
                              : x xs1
                              -> Data.List.intercalate_$spoly_go
                                   @ GHC.Types.Char
                                   x
                                   (Data.List.prependToAll
                                      @ [GHC.Types.Char]
                                      AS.Eval.Lang.formatRunArgs1
                                      xs1) })))) -}
987ca815c390fc944e5e724cbcf4810e
  $wimportFile :: AS.Types.ASLanguage
                  -> GHC.Base.String
                  -> GHC.Base.String
                  -> GHC.Base.String
                  -> GHC.Base.String
    {- Arity: 4, Strictness: <S,1*U><L,U><L,U><L,1*U> -}
0700c89c63648e9af77435e01b801c78
  $wlayoutCodeFile :: AS.Types.ASLanguage
                      -> GHC.Base.String
                      -> GHC.Base.String
                      -> GHC.Base.String
                      -> GHC.Base.String
    {- Arity: 4, Strictness: <S,1*U><L,U><L,U><L,U>,
       Unfolding: (\ w :: AS.Types.ASLanguage
                     ww :: GHC.Base.String
                     ww1 :: GHC.Base.String
                     ww2 :: GHC.Base.String ->
                   case w of wild {
                     DEFAULT
                     -> Data.List.intercalate_$spoly_go
                          @ GHC.Types.Char
                          ww
                          (Data.List.prependToAll
                             @ [GHC.Types.Char]
                             AS.Eval.Lang.interpolateFile5
                             (GHC.Types.:
                                @ [GHC.Types.Char]
                                ww1
                                (GHC.Types.:
                                   @ [GHC.Types.Char]
                                   ww2
                                   (GHC.Types.[] @ [GHC.Types.Char]))))
                     AS.Types.R
                     -> AS.Parsing.Common.replaceSubstrings
                          (Data.List.intercalate_$spoly_go
                             @ GHC.Types.Char
                             ww
                             (Data.List.prependToAll
                                @ [GHC.Types.Char]
                                AS.Eval.Lang.interpolateFile5
                                (GHC.Types.:
                                   @ [GHC.Types.Char]
                                   ww1
                                   (GHC.Types.[] @ [GHC.Types.Char]))))
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (AS.Eval.Lang.interpolateFile7, ww2)
                             (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)))
                     AS.Types.Python
                     -> AS.Parsing.Common.replaceSubstrings
                          (Data.List.intercalate_$spoly_go
                             @ GHC.Types.Char
                             ww
                             (Data.List.prependToAll
                                @ [GHC.Types.Char]
                                AS.Eval.Lang.interpolateFile5
                                (GHC.Types.:
                                   @ [GHC.Types.Char]
                                   ww1
                                   (GHC.Types.[] @ [GHC.Types.Char]))))
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (AS.Eval.Lang.interpolateFile7,
                              AS.Parsing.Common.replaceSubstrings
                                ww2
                                AS.Eval.Lang.interpolateFile2)
                             (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)))
                     AS.Types.SQL
                     -> AS.Parsing.Common.replaceSubstrings
                          (Data.List.intercalate_$spoly_go
                             @ GHC.Types.Char
                             ww
                             (Data.List.prependToAll
                                @ [GHC.Types.Char]
                                AS.Eval.Lang.interpolateFile5
                                (GHC.Types.:
                                   @ [GHC.Types.Char]
                                   ww1
                                   (GHC.Types.[] @ [GHC.Types.Char]))))
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (AS.Eval.Lang.interpolateFile7,
                              AS.Parsing.Common.replaceSubstrings
                                ww2
                                AS.Eval.Lang.interpolateFile2)
                             (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)))
                     AS.Types.Excel
                     -> AS.Parsing.Common.replaceSubstrings
                          (Data.List.intercalate_$spoly_go
                             @ GHC.Types.Char
                             ww
                             (Data.List.prependToAll
                                @ [GHC.Types.Char]
                                AS.Eval.Lang.interpolateFile5
                                (GHC.Types.:
                                   @ [GHC.Types.Char]
                                   ww1
                                   (GHC.Types.[] @ [GHC.Types.Char]))))
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (AS.Eval.Lang.interpolateFile7,
                              AS.Parsing.Common.replaceSubstrings
                                ww2
                                AS.Eval.Lang.interpolateFile2)
                             (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))) }) -}
8433fdcbc3c8189d90313cabf8dcec68
  $wsplitLastCmd :: AS.Types.ASLanguage
                    -> GHC.Base.String
                    -> (# GHC.Base.String, GHC.Base.String #)
    {- Arity: 2, Strictness: <L,U><L,1*U> -}
0a6aa945f246491ee0b44d95715ee5f7
  addCompileCmd :: AS.Types.ASLanguage
                   -> GHC.Base.String
                   -> GHC.Types.IO GHC.Base.String
    {- Arity: 3, Strictness: <L,1*U><L,1*U><L,U>,
       Unfolding: (AS.Eval.Lang.addCompileCmd1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R <GHC.Base.String>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
aca2b08b0a6c3486104d2a9524b6118d
  addCompileCmd1 :: AS.Types.ASLanguage
                    -> GHC.Base.String
                    -> GHC.Prim.State# GHC.Prim.RealWorld
                    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 3, Strictness: <L,1*U><L,1*U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     cmd :: GHC.Base.String
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case System.Posix.Directory.getWorkingDirectory1
                          eta of ds1 { (#,#) ipv ipv1 ->
                   (# ipv,
                      case lang of wild {
                        DEFAULT -> cmd
                        AS.Types.OCaml
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             cmd
                             (GHC.CString.unpackAppendCString#
                                "; "#
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   (System.FilePath.Posix.combine ipv1 AS.Config.Paths.getEvalPath2)
                                   AS.Eval.Lang.addCompileCmd3))
                        AS.Types.Java
                        -> GHC.CString.unpackAppendCString#
                             "cd "#
                             (GHC.Base.++
                                @ GHC.Types.Char
                                (System.FilePath.Posix.combine ipv1 AS.Config.Paths.getEvalPath2)
                                (GHC.CString.unpackAppendCString#
                                   "java/ && "#
                                   (GHC.Base.++
                                      @ GHC.Types.Char
                                      cmd
                                      AS.Eval.Lang.addCompileCmd2))) } #) }) -}
26617ec837758d5d1e7a8fbfceed5e9c
  addCompileCmd2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# " && java Temp"#) -}
d7163dd354e4e19b6eb7212d4d0a7140
  addCompileCmd3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "ocaml/test"#) -}
f54e19cf0001a7d6c48fb28c54b6d91c
  formatRunArgs :: AS.Types.ASLanguage
                   -> GHC.Base.String
                   -> GHC.Base.String
                   -> [GHC.Base.String]
                   -> GHC.Base.String
    {- Arity: 4, HasNoCafRefs, Strictness: <L,A><S,1*U><L,1*U><L,1*U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (4, True, True)
                  (\ w :: AS.Types.ASLanguage
                     w1 :: GHC.Base.String
                     w2 :: GHC.Base.String
                     w3 :: [GHC.Base.String] ->
                   AS.Eval.Lang.$wformatRunArgs w1 w2 w3) -}
f1438862d1c1fe91429eec413e07cd20
  formatRunArgs1 :: [GHC.Types.Char]
    {- HasNoCafRefs, Strictness: m2,
       Unfolding: (GHC.Types.:
                     @ GHC.Types.Char
                     AS.Eval.Lang.formatRunArgs2
                     (GHC.Types.[] @ GHC.Types.Char)) -}
69f74ce6cf9fe84aef835e28823bb019
  formatRunArgs2 :: GHC.Types.Char
    {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ' ') -}
931a82e496c7a9157c4471bfed80bd3f
  getReplRecord :: AS.Types.ASLanguage
                   -> GHC.Types.IO GHC.Base.String
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (AS.Eval.Lang.getReplRecord1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
cc43825407758a3f0ec010eaf4914bb8
  getReplRecord1 :: AS.Types.ASLanguage
                    -> GHC.Prim.State# GHC.Prim.RealWorld
                    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case System.Posix.Directory.getWorkingDirectory1
                          eta of ds1 { (#,#) ipv ipv1 ->
                   case GHC.IO.Handle.FD.openFile1
                          (GHC.Base.++
                             @ GHC.Types.Char
                             (System.FilePath.Posix.combine ipv1 AS.Config.Paths.getEvalPath2)
                             (case lang of wild {
                                DEFAULT -> AS.Eval.Lang.getReplRecord3
                                AS.Types.Python -> AS.Eval.Lang.getReplRecord2 }))
                          GHC.IO.IOMode.ReadMode
                          ipv of ds2 { (#,#) ipv2 ipv3 ->
                   System.IO.Strict.hGetContents1 ipv3 ipv2 } }) -}
36bb7c0782bd224fa10a0e1073979ee7
  getReplRecord2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "py/repl_record.py"#) -}
65f1484d596d5f777bd6af4c87fabca6
  getReplRecord3 :: [GHC.Types.Char] {- Strictness: b -}
24fa1ea45956553ed9dcd6c20dff38e7
  getReplRecordFile :: AS.Types.ASLanguage
                       -> GHC.Types.IO GHC.Base.String
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (AS.Eval.Lang.getReplRecordFile1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
20237f1affa0fe85974d4217c1fd9864
  getReplRecordFile1 :: AS.Types.ASLanguage
                        -> GHC.Prim.State# GHC.Prim.RealWorld
                        -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case System.Posix.Directory.getWorkingDirectory1
                          eta of ds1 { (#,#) ipv ipv1 ->
                   (# ipv,
                      GHC.Base.++
                        @ GHC.Types.Char
                        (System.FilePath.Posix.combine ipv1 AS.Config.Paths.getEvalPath2)
                        (case lang of wild {
                           DEFAULT -> AS.Eval.Lang.getReplRecordFile2
                           AS.Types.Python -> AS.Eval.Lang.getReplRecord2 }) #) }) -}
2692cd47a587720405e217c89a366f24
  getReplRecordFile2 :: [GHC.Types.Char] {- Strictness: b -}
bb84dbda4f118265010c35a8fbf25af9
  getReplTemplate :: AS.Types.ASLanguage
                     -> GHC.Types.IO GHC.Base.String
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (AS.Eval.Lang.getReplTemplate1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
dbbfaecead9959e613927a06a2a79227
  getReplTemplate1 :: AS.Types.ASLanguage
                      -> GHC.Prim.State# GHC.Prim.RealWorld
                      -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case System.Posix.Directory.getWorkingDirectory1
                          eta of ds1 { (#,#) ipv ipv1 ->
                   case GHC.IO.Handle.FD.openFile1
                          (GHC.Base.++
                             @ GHC.Types.Char
                             (System.FilePath.Posix.combine ipv1 AS.Config.Paths.getEvalPath2)
                             (case lang of wild {
                                AS.Types.R -> AS.Eval.Lang.getReplTemplate8
                                AS.Types.Python -> AS.Eval.Lang.getReplTemplate7
                                AS.Types.OCaml -> AS.Eval.Lang.getReplTemplate6
                                AS.Types.CPP -> AS.Eval.Lang.getReplTemplate5
                                AS.Types.Java -> AS.Eval.Lang.getReplTemplate4
                                AS.Types.SQL -> AS.Eval.Lang.getReplTemplate3
                                AS.Types.Excel -> AS.Eval.Lang.getReplTemplate2 }))
                          GHC.IO.IOMode.ReadMode
                          ipv of ds2 { (#,#) ipv2 ipv3 ->
                   GHC.IO.Handle.Text.hGetContents1 ipv3 ipv2 } }) -}
f1744286d059cd528bfdb6d25f51343b
  getReplTemplate2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "excel/template_repl.py"#) -}
1fc92b32c27f7cb651c56882e3e27cfb
  getReplTemplate3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "sql/template_repl.py"#) -}
035929deb48b25c282cfcfd7e915f0cf
  getReplTemplate4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "java/Template_repl.java"#) -}
04179e0a89334bd7acee2c50ac9c0e4b
  getReplTemplate5 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "cpp/template_repl.cpp"#) -}
8eb2ad2f43be9e93c813e5d8c08dc18c
  getReplTemplate6 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "ocaml/template_repl.ml"#) -}
e8b4743e03d1de277fd5a3e4cffccd21
  getReplTemplate7 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "py/template_repl.py"#) -}
0f5e2014710f02a11ef0fc3824d7ed38
  getReplTemplate8 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "r/template_repl.r"#) -}
6a3564ced5bf0451a37a7ca3b72b77b3
  getRunFile :: AS.Types.ASLanguage -> GHC.Types.IO GHC.Base.String
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (AS.Eval.Lang.getRunFile1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
0c4f0f661dbbf8e432711775110efd75
  getRunFile1 :: AS.Types.ASLanguage
                 -> GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case System.Posix.Directory.getWorkingDirectory1
                          eta of ds1 { (#,#) ipv ipv1 ->
                   (# ipv,
                      GHC.Base.++
                        @ GHC.Types.Char
                        (System.FilePath.Posix.combine ipv1 AS.Config.Paths.getEvalPath2)
                        (case lang of wild {
                           AS.Types.R -> AS.Eval.Lang.getRunFile8
                           AS.Types.Python -> AS.Eval.Lang.getRunFile7
                           AS.Types.OCaml -> AS.Eval.Lang.getRunFile6
                           AS.Types.CPP -> AS.Eval.Lang.getRunFile5
                           AS.Types.Java -> AS.Eval.Lang.getRunFile4
                           AS.Types.SQL -> AS.Eval.Lang.getRunFile3
                           AS.Types.Excel -> AS.Eval.Lang.getRunFile2 }) #) }) -}
284c69fc5a2ab9d48304d61963ab30c6
  getRunFile2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "excel/temp.py"#) -}
b1c9944c775a12602034c8a85c1f4df1
  getRunFile3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "sql/temp.py"#) -}
e021480cc341232fa56e1bdb2ae133b0
  getRunFile4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "java/Temp.java"#) -}
f9d93801263d4bcbe51f5cd5acf8c4e9
  getRunFile5 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "cpp/temp.cpp"#) -}
0455ef835e4280fb7b9ce08c58f0e43b
  getRunFile6 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "ocaml/temp.ml"#) -}
43bab6f0e25ac3247ef88e5d73877f5b
  getRunFile7 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "py/temp.py"#) -}
377f67c591deaa5387cb9fe4b8e2ead7
  getRunFile8 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "r/temp.r"#) -}
df11a428981a690a0953ccf198e8cc11
  getRunReplFile :: AS.Types.ASLanguage
                    -> GHC.Types.IO GHC.Base.String
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (AS.Eval.Lang.getRunReplFile1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
39c4bf85bd111bbef9600635feef4109
  getRunReplFile1 :: AS.Types.ASLanguage
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case System.Posix.Directory.getWorkingDirectory1
                          eta of ds1 { (#,#) ipv ipv1 ->
                   (# ipv,
                      GHC.Base.++
                        @ GHC.Types.Char
                        (System.FilePath.Posix.combine ipv1 AS.Config.Paths.getEvalPath2)
                        (case lang of wild {
                           DEFAULT -> AS.Eval.Lang.getRunReplFile6
                           AS.Types.R -> AS.Eval.Lang.getRunReplFile5
                           AS.Types.Python -> AS.Eval.Lang.getRunReplFile4
                           AS.Types.OCaml -> AS.Eval.Lang.getRunReplFile3
                           AS.Types.SQL -> AS.Eval.Lang.getRunReplFile2 }) #) }) -}
0842355711491e1e8fc3e5b370075ab8
  getRunReplFile2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "sql/temp_repl.py"#) -}
4083439739117afd6c1bf56651c6787a
  getRunReplFile3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "ocaml/temp_repl.ml"#) -}
227faa0a634b47fdf92d148668b84769
  getRunReplFile4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "py/temp_repl.py"#) -}
c80f4e3c49d1e0e0ea3ed287616b6691
  getRunReplFile5 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "r/temp_repl.r"#) -}
7964336214c137f18dc03580a83b7081
  getRunReplFile6 :: [GHC.Types.Char] {- Strictness: b -}
f0dff3b39a992c21f6c0da4074c830eb
  getRunnerArgs :: AS.Types.ASLanguage
                   -> GHC.Types.IO [GHC.Base.String]
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (AS.Eval.Lang.getRunnerArgs1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <[GHC.Base.String]>_R))) -}
3bbf03f3a12823c3ab740ecf81e3ac61
  getRunnerArgs1 :: AS.Types.ASLanguage
                    -> GHC.Prim.State# GHC.Prim.RealWorld
                    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Base.String] #)
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case System.Posix.Directory.getWorkingDirectory1
                          eta of ds1 { (#,#) ipv ipv1 ->
                   (# ipv,
                      case lang of wild {
                        DEFAULT -> GHC.Types.[] @ [GHC.Types.Char]
                        AS.Types.OCaml
                        -> GHC.Types.:
                             @ [GHC.Types.Char]
                             (GHC.CString.unpackAppendCString#
                                "-o "#
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   (System.FilePath.Posix.combine ipv1 AS.Config.Paths.getEvalPath2)
                                   AS.Eval.Lang.addCompileCmd3))
                             (GHC.Types.[] @ [GHC.Types.Char])
                        AS.Types.CPP
                        -> GHC.Types.:
                             @ [GHC.Types.Char]
                             (GHC.CString.unpackAppendCString#
                                "-o "#
                                (let {
                                   path :: [GHC.Types.Char]
                                   = GHC.Base.++
                                       @ GHC.Types.Char
                                       (System.FilePath.Posix.combine
                                          ipv1
                                          AS.Config.Paths.getEvalPath2)
                                       AS.Eval.Lang.getRunnerArgs3
                                 } in
                                 GHC.Base.++
                                   @ GHC.Types.Char
                                   path
                                   (GHC.CString.unpackAppendCString#
                                      "testCPP && "#
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         path
                                         AS.Eval.Lang.getRunnerArgs2))))
                             (GHC.Types.[] @ [GHC.Types.Char]) } #) }) -}
db1cab5916522034098fea45550f1839
  getRunnerArgs2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "testCPP"#) -}
3ac6294c7d33c2dde356c55681bcd21d
  getRunnerArgs3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "cpp/"#) -}
607e49ed3fa2fab17bb4d975c4e808cf
  getRunnerCmd :: AS.Types.ASLanguage -> GHC.Base.String
    {- Arity: 1, Strictness: <S,1*U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage ->
                   case lang of wild {
                     AS.Types.R -> AS.Eval.Lang.getRunnerCmd6
                     AS.Types.Python -> AS.Eval.Lang.getRunnerCmd5
                     AS.Types.OCaml -> AS.Eval.Lang.getRunnerCmd4
                     AS.Types.CPP -> AS.Eval.Lang.getRunnerCmd3
                     AS.Types.Java -> AS.Eval.Lang.getRunnerCmd2
                     AS.Types.SQL -> AS.Eval.Lang.getRunnerCmd1
                     AS.Types.Excel -> AS.Eval.Lang.getRunnerCmd1 }) -}
dc4129a7c0ae2fdf36221588e44e387c
  getRunnerCmd1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "python "#) -}
90ff6b04ea32e35adef9146052649111
  getRunnerCmd2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "javac "#) -}
0ce2bfe777a358191554d580ce84cdfa
  getRunnerCmd3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "g++ -std=c++11 "#) -}
7eb7c0989b91eba6edce5105942ff344
  getRunnerCmd4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "ocamlfind ocamlc -linkpkg -thread -package extlib -package core "#) -}
e434c97be314297fa42f651e287ce486
  getRunnerCmd5 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "python -u "#) -}
80d796d7ce762bbd5716b122abe722aa
  getRunnerCmd6 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "Rscript "#) -}
78a001cdd3ffed504cb0407d47e9958b
  getRunnerCmdRepl :: AS.Types.ASLanguage -> GHC.Base.String
    {- Arity: 1, Strictness: <S,1*U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage ->
                   case lang of wild {
                     DEFAULT -> AS.Eval.Lang.getRunnerCmdRepl1
                     AS.Types.Python -> AS.Eval.Lang.getRunnerCmd1 }) -}
508dd83d903426a75f7d042111e5966f
  getRunnerCmdRepl1 :: GHC.Base.String {- Strictness: b -}
d9aaead2c17b8141e317da008e5caf99
  getTemplate :: AS.Types.ASLanguage -> GHC.Types.IO GHC.Base.String
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (AS.Eval.Lang.getTemplate1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
89166714a293fbad98bb2ddc1b68ad33
  getTemplate1 :: AS.Types.ASLanguage
                  -> GHC.Prim.State# GHC.Prim.RealWorld
                  -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case System.Posix.Directory.getWorkingDirectory1
                          eta of ds1 { (#,#) ipv ipv1 ->
                   case GHC.IO.Handle.FD.openFile1
                          (GHC.Base.++
                             @ GHC.Types.Char
                             (System.FilePath.Posix.combine ipv1 AS.Config.Paths.getEvalPath2)
                             (case lang of wild {
                                AS.Types.R -> AS.Eval.Lang.getTemplate8
                                AS.Types.Python -> AS.Eval.Lang.getTemplate7
                                AS.Types.OCaml -> AS.Eval.Lang.getTemplate6
                                AS.Types.CPP -> AS.Eval.Lang.getTemplate5
                                AS.Types.Java -> AS.Eval.Lang.getTemplate4
                                AS.Types.SQL -> AS.Eval.Lang.getTemplate3
                                AS.Types.Excel -> AS.Eval.Lang.getTemplate2 }))
                          GHC.IO.IOMode.ReadMode
                          ipv of ds2 { (#,#) ipv2 ipv3 ->
                   GHC.IO.Handle.Text.hGetContents1 ipv3 ipv2 } }) -}
7ac69e60a88ede26e9f98c25340c8f7d
  getTemplate2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "excel/template.py"#) -}
116025b613024632786fd5ebd08c6788
  getTemplate3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "sql/template.py"#) -}
d42aca9c2e0aa7f7f6d86e58b2097af0
  getTemplate4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "java/Template.java"#) -}
34e24dc31d33f316d9030022a654ae47
  getTemplate5 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "cpp/template.cpp"#) -}
bc6034fe3ad59a7c5f48debb91834069
  getTemplate6 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "ocaml/template.ml"#) -}
387d938150c93b8a725a42e097f701f7
  getTemplate7 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "py/template.py"#) -}
2c4b55a8ed691933a3a5ed07e1616efd
  getTemplate8 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "r/template.r"#) -}
30de9111ff117c8e4619083d07933e61
  importFile :: AS.Types.ASLanguage
                -> (GHC.Base.String, GHC.Base.String, GHC.Base.String)
                -> GHC.Base.String
    {- Arity: 2, Strictness: <S,1*U><S,1*U(U,U,1*U)>,
       Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: AS.Types.ASLanguage
                     w1 :: (GHC.Base.String, GHC.Base.String, GHC.Base.String) ->
                   case w1 of ww { (,,) ww1 ww2 ww3 ->
                   AS.Eval.Lang.$wimportFile w ww1 ww2 ww3 }) -}
7b2a99d58da51d78b5827d5900a4db73
  insertPrintCmd :: AS.Types.ASLanguage
                    -> (GHC.Base.String, GHC.Base.String)
                    -> GHC.Base.String
    {- Arity: 2, Strictness: <L,1*U><S(SL),1*U(1*U,U)>,
       Unfolding: InlineRule (2, True, False)
                  (\ lang :: AS.Types.ASLanguage
                     ds :: (GHC.Base.String, GHC.Base.String) ->
                   case ds of wild { (,) s lst ->
                   GHC.Base.augment
                     @ GHC.Types.Char
                     (\ @ b c :: GHC.Types.Char -> b -> b n :: b ->
                      GHC.Base.foldr @ GHC.Types.Char @ b c n s)
                     (AS.Eval.Lang.printCmd lang lst) }) -}
f02601ac379c0b3462501d2ede9fa5f1
  interpolate :: AS.Types.ASSheetId
                 -> Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue
                 -> AS.Types.ASExpression
                 -> GHC.Base.String
    {- Arity: 3, Strictness: <L,U><L,U><L,U>,
       Unfolding: (\ sheetid :: AS.Types.ASSheetId
                     values :: Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue
                     xp :: AS.Types.ASExpression ->
                   case AS.Parsing.Out.getMatchesWithContext
                          @ AS.Types.ExLoc
                          (case xp of wild {
                             AS.Types.Expression ds1 ds2 -> ds1
                             AS.Types.Reference ipv3 ipv4 -> AS.Types.expression1 })
                          AS.Parsing.Out.excelMatch1
                            `cast`
                          (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                                    <Data.Text.Internal.Text>_R
                                    <()>_R
                                    <Data.Functor.Identity.Identity>_R
                                    <AS.Types.ExLoc>_R)) of wild { (,) inter matches ->
                   AS.Parsing.Out.getDependenciesAndExpressions_blend
                     inter
                     (GHC.Base.map
                        @ AS.Types.ExLoc
                        @ [GHC.Types.Char]
                        (let {
                           a :: AS.Types.ASLanguage
                           = case xp of wild1 {
                               AS.Types.Expression ds1 ds2 -> ds2
                               AS.Types.Reference ipv3 ipv4 -> AS.Types.language1 }
                         } in
                         \ x :: AS.Types.ExLoc ->
                         AS.Eval.Lang.lookupString
                           a
                           values
                           (AS.Parsing.Out.exLocToASLocation sheetid x))
                        matches) }) -}
21dddf0e4170799c2989f52fcc5221fb
  interpolateFile :: AS.Types.ASLanguage
                     -> GHC.Base.String
                     -> GHC.Types.IO GHC.Base.String
    {- Arity: 3, Strictness: <L,U><L,1*U><L,U>,
       Unfolding: (AS.Eval.Lang.interpolateFile1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R <GHC.Base.String>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
f1b77e3a01b272949ae9b49be71ed333
  interpolateFile1 :: AS.Types.ASLanguage
                      -> GHC.Base.String
                      -> GHC.Prim.State# GHC.Prim.RealWorld
                      -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 3, Strictness: <L,U><L,1*U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     execCmd :: GHC.Base.String
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case AS.Eval.Lang.getTemplate1 lang eta of ds1 { (#,#) ipv ipv1 ->
                   (# ipv,
                      AS.Eval.Lang.$wlayoutCodeFile
                        lang
                        (GHC.Types.[] @ GHC.Types.Char)
                        ipv1
                        (case AS.Eval.Lang.$wsplitLastCmd
                                lang
                                execCmd of ww { (#,#) ww1 ww2 ->
                         GHC.Base.++
                           @ GHC.Types.Char
                           ww1
                           (AS.Eval.Lang.printCmd lang ww2) }) #) }) -}
0889e3721297e39885136a73e8c9ba2f
  interpolateFile2 :: [(GHC.Base.String, GHC.Base.String)]
    {- Strictness: m2,
       Unfolding: (GHC.Types.:
                     @ (GHC.Base.String, GHC.Base.String)
                     AS.Eval.Lang.interpolateFile3
                     (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))) -}
bb6b94dc54f748704297b48ed660c57e
  interpolateFile3 :: ([GHC.Types.Char], [GHC.Types.Char])
    {- Strictness: m,
       Unfolding: ((AS.Eval.Lang.interpolateFile5,
                    AS.Eval.Lang.interpolateFile4)) -}
034789ec7c4a32d95055ad5f46f3b241
  interpolateFile4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "\n\
                     \\t"#) -}
1844c74e9d8fed628fc69ba66aac17f8
  interpolateFile5 :: [GHC.Types.Char]
    {- HasNoCafRefs, Strictness: m2,
       Unfolding: (GHC.Types.:
                     @ GHC.Types.Char
                     AS.Eval.Lang.interpolateFile6
                     (GHC.Types.[] @ GHC.Types.Char)) -}
832b02fc8d26ce2fd2b55d01547e3eea
  interpolateFile6 :: GHC.Types.Char
    {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '\n') -}
94198800ae019ad1530e0196b9f47f1f
  interpolateFile7 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "#CMD#"#) -}
bce53f1e6a7ddde4b15f56e02f1d1c16
  interpolateFileRepl :: AS.Types.ASLanguage
                         -> GHC.Base.String
                         -> GHC.Types.IO GHC.Base.String
    {- Arity: 3, Strictness: <L,U><L,U><L,U>,
       Unfolding: (AS.Eval.Lang.interpolateFileRepl1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R <GHC.Base.String>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
0ed37d99ac525c0646b102b05d61a6db
  interpolateFileRepl1 :: AS.Types.ASLanguage
                          -> GHC.Base.String
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 3, Strictness: <L,U><L,U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     execCmd :: GHC.Base.String
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case AS.Eval.Lang.getReplTemplate1
                          lang
                          eta of ds1 { (#,#) ipv ipv1 ->
                   (# ipv,
                      AS.Eval.Lang.$wlayoutCodeFile
                        lang
                        (GHC.Types.[] @ GHC.Types.Char)
                        ipv1
                        execCmd #) }) -}
25cb559eb5f169b59880976fff035a6e
  layoutCodeFile :: AS.Types.ASLanguage
                    -> (GHC.Base.String, GHC.Base.String, GHC.Base.String)
                    -> GHC.Base.String
    {- Arity: 2, Strictness: <S,1*U><S,1*U(U,U,U)>, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: AS.Types.ASLanguage
                     w1 :: (GHC.Base.String, GHC.Base.String, GHC.Base.String) ->
                   case w1 of ww { (,,) ww1 ww2 ww3 ->
                   AS.Eval.Lang.$wlayoutCodeFile w ww1 ww2 ww3 }) -}
4bfe0917fa3db2ae7f5566126279e610
  lookupString :: AS.Types.ASLanguage
                  -> Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue
                  -> AS.Types.ASLocation
                  -> GHC.Base.String
    {- Arity: 3, Strictness: <L,U><L,U><S,1*U> -}
ec2cb1b7d8af80ab27803dd1a21634b7
  pid :: GHC.Base.String
    {- Unfolding: (GHC.CString.unpackCString# "1730"#) -}
ece5401d8053ac802e652a5d31d86033
  printCmd :: AS.Types.ASLanguage
              -> GHC.Base.String
              -> GHC.Base.String
    {- Arity: 2, Strictness: <S,1*U><L,U> -}
9f031b820d9949a64f5fef5b23c4c321
  splitLastCmd :: AS.Types.ASLanguage
                  -> GHC.Base.String
                  -> (GHC.Base.String, GHC.Base.String)
    {- Arity: 2, Strictness: <L,U><L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: AS.Types.ASLanguage w1 :: GHC.Base.String ->
                   case AS.Eval.Lang.$wsplitLastCmd w w1 of ww { (#,#) ww1 ww2 ->
                   (ww1, ww2) }) -}
"SPEC Data.Map.Base.! [AS.Types.ASLocation]" [ALWAYS] forall @ a
                                                             $dOrd :: GHC.Classes.Ord
                                                                          AS.Types.ASLocation
  Data.Map.Base.! @ AS.Types.ASLocation @ a $dOrd
  = AS.Eval.Lang.$s! @ a
"SPEC Data.Map.Base.find [AS.Types.ASLocation]" [ALWAYS] forall @ a
                                                                $dOrd :: GHC.Classes.Ord
                                                                             AS.Types.ASLocation
  Data.Map.Base.find @ AS.Types.ASLocation @ a $dOrd
  = AS.Eval.Lang.$sfind @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

