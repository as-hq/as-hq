
==================== FINAL INTERFACE ====================
2015-09-24 03:38:30.121534 UTC

interface alphasheets-0.1.0.0:AS.Users 7084
  interface hash: 0493cf715cc09f0516ac0df500366ba7
  ABI hash: e1438f0faddefa8ee035d8c7af689004
  export-list hash: 504f367f0f4fc0f122f958c4e63ec0f9
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f8b866267ce58dc6290b8020b2e82f8c
  used TH splices: False
  where
exports:
  AS.Users.getUserById
  AS.Users.getUsers
  AS.Users.modifyUser
  AS.Users.userIdExists
module dependencies: AS.Config.Settings AS.DB.API AS.DB.Util
                     AS.Parsing.Common AS.Parsing.In AS.Types AS.Util
package dependencies: BoundedChan-1.0.3.0 SHA-1.6.4.2 aeson-0.8.1.1
                      array-0.5.0.0 attoparsec-0.13.0.1 base base64-bytestring-1.0.0.1
                      binary-0.7.1.0 blaze-builder-0.4.0.1 bytestring-0.10.4.0
                      bytestring-lexing-0.5.0.2 case-insensitive-1.2.0.4
                      containers-0.5.5.1 deepseq-1.3.0.2 dlist-0.7.1.1 entropy-0.3.7
                      ghc-prim hashable-1.2.3.3 hedis-0.6.9 integer-gmp
                      monad-control-1.0.0.4 mtl-2.2.1 network-2.6.2.1 parsec-3.1.9
                      primitive-0.6 random-1.1 regex-base-0.93.2 regex-posix-0.95.2
                      resource-pool-0.2.3.2 scientific-0.3.3.8 split-0.2.2 stm-2.4.4
                      text-1.2.1.1 time-1.5.0.1 transformers-0.4.3.0
                      transformers-base-0.4.4 unix-2.7.1.0 unordered-containers-0.2.5.1
                      uuid-1.3.10 uuid-types-1.0.1 vector-0.11.0.0 websockets-0.9.5.0
orphans: aeson-0.8.1.1:Data.Aeson.Types.Generic
         aeson-0.8.1.1:Data.Aeson.Types.Instances
         aeson-0.8.1.1:Data.Aeson.Types.Internal
         alphasheets-0.1.0.0:AS.Parsing.In
         attoparsec-0.13.0.1:Data.Attoparsec.ByteString.Char8 base:GHC.Base
         base:GHC.Float base:GHC.Real binary-0.7.1.0:Data.Binary.Generic
         bytestring-0.10.4.0:Data.ByteString.Builder
         bytestring-lexing-0.5.0.2:Data.ByteString.Lex.Fractional
         hashable-1.2.3.3:Data.Hashable.Generic
         network-2.6.2.1:Network.Socket network-2.6.2.1:Network.Socket.Types
         random-1.1:System.Random regex-base-0.93.2:Text.Regex.Base.Context
         regex-posix-0.95.2:Text.Regex.Posix.ByteString
         regex-posix-0.95.2:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2:Text.Regex.Posix.Sequence
         regex-posix-0.95.2:Text.Regex.Posix.String
         resource-pool-0.2.3.2:Data.Pool stm-2.4.4:Control.Monad.STM
         text-1.2.1.1:Data.Text text-1.2.1.1:Data.Text.Lazy
         text-1.2.1.1:Data.Text.Show
         time-1.5.0.1:Data.Time.Calendar.Gregorian
         time-1.5.0.1:Data.Time.Format.Parse
         time-1.5.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.4.3.0:Control.Monad.Trans.Error
         vector-0.11.0.0:Data.Vector.Fusion.Bundle
         vector-0.11.0.0:Data.Vector.Unboxed
family instance modules: alphasheets-0.1.0.0:AS.Types
                         attoparsec-0.13.0.1:Data.Attoparsec.Internal.Types
                         base:Control.Applicative base:Data.Either base:Data.Monoid
                         base:Data.Type.Equality base:GHC.Exts base:GHC.Generics
                         dlist-0.7.1.1:Data.DList
                         monad-control-1.0.0.4:Control.Monad.Trans.Control
                         primitive-0.6:Control.Monad.Primitive text-1.2.1.1:Data.Text
                         text-1.2.1.1:Data.Text.Lazy
                         unordered-containers-0.2.5.1:Data.HashMap.Base
                         unordered-containers-0.2.5.1:Data.HashSet
                         uuid-types-1.0.1:Data.UUID.Types.Internal
                         uuid-types-1.0.1:Data.UUID.Types.Internal.Builder
                         vector-0.11.0.0:Data.Vector vector-0.11.0.0:Data.Vector.Primitive
                         vector-0.11.0.0:Data.Vector.Storable
                         vector-0.11.0.0:Data.Vector.Unboxed
                         vector-0.11.0.0:Data.Vector.Unboxed.Base
import  -/  aeson-0.8.1.1:Data.Aeson 4717cd565317ade519445bba111351ae
import  -/  AS.Config.Settings b59cada5dab6da716812ef29c8d0a55f
  exports: 0c823ce19dbdd82846e3dcfdd9e8e922
import  -/  AS.DB.API 803eb460c2d32c4cdf889b44c1df2c6d
  exports: f4205431df73a6774c712eb5aa073d13
import  -/  AS.Types e3666650dafeff86b49d80330a77be8c
  exports: f8584b3856684401ece78f5d630831a9
  ASUser 8f65613dded3aab26fae493435f0f314
  ASUserId 3094df477896c468afcf617b4934d3e3
  ServerState 9ce35b4af6c18edb38f6401544fc8edb
  State 2d6c62b0809c3be7755965f6cdb8f5c9
  userId 85217dd9f2d9550b6e0817800ca98d66
import  -/  AS.Util 7d03dc2552b02355618f794279df874f
  exports: 061da0521eb01812fd74bf75a38cb988
import  -/  base:Control.Concurrent 1be25cd1e2ac314074fafb26df0ff06b
import  -/  base:Control.Concurrent.MVar 47f6cad20e8acd25bbaa337e785e68f9
import  -/  base:Data.List 8b77870d02d66076337587b759b7ee19
import  -/  base:Data.Maybe 5034d40e23c3a7110309f188001df4ca
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:GHC.List 4cff382327e59a5787355ca0a4174450
import  -/  base:GHC.MVar 2c9d76ed3707c435c49b694504d09491
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  ghc-prim:GHC.Classes 3e6cbe1e7e80480408cfa8d5450726a0
import  -/  ghc-prim:GHC.Types dcba736fa3dfba12d307ab18354845d2
import  -/  hedis-0.6.9:Database.Redis 528220caf3eba6c7f6dc7e85c445c8d5
import  -/  text-1.2.1.1:Data.Text ddf865ef7152d1de0d03707558cc6523
import  -/  transformers-0.4.3.0:Control.Monad.IO.Class 1fe01dea961eadb0b037d705f6cb22bb
import  -/  websockets-0.9.5.0:Network.WebSockets c11cd6465abe4dc4c3ad51897e46aaa0
6d7871f42675f1f604b41885d084df0e
  $wgetUserById :: AS.Types.ASUserId
                   -> [AS.Types.ASUser]
                   -> Data.Maybe.Maybe AS.Types.ASUser
    {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U,U,U)><S,1*U>,
       Unfolding: (\ w :: AS.Types.ASUserId ww :: [AS.Types.ASUser] ->
                   case GHC.List.filter
                          @ AS.Types.ASUser
                          (\ c :: AS.Types.ASUser ->
                           case c of wild { AS.Types.UserClient ds1 ds2 ds3 ->
                           case ds1 of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case w of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# dt2 dt5) of wild3 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case {__pkg_ccall text-1.2.1.1 _hs_text_memcmp GHC.Prim.ByteArray#
                                                                               -> GHC.Prim.Word#
                                                                               -> GHC.Prim.ByteArray#
                                                                               -> GHC.Prim.Word#
                                                                               -> GHC.Prim.Word#
                                                                               -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                               -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld,
                                                                                     GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild4 { (#,#) ds11 ds12 ->
                                case GHC.Prim.narrow32Int# ds12 of wild5 {
                                  DEFAULT -> GHC.Types.False 0 -> GHC.Types.True } } } } } })
                          ww of wild {
                     [] -> Data.Maybe.Nothing @ AS.Types.ASUser
                     : ipv ipv1 -> Data.Maybe.Just @ AS.Types.ASUser ipv }) -}
58604b4a16eacfd942d63bbf08ff6cab
  getUserById :: AS.Types.ASUserId
                 -> AS.Types.ServerState
                 -> Data.Maybe.Maybe AS.Types.ASUser
    {- Arity: 2, HasNoCafRefs,
       Strictness: <L,U(U,U,U)><S(SLL),1*U(1*U,A,A)>, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: AS.Types.ASUserId w1 :: AS.Types.ServerState ->
                   case w1 of ww { AS.Types.State ww1 ww2 ww3 ->
                   AS.Users.$wgetUserById w ww1 }) -}
0acc03f119d5fc00a8cd403a8c421c9a
  getUsers :: AS.Types.ServerState -> [AS.Types.ASUser]
    {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: AS.Types.ServerState ->
                   case ds of wild { AS.Types.State us ds1 ds2 -> us }) -}
98bd738756947fe53170761e563a72a4
  modifyUser :: (AS.Types.ASUser -> AS.Types.ASUser)
                -> AS.Types.ASUser
                -> GHC.MVar.MVar AS.Types.ServerState
                -> GHC.Types.IO ()
    {- Arity: 4, HasNoCafRefs,
       Strictness: <L,C(U(U,U,U))><L,U(U(U,U,U),A,A)><L,1*U(U)><L,U>,
       Unfolding: (AS.Users.modifyUser1
                     `cast`
                   (<AS.Types.ASUser -> AS.Types.ASUser>_R
                    ->_R <AS.Types.ASUser>_R
                    ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
77d95cfc9e8ffb6dbebf79d56030acc5
  modifyUser1 :: (AS.Types.ASUser -> AS.Types.ASUser)
                 -> AS.Types.ASUser
                 -> GHC.MVar.MVar AS.Types.ServerState
                 -> GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4, HasNoCafRefs,
       Strictness: <L,C(U(U,U,U))><L,U(U(U,U,U),A,A)><L,1*U(U)><L,U>,
       Unfolding: (\ func :: AS.Types.ASUser -> AS.Types.ASUser
                     user :: AS.Types.ASUser
                     state :: GHC.MVar.MVar AS.Types.ServerState
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case GHC.Prim.getMaskingState# eta of ds { (#,#) ipv ipv1 ->
                   let {
                     $wlvl :: GHC.Prim.ByteArray#
                              -> GHC.Prim.Int#
                              -> GHC.Prim.Int#
                              -> Network.WebSockets.Connection.Connection
                              -> [AS.Types.ASWindow]
                              -> AS.Types.ASUser
                       {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,U> -}
                     = \ ww :: GHC.Prim.ByteArray#
                         ww1 :: GHC.Prim.Int#
                         ww2 :: GHC.Prim.Int#
                         ww3 :: Network.WebSockets.Connection.Connection
                         ww4 :: [AS.Types.ASWindow] ->
                       case user of ww8 { AS.Types.UserClient ww9 ww10 ww11 ->
                       case ww9 of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                       case GHC.Prim.tagToEnum#
                              @ GHC.Types.Bool
                              (GHC.Prim.==# ww2 ww15) of wild2 {
                         GHC.Types.False
                         -> AS.Types.UserClient (Data.Text.Internal.Text ww ww1 ww2) ww3 ww4
                         GHC.Types.True
                         -> case {__pkg_ccall text-1.2.1.1 _hs_text_memcmp GHC.Prim.ByteArray#
                                                                           -> GHC.Prim.Word#
                                                                           -> GHC.Prim.ByteArray#
                                                                           -> GHC.Prim.Word#
                                                                           -> GHC.Prim.Word#
                                                                           -> GHC.Prim.State#
                                                                                  GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld,
                                                                                 GHC.Prim.Int# #)}
                                   ww
                                   (GHC.Prim.int2Word# ww1)
                                   ww13
                                   (GHC.Prim.int2Word# ww14)
                                   (GHC.Prim.int2Word# ww2)
                                   GHC.Prim.realWorld# of wild { (#,#) ds11 ds12 ->
                            case GHC.Prim.narrow32Int# ds12 of wild1 {
                              DEFAULT
                              -> AS.Types.UserClient (Data.Text.Internal.Text ww ww1 ww2) ww3 ww4
                              0
                              -> func
                                   (AS.Types.UserClient
                                      (Data.Text.Internal.Text ww ww1 ww2)
                                      ww3
                                      ww4) } } } } }
                   } in
                   let {
                     lvl :: AS.Types.ASUser -> AS.Types.ASUser
                       {- Arity: 1, Strictness: <S(SLL),1*U(U(U,U,U),U,U)>,
                          Inline: INLINE[0],
                          Unfolding: InlineRule (1, True, False)
                                     (\ w :: AS.Types.ASUser ->
                                      case w of ww { AS.Types.UserClient ww1 ww2 ww3 ->
                                      case ww1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                                      $wlvl ww5 ww6 ww7 ww2 ww3 } }) -}
                     = \ w :: AS.Types.ASUser ->
                       case w of ww { AS.Types.UserClient ww1 ww2 ww3 ->
                       case ww1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                       $wlvl ww5 ww6 ww7 ww2 ww3 } }
                   } in
                   case ipv1 of ds1 {
                     DEFAULT
                     -> case state of wild { GHC.MVar.MVar mvar# ->
                        case GHC.Prim.takeMVar#
                               @ GHC.Prim.RealWorld
                               @ AS.Types.ServerState
                               mvar#
                               ipv of ds2 { (#,#) ipv2 ipv3 ->
                        case GHC.Prim.catch#
                               @ AS.Types.ServerState
                               @ GHC.Exception.SomeException
                               (\ eta1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                case ipv3 of wild1 { AS.Types.State users daemons conn ->
                                (# eta1,
                                   AS.Types.State
                                     (GHC.Base.map @ AS.Types.ASUser @ AS.Types.ASUser lvl users)
                                     daemons
                                     conn #) })
                               (\ e1 :: GHC.Exception.SomeException
                                  eta1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                case GHC.Prim.putMVar#
                                       @ GHC.Prim.RealWorld
                                       @ AS.Types.ServerState
                                       mvar#
                                       ipv3
                                       eta1 of s2# { DEFAULT ->
                                GHC.Prim.raiseIO#
                                  @ GHC.Exception.SomeException
                                  @ AS.Types.ServerState
                                  e1
                                  s2# })
                               ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                        case GHC.Prim.putMVar#
                               @ GHC.Prim.RealWorld
                               @ AS.Types.ServerState
                               mvar#
                               ipv5
                               ipv4 of s2# { DEFAULT ->
                        (# s2#, GHC.Tuple.() #) } } } }
                     0
                     -> GHC.Prim.maskAsyncExceptions#
                          @ ()
                          (\ eta1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                           case state of wild { GHC.MVar.MVar mvar# ->
                           case GHC.Prim.takeMVar#
                                  @ GHC.Prim.RealWorld
                                  @ AS.Types.ServerState
                                  mvar#
                                  eta1 of ds2 { (#,#) ipv2 ipv3 ->
                           case GHC.Prim.catch#
                                  @ AS.Types.ServerState
                                  @ GHC.Exception.SomeException
                                  (GHC.Prim.unmaskAsyncExceptions#
                                     @ AS.Types.ServerState
                                     (\ eta2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                      case ipv3 of wild1 { AS.Types.State users daemons conn ->
                                      (# eta2,
                                         AS.Types.State
                                           (GHC.Base.map
                                              @ AS.Types.ASUser
                                              @ AS.Types.ASUser
                                              lvl
                                              users)
                                           daemons
                                           conn #) }))
                                  (\ e1 :: GHC.Exception.SomeException
                                     eta2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                   case GHC.Prim.putMVar#
                                          @ GHC.Prim.RealWorld
                                          @ AS.Types.ServerState
                                          mvar#
                                          ipv3
                                          eta2 of s2# { DEFAULT ->
                                   GHC.Prim.raiseIO#
                                     @ GHC.Exception.SomeException
                                     @ AS.Types.ServerState
                                     e1
                                     s2# })
                                  ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                           case GHC.Prim.putMVar#
                                  @ GHC.Prim.RealWorld
                                  @ AS.Types.ServerState
                                  mvar#
                                  ipv5
                                  ipv4 of s2# { DEFAULT ->
                           (# s2#, GHC.Tuple.() #) } } } })
                          ipv } }) -}
fcce95c55e1bd22787580e3f3aba8f68
  userIdExists :: AS.Types.ASUserId
                  -> AS.Types.ServerState
                  -> GHC.Types.Bool
    {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S(SLL),1*U(1*U,A,A)>,
       Unfolding: InlineRule (2, True, False)
                  (\ uid :: AS.Types.ASUserId state :: AS.Types.ServerState ->
                   case state of wild { AS.Types.State us ds ds1 ->
                   GHC.List.elem
                     @ AS.Types.ASUserId
                     Data.Text.$fEqText
                     uid
                     (GHC.Base.build
                        @ Data.Text.Internal.Text
                        (\ @ b1 c :: Data.Text.Internal.Text -> b1 -> b1 n :: b1 ->
                         GHC.Base.foldr
                           @ AS.Types.ASUser
                           @ b1
                           (GHC.Base.mapFB
                              @ Data.Text.Internal.Text
                              @ b1
                              @ AS.Types.ASUser
                              c
                              AS.Types.userId)
                           n
                           us)) }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

