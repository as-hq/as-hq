
==================== FINAL INTERFACE ====================
2015-09-25 03:22:39.180426 UTC

interface alphasheets-0.1.0.0:AS.Handler 7084
  interface hash: 88bdc96ccb45ad5d12f1a1a42536b6a9
  ABI hash: 2aadedd4b8e8b8c4b26725a411ed4337
  export-list hash: bf8f91b083d8a1f61df86db1c70dd9dc
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f8b866267ce58dc6290b8020b2e82f8c
  used TH splices: False
  where
exports:
  AS.Handler.broadcast
  AS.Handler.broadcastFiltered
  AS.Handler.handleAcknowledge
  AS.Handler.handleAddTags
  AS.Handler.handleClear
  AS.Handler.handleClose
  AS.Handler.handleCopy
  AS.Handler.handleCopyForced
  AS.Handler.handleDelete
  AS.Handler.handleEval
  AS.Handler.handleEvalRepl
  AS.Handler.handleGet
  AS.Handler.handleImport
  AS.Handler.handleNew
  AS.Handler.handleOpen
  AS.Handler.handleRedo
  AS.Handler.handleRemoveTags
  AS.Handler.handleUndo
  AS.Handler.handleUpdateWindow
  AS.Handler.processAddTag
  AS.Handler.processRemoveTag
  AS.Handler.sendBroadcastFiltered
  AS.Handler.sendToOriginalUser
module dependencies: AS.Config.Paths AS.Config.Settings AS.DB.API
                     AS.DB.Graph AS.DB.Util AS.Daemon AS.Dispatch.Core AS.Dispatch.Repl
                     AS.Eval.Core AS.Eval.Endware AS.Eval.Lang AS.Eval.Middleware
                     AS.Parsing.Common AS.Parsing.Eval AS.Parsing.In AS.Parsing.Out
                     AS.Types AS.Users AS.Util
package dependencies: BoundedChan-1.0.3.0 SHA-1.6.4.2 aeson-0.8.1.1
                      array-0.5.0.0 async-2.0.2 attoparsec-0.13.0.1 base
                      base64-bytestring-1.0.0.1 binary-0.7.1.0 blaze-builder-0.4.0.1
                      bytestring-0.10.4.0 bytestring-lexing-0.5.0.2
                      case-insensitive-1.2.0.4 cereal-0.4.1.1 containers-0.5.5.1
                      crypto-api-0.13.2 daemons-0.2.1 data-default-0.5.3
                      data-default-class-0.0.1 data-default-instances-base-0.0.1
                      data-default-instances-containers-0.0.1
                      data-default-instances-dlist-0.0.1
                      data-default-instances-old-locale-0.0.1 deepseq-1.3.0.2
                      directory-1.2.2.1 dlist-0.7.1.1 entropy-0.3.7 exceptions-0.8.0.2
                      filepath-1.3.0.2 ghc-prim hashable-1.2.3.3 hedis-0.6.9 integer-gmp
                      monad-control-1.0.0.4 monad-loops-0.4.3 mtl-2.2.1 network-2.6.2.1
                      old-locale-1.0.0.6 parsec-3.1.9 pretty-1.1.1.1 primitive-0.6
                      process-1.2.3.0 pureMD5-2.1.2.1 pyfi-0.4.0.4 random-1.1
                      regex-base-0.93.2 regex-posix-0.95.2 resource-pool-0.2.3.2
                      scientific-0.3.3.8 semigroups-0.16.2.2 split-0.2.2 stm-2.4.4
                      strict-0.3.2 tagged-0.8.1 template-haskell text-1.2.1.1
                      time-1.5.0.1 transformers-0.4.3.0 transformers-base-0.4.4
                      unix-2.7.1.0 unordered-containers-0.2.5.1 uuid-1.3.10
                      uuid-types-1.0.1 vector-0.11.0.0 websockets-0.9.5.0
                      zeromq4-haskell-0.6.3
orphans: aeson-0.8.1.1:Data.Aeson.Types.Generic
         aeson-0.8.1.1:Data.Aeson.Types.Instances
         aeson-0.8.1.1:Data.Aeson.Types.Internal
         alphasheets-0.1.0.0:AS.Dispatch.Core
         alphasheets-0.1.0.0:AS.Eval.Lang alphasheets-0.1.0.0:AS.Parsing.In
         attoparsec-0.13.0.1:Data.Attoparsec.ByteString.Char8 base:GHC.Base
         base:GHC.Float base:GHC.Real binary-0.7.1.0:Data.Binary.Generic
         bytestring-0.10.4.0:Data.ByteString.Builder
         bytestring-lexing-0.5.0.2:Data.ByteString.Lex.Fractional
         crypto-api-0.13.2:Crypto.Classes crypto-api-0.13.2:Crypto.Random
         data-default-instances-base-0.0.1:Data.Default.Instances.Base
         data-default-instances-containers-0.0.1:Data.Default.Instances.Containers
         data-default-instances-dlist-0.0.1:Data.Default.Instances.DList
         data-default-instances-old-locale-0.0.1:Data.Default.Instances.OldLocale
         hashable-1.2.3.3:Data.Hashable.Generic
         network-2.6.2.1:Network.Socket network-2.6.2.1:Network.Socket.Types
         pyfi-0.4.0.4:Python random-1.1:System.Random
         regex-base-0.93.2:Text.Regex.Base.Context
         regex-posix-0.95.2:Text.Regex.Posix.ByteString
         regex-posix-0.95.2:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2:Text.Regex.Posix.Sequence
         regex-posix-0.95.2:Text.Regex.Posix.String
         resource-pool-0.2.3.2:Data.Pool stm-2.4.4:Control.Monad.STM
         template-haskell:Language.Haskell.TH.PprLib text-1.2.1.1:Data.Text
         text-1.2.1.1:Data.Text.Lazy text-1.2.1.1:Data.Text.Show
         time-1.5.0.1:Data.Time.Calendar.Gregorian
         time-1.5.0.1:Data.Time.Format.Parse
         time-1.5.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.4.3.0:Control.Monad.Trans.Error
         vector-0.11.0.0:Data.Vector.Fusion.Bundle
         vector-0.11.0.0:Data.Vector.Unboxed
family instance modules: alphasheets-0.1.0.0:AS.Types
                         attoparsec-0.13.0.1:Data.Attoparsec.Internal.Types
                         base:Control.Applicative base:Data.Either base:Data.Monoid
                         base:Data.Type.Equality base:GHC.Exts base:GHC.Generics
                         dlist-0.7.1.1:Data.DList
                         monad-control-1.0.0.4:Control.Monad.Trans.Control
                         primitive-0.6:Control.Monad.Primitive
                         semigroups-0.16.2.2:Data.List.NonEmpty tagged-0.8.1:Data.Tagged
                         text-1.2.1.1:Data.Text text-1.2.1.1:Data.Text.Lazy
                         unordered-containers-0.2.5.1:Data.HashMap.Base
                         unordered-containers-0.2.5.1:Data.HashSet
                         uuid-types-1.0.1:Data.UUID.Types.Internal
                         uuid-types-1.0.1:Data.UUID.Types.Internal.Builder
                         vector-0.11.0.0:Data.Vector vector-0.11.0.0:Data.Vector.Primitive
                         vector-0.11.0.0:Data.Vector.Storable
                         vector-0.11.0.0:Data.Vector.Unboxed
                         vector-0.11.0.0:Data.Vector.Unboxed.Base
                         zeromq4-haskell-0.6.3:System.ZMQ4
import  -/  aeson-0.8.1.1:Data.Aeson 4717cd565317ade519445bba111351ae
import  -/  aeson-0.8.1.1:Data.Aeson.Encode.ByteString 0b7a0357ab6c702b385f6d74bfdda8e2
import  -/  AS.DB.API 41e4bd1545bc4e2723f20b3037ddaed3
  exports: f4205431df73a6774c712eb5aa073d13
  createWorkbook 5875e271bbee37d26f1718c2f0235a49
  createWorkbookSheet 66a3e1645d0d0033218a5f0d92100de8
  deleteLocs 0269c38cb3eefe16a3f3a1d96c3840c2
  deleteWorkbook 6319acefa1c204c9bdd8a2c181d7de9c
  deleteWorkbookSheet 728ba23b0dee9fb70c682bc51f636881
  getAllSheets 03e1fb0e8027a007148c1a5b7c7cbcb2
  getAllWorkbookSheets cd55802ba2f8600e8a779c3f50f154cd
  getAllWorkbooks b73084c68344135fa7971775345bf7f3
  getCell f5bd89f23687f71b1590f17381eeaa0f
  getCells d90192bcedf26c1010f64a7bb030e60d
  locationsExist 989cc6b94455e10e64478e8278d90193
  redo 2518f6ff642048aaec04252630aa46d9
  setCell c870a6120223989fbbeeb8c0b76d10ec
  setCells cdb1a72e695590454ca44323763d8dfb
  undo c36df94ccf95e5dca358c1bf7fb7e7ef
  updateDAG bcbead2b607b8220aa845eb128bc390a
import  -/  AS.Daemon 977df210d8d26e098f04d2b6450c3554
  exports: 2537a350c375a00f711ce7d1b9c65b96
  modifyDaemon e2f3ecfdff1be5fc644207172f416708
  removeDaemon 2a286b9115a586e0f1fa20aff70d5aff
import  -/  AS.Dispatch.Core bad3eb07973419e30b9625ecbc8dc5ae
  exports: 7408245679348183a46622955942e273
  runDispatchCycle 1af8d06774cac153d441681f4c6a32e5
import  -/  AS.Dispatch.Repl 2743c858e6878621de60e31546456340
  exports: b0ab7c62ba7eb78ca2d447fc618e5ff8
  runReplDispatch 5239828baf1f9dc41e208e9e73a94cd0
import  -/  AS.Parsing.Out dd270cee574919ef59c3b5c824275231
  exports: b4cc2ee9878e9c201d4134316c957a72
  shiftCell a98b7ddc2a759cd336050fa0d7b58cf7
import  -/  AS.Types ac0aeb8d2661160e6345f7fec8fc36e5
  exports: 4f33e2305e9f32540a30fe3603c0662c
  ASCell bede131762bf9e6165d28069305c9a8f
  ASCellTag 41914e4ed00db1adb7aa05558d91cd06
  ASCommit cd37bafad7a1ba0bf823b5565484da25
  ASLocation 42b88bd590b6186a8f42af5a0deb461a
  ASMessage b488c6e303af3ec316847aa09e9ef416
  ASPayload 11aec08e8dd419af745af089eecdc8d0
  ASUser 8f65613dded3aab26fae493435f0f314
  ASUserId 3094df477896c468afcf617b4934d3e3
  AddTags ceb01b8892b566c57dfe1b63145b1baa
  Cell cf2ab8ae076f48bff57c162753f8fec8
  CopyNonexistentDependencies 455a8cd8ce200827158d3e62707c0369
  Delete c9343008fb26d1b5bba554f2675bb479
  Evaluate 0016d98b7ff475be6a9673f425925dbc
  Failure 9946650b22bb6e567b42b8da3b105d7a
  Message 84f4a46e37fa757190dd82d855281e02
  NoResult 831122f3f735d80c6bed31d49d86608d
  PayloadC cf0873b14638e9746503b4b1a556d217
  PayloadCL 986b2bbb852717bf17df4cc79495cabe
  PayloadCommit 0376b8d0c45dbf0284cec420e98db3ad
  PayloadE 0f4ebe1c626086e67db4fceb7a3edb72
  PayloadL a2d0427388bd6428f59503b5e212ace5
  PayloadLL bcd89933b71bfbabdea5ca6d4a61bdd0
  PayloadList bd33190f2a6d5e10d839360d2a4c3f48
  PayloadN b41903296b9876a7e39be149f2893a16
  PayloadS bdb42d7d8eded81f79a495640a8bb962
  PayloadSS 1fef6f267e79ec9480b8531569263927
  PayloadTags a07d0e7a253d0c0e56c11876f2df0ecf
  PayloadW c8441fb392de8d26154362026c0227b6
  PayloadWB e1f59bae7e9c84891efc59dd7aed05b1
  PayloadWBS 6bbe3a908160647445a3221d65b784e9
  PayloadWorkbookSheets 1fd24eb204f7e4f8ce329ee64762a5ab
  Redo 668e7de413aa0c69a3d1e17e29e0c36a
  RemoveTags 62f303945a26e14570d29b45218e4008
  ServerState 9ce35b4af6c18edb38f6401544fc8edb
  Sheet 16d04131564501ec6ba23cf63f7d666e
  Sheets 34e4cdc7bb22f9d47c873d58eb01817e
  State 2d6c62b0809c3be7755965f6cdb8f5c9
  StreamTag 1f95a2a2a84067b901c5bc5824094c7d
  Success caf3e41f68e7099b0d98b6a27765d4ec
  Undo 1c1f8dd9742524901a76569c0be32ec9
  Update 00c3f834febfac0c959ca6ff1dfdb638
  UserClient cace6434106bd6cda012c66a0b1ec25f
  Window d6d144a36289253b6319bb291a9275d2
  WorkbookSheets 09d7f4096791a16abcee62cc7909b5a5
  Workbooks 4e004e5c5df1e2c4a44b2320c8ea87ee
  after 9cc747577e50815c0d5c9f360a4a294b
  before 48a29fee99082ed8de0c508d2686c878
  cellLocation 57eff0be9dcc5df8973c2d9de1095be4
  dbConn 8322ea2cd349a8dd93b7785150bce0cf
  failureMessage 789568aa44108a849956a7ba8056a3d2
  messageUserId a47f06dbba51bd08a4344136c32afe4f
  userConn 162633061242d173c03acd2ac9d51cab
  userId 85217dd9f2d9550b6e0817800ca98d66
  windowSheetId 63930e183ffb681090da00d843f4e165
  windows 515a1209c81b93b4e7054b1ad120a76f
  workbookName 94e7971a7eb0201351e161b545d4bebe
  workbookSheets 26d6100b8bd17c2ca420063ca816064d
import  -/  AS.Users e1438f0faddefa8ee035d8c7af689004
  exports: 504f367f0f4fc0f122f958c4e63ec0f9
  getUserById 58604b4a16eacfd942d63bbf08ff6cab
  modifyUser 98bd738756947fe53170761e563a72a4
import  -/  AS.Util 417e4f2db7aca39e7f1871a4d7aab2a3
  exports: 061da0521eb01812fd74bf75a38cb988
  filterNothing fe7e1f608e50ce271b2415f3a19f7abe
  generateErrorMessage 4b74e131547a8909b0158ddcb9c53148
  getDBCellMessage c3e7a66f93259db8bbb69c6e7c1ad1a5
  getOffsetBetweenLocs a6607d93da5d86670e923e68c1680f29
  getScrolledLocs 39e5e61832aeb02226917a0b7f89dca3
  getWindow eb52a544b59037659d20819a8d3d5a97
  intersectViewingWindows d3381cac645cb51ef129d9533269345c
  intersectViewingWindowsLocs f2f9c9e8adb608d9aebaee4b953514ef
  isSubsetOf 82e5b136dfc8cfd4c920a761825edbb8
  isoFilter 9a6dba2f2000b050cd4cfdc1f0c7dec0
  printTimed 35cb21e1f23638a3173441d7200c130f
  updateMessageUser a4f40572f7d98429b194998fe54e662c
  updateWindow d5d0ed20133a00f072c0d43e9a6ce529
import  -/  base:Control.Concurrent 1be25cd1e2ac314074fafb26df0ff06b
import  -/  base:Control.Exception 7d63ae88211a26e1cc154f7ca3a7313a
import  -/  base:Control.Exception.Base 9ef98277d024bfe7aa9db866724676f1
import  -/  base:Control.Monad 483e787e07c2e49f1fb1c1b88665cb92
import  -/  base:Data.List 8b77870d02d66076337587b759b7ee19
import  -/  base:Data.Maybe 5034d40e23c3a7110309f188001df4ca
import  -/  base:Data.Tuple cac4e06c48274e85317bd3e59867ef5b
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:GHC.Exception a293a91a9633ed37799c62ca0fb2dade
import  -/  base:GHC.List 4cff382327e59a5787355ca0a4174450
import  -/  base:GHC.MVar 2c9d76ed3707c435c49b694504d09491
import  -/  base:GHC.Show cf1a7ff9edb0f41528085aad04d33753
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  base:System.IO cadd0efb01c47ddd8f52d750739fdbdf
import  -/  ghc-prim:GHC.Classes 3e6cbe1e7e80480408cfa8d5450726a0
import  -/  ghc-prim:GHC.Types dcba736fa3dfba12d307ab18354845d2
import  -/  text-1.2.1.1:Data.Text ddf865ef7152d1de0d03707558cc6523
import  -/  text-1.2.1.1:Data.Text.Internal 5c7132affaaf11c5fb226a9fff83be01
import  -/  transformers-0.4.3.0:Control.Monad.IO.Class 1fe01dea961eadb0b037d705f6cb22bb
import  -/  websockets-0.9.5.0:Network.WebSockets c11cd6465abe4dc4c3ad51897e46aaa0
import  -/  websockets-0.9.5.0:Network.WebSockets.Connection ae39d52893470d43c0bc592e95fce2c0
d97d6dcdc027766ad9c864952b00afc0
  $wa :: GHC.Prim.MVar# GHC.Prim.RealWorld AS.Types.ServerState
         -> AS.Types.ASMessage
         -> GHC.Prim.State# GHC.Prim.RealWorld
         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3, Strictness: <L,U><L,1*U(1*U,1*U,1*U,1*U)><L,U>,
       Unfolding: (\ ww :: GHC.Prim.MVar#
                               GHC.Prim.RealWorld AS.Types.ServerState
                     w :: AS.Types.ASMessage
                     w1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case GHC.Prim.readMVar#
                          @ GHC.Prim.RealWorld
                          @ AS.Types.ServerState
                          ww
                          w1 of ds1 { (#,#) ipv ipv1 ->
                   case ipv1 of wild { AS.Types.State ucs ds ds2 ->
                   let {
                     lvl12 :: Data.ByteString.Lazy.Internal.ByteString
                     = Data.ByteString.Builder.toLazyByteString
                         (Data.Aeson.Encode.ByteString.encodeToByteStringBuilder
                            (AS.Types.$fToJSONASMessage_$ctoJSON w))
                   } in
                   let {
                     a1 :: Network.WebSockets.Types.DataMessage
                     = Network.WebSockets.Types.Text lvl12
                   } in
                   let {
                     lvl13 :: Network.WebSockets.Types.Message
                     = Network.WebSockets.Types.DataMessage a1
                   } in
                   letrec {
                     a2 :: [AS.Types.ASUser]
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                       {- Arity: 2, Strictness: <S,1*U><L,U> -}
                     = \ ds3 :: [AS.Types.ASUser]
                         eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case ds3 of wild1 {
                         [] -> (# eta, GHC.Tuple.() #)
                         : y ys
                         -> case y of wild2 { AS.Types.UserClient ds4 conn ds5 ->
                            case conn of wild3 { Network.WebSockets.Connection.Connection dt ds6 ds7 ds8 dt1 ->
                            case (ds8 lvl13) `cast` (GHC.Types.NTCo:IO[0] <()>_R)
                                   eta of ds9 { (#,#) ipv2 ipv3 ->
                            a2 ys ipv2 } } } }
                   } in
                   a2 ucs ipv } }) -}
edd5ad08b0a9789ab47854354504272f
  $wa1 :: AS.Types.ASUserId
          -> AS.Types.ASAction
          -> AS.Types.ASResult
          -> AS.Types.ASPayload
          -> [AS.Types.ASUser]
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 6,
       Strictness: <L,1*U><L,1*U><L,1*U><S,1*U><S,1*U><L,U> -}
582df73869203ecc42d80a1205ef4855
  $wa10 :: GHC.Prim.MVar# GHC.Prim.RealWorld AS.Types.ServerState
           -> AS.Types.ASUserId
           -> AS.Types.ASAction
           -> AS.Types.ASPayload
           -> GHC.Prim.State# GHC.Prim.RealWorld
           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 5, Strictness: <L,U><L,1*U><L,1*U><S,1*U><L,U>,
       Unfolding: (\ ww :: GHC.Prim.MVar#
                               GHC.Prim.RealWorld AS.Types.ServerState
                     ww1 :: AS.Types.ASUserId
                     ww2 :: AS.Types.ASAction
                     ww3 :: AS.Types.ASPayload
                     w :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ww3 of wild {
                     DEFAULT
                     -> case AS.Handler.handleNew2
                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        of {}
                     AS.Types.PayloadWB wb
                     -> case GHC.Prim.readMVar#
                               @ GHC.Prim.RealWorld
                               @ AS.Types.ServerState
                               ww
                               w of ds { (#,#) ipv ipv1 ->
                        let {
                          conn :: Database.Redis.Core.Connection
                          = case ipv1 of wild1 { AS.Types.State ds1 ds2 ds3 -> ds3 }
                        } in
                        case (Data.Pool.withResource_$swithResource
                                @ (Database.Redis.ProtocolPipelining.Connection
                                       Database.Redis.Protocol.Reply)
                                @ [AS.Types.ASWorkbook]
                                conn `cast` (Database.Redis.Core.NTCo:Connection[0])
                                AS.DB.API.createWorkbook4
                                  `cast`
                                (<Database.Redis.ProtocolPipelining.Connection
                                      Database.Redis.Protocol.Reply>_R
                                 ->_R Sym (GHC.Types.NTCo:IO[0] <[AS.Types.ASWorkbook]>_R)))
                               `cast`
                             (GHC.Types.NTCo:IO[0] <[AS.Types.ASWorkbook]>_R)
                               ipv of ds1 { (#,#) ipv2 ipv3 ->
                        let {
                          ipv4 :: GHC.Base.String
                          = AS.DB.Util.getUniquePrefixedName
                              AS.DB.API.createWorkbook3
                              (GHC.Base.map
                                 @ AS.Types.ASWorkbook
                                 @ [GHC.Types.Char]
                                 AS.Types.workbookName
                                 ipv3)
                        } in
                        let {
                          sheetids :: [AS.Types.ASSheetId]
                          = case wb of wild1 { AS.Types.Workbook ds2 ds3 -> ds3 }
                        } in
                        let {
                          wb1 :: AS.Types.ASWorkbook {- Strictness: m -}
                          = AS.Types.Workbook ipv4 sheetids
                        } in
                        case AS.DB.API.createWorkbook2
                               conn
                               wb1
                               ipv2 of ds2 { (#,#) ipv5 ipv6 ->
                        case AS.Handler.$wa
                               ww
                               (AS.Types.Message
                                  ww1
                                  ww2
                                  AS.Types.Success
                                  (AS.Types.PayloadWB wb1))
                               ipv5 of ds3 { (#,#) ipv7 ipv8 ->
                        (# ipv7, GHC.Tuple.() #) } } } }
                     AS.Types.PayloadWorkbookSheets ds
                     -> case ds of wild1 {
                          []
                          -> case AS.Handler.handleNew2
                             ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                             of {}
                          : wbs ds1
                          -> case ds1 of wild2 {
                               []
                               -> case GHC.Prim.readMVar#
                                         @ GHC.Prim.RealWorld
                                         @ AS.Types.ServerState
                                         ww
                                         w of ds2 { (#,#) ipv ipv1 ->
                                  case wbs of ww4 { AS.Types.WorkbookSheet ww5 ww6 ->
                                  case AS.DB.API.$wa1
                                         (AS.Types.dbConn ipv1)
                                         ww5
                                         ww6
                                         ipv of ds3 { (#,#) ipv2 ipv3 ->
                                  AS.Handler.$wa
                                    ww
                                    (AS.Types.Message
                                       ww1
                                       ww2
                                       AS.Types.Success
                                       (AS.Types.PayloadWorkbookSheets
                                          (GHC.Types.:
                                             @ AS.Types.WorkbookSheet
                                             ipv3
                                             (GHC.Types.[] @ AS.Types.WorkbookSheet))))
                                    ipv2 } } }
                               : ipv ipv1
                               -> case AS.Handler.handleNew2
                                  ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                  of {} } } }) -}
d7840fb388cb82c3d2824db92c5279e9
  $wa11 :: AS.Types.ASUser
           -> GHC.MVar.MVar AS.Types.ServerState
           -> AS.Types.ASPayload
           -> GHC.Prim.State# GHC.Prim.RealWorld
           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4, Strictness: <L,U(U(U,U,U),A,A)><L,1*U(U)><S,1*U><L,U>,
       Unfolding: (\ w :: AS.Types.ASUser
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     ww :: AS.Types.ASPayload
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ww of wild {
                     DEFAULT
                     -> case AS.Handler.handleOpen4
                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        of {}
                     AS.Types.PayloadS ds
                     -> case ds of wild1 { AS.Types.Sheet sheetid ds1 ds2 ->
                        let {
                          lvl12 :: AS.Types.ASWindow {- Strictness: m -}
                          = AS.Types.Window
                              sheetid
                              AS.Handler.handleOpen2
                              AS.Handler.handleOpen2
                        } in
                        AS.Users.modifyUser1
                          (\ ds3 :: AS.Types.ASUser ->
                           case ds3 of wild2 { AS.Types.UserClient uid conn windows ->
                           AS.Types.UserClient
                             uid
                             conn
                             (GHC.Types.: @ AS.Types.ASWindow lvl12 windows) })
                          w
                          w1
                          w2 } }) -}
83a9576022106d6b0e693fb6d8a22804
  $wa12 :: AS.Types.ASUserId
           -> GHC.Prim.MVar# GHC.Prim.RealWorld AS.Types.ServerState
           -> GHC.Prim.State# GHC.Prim.RealWorld
           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3, Strictness: <L,1*U><L,U><L,U>,
       Unfolding: (\ w :: AS.Types.ASUserId
                     ww :: GHC.Prim.MVar# GHC.Prim.RealWorld AS.Types.ServerState
                     w1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case GHC.Prim.readMVar#
                          @ GHC.Prim.RealWorld
                          @ AS.Types.ServerState
                          ww
                          w1 of ds1 { (#,#) ipv ipv1 ->
                   case AS.DB.API.redo1
                          (AS.Types.dbConn ipv1)
                          ipv of ds2 { (#,#) ipv2 ipv3 ->
                   case ipv3 of wild {
                     Data.Maybe.Nothing
                     -> case GHC.Prim.readMVar#
                               @ GHC.Prim.RealWorld
                               @ AS.Types.ServerState
                               ww
                               ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                        case ipv5 of wild1 { AS.Types.State ucs ds ds4 ->
                        case AS.Handler.$wa1
                               Data.Text.Internal.empty_
                               AS.Types.NoAction
                               AS.Handler.handleRedo3
                               AS.Types.failureMessage1
                               ucs
                               ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                        AS.Util.printTimed1 AS.Handler.handleRedo2 ipv6 } } }
                     Data.Maybe.Just c
                     -> case GHC.Prim.readMVar#
                               @ GHC.Prim.RealWorld
                               @ AS.Types.ServerState
                               ww
                               ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                        case ipv5 of wild1 { AS.Types.State ucs ds ds4 ->
                        case AS.Handler.$wa1
                               w
                               AS.Types.Redo
                               AS.Types.Success
                               (AS.Types.PayloadCommit c)
                               ucs
                               ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                        AS.Util.printTimed1 AS.Handler.handleRedo2 ipv6 } } } } } }) -}
ac43a280a94541a1c7c150da2e8e5558
  $wa13 :: AS.Types.ASUser
           -> GHC.MVar.MVar AS.Types.ServerState
           -> AS.Types.ASPayload
           -> GHC.Prim.State# GHC.Prim.RealWorld
           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4,
       Strictness: <L,1*U(1*U,1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A),A)><L,U(U)><S,1*U><L,U>,
       Unfolding: (\ w :: AS.Types.ASUser
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     ww :: AS.Types.ASPayload
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ww of wild {
                     DEFAULT
                     -> case AS.Handler.handleRemoveTags2
                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        of {}
                     AS.Types.PayloadTags ts loc
                     -> letrec {
                          a1 :: [AS.Types.ASCellTag]
                                -> GHC.Prim.State# GHC.Prim.RealWorld
                                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                            {- Arity: 2, Strictness: <S,1*U><L,U> -}
                          = \ ds :: [AS.Types.ASCellTag]
                              eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                            case ds of wild1 {
                              [] -> (# eta, GHC.Tuple.() #)
                              : y ys
                              -> case w1 of ww1 { GHC.MVar.MVar ww2 ->
                                 case AS.Handler.$wa14 loc ww2 y eta of ds1 { (#,#) ipv ipv1 ->
                                 a1 ys ipv } } }
                        } in
                        case a1 ts w2 of ds1 { (#,#) ipv ipv1 ->
                        case w of ww1 { AS.Types.UserClient ww2 ww3 ww4 ->
                        case ww3 of ww5 { Network.WebSockets.Connection.Connection ww6 ww7 ww8 ww9 ww10 ->
                        (ww9
                           (Network.WebSockets.Types.DataMessage
                              (Network.WebSockets.Types.Text
                                 (Data.ByteString.Builder.toLazyByteString
                                    (case AS.Types.$w$ctoJSON3
                                            ww2
                                            AS.Types.RemoveTags
                                            AS.Types.Success
                                            AS.Handler.handleAddTags2 of ww11 { (##) ww12 ->
                                     Data.Aeson.Encode.ByteString.encodeToByteStringBuilder
                                       (Data.Aeson.Types.Internal.Object ww12) })))))
                          `cast`
                        (GHC.Types.NTCo:IO[0] <()>_R)
                          ipv } } } }) -}
93b50ae1fa6887312aff597c1419f2b8
  $wa14 :: AS.Types.ASLocation
           -> GHC.Prim.MVar# GHC.Prim.RealWorld AS.Types.ServerState
           -> AS.Types.ASCellTag
           -> GHC.Prim.State# GHC.Prim.RealWorld
           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>,
       Unfolding: (\ w :: AS.Types.ASLocation
                     ww :: GHC.Prim.MVar# GHC.Prim.RealWorld AS.Types.ServerState
                     w1 :: AS.Types.ASCellTag
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case GHC.Prim.readMVar#
                          @ GHC.Prim.RealWorld
                          @ AS.Types.ServerState
                          ww
                          w2 of ds1 { (#,#) ipv ipv1 ->
                   case AS.DB.API.getCell2
                          (AS.Types.dbConn ipv1)
                          (GHC.Types.:
                             @ AS.Types.ASLocation
                             w
                             (GHC.Types.[] @ AS.Types.ASLocation))
                          ipv of ds2 { (#,#) ipv2 ipv3 ->
                   case ipv3 of wild {
                     []
                     -> case GHC.List.badHead
                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        of {}
                     : x ds3
                     -> case x of wild1 {
                          Data.Maybe.Nothing
                          -> case w1 of wild2 {
                               DEFAULT -> (# ipv2, GHC.Tuple.() #)
                               AS.Types.StreamTag s
                               -> AS.Daemon.modifyDaemon2
                                    w
                                    (GHC.MVar.MVar @ AS.Types.ServerState ww)
                                    ipv2 }
                          Data.Maybe.Just c
                          -> case c of wild2 { AS.Types.Cell l e v ts ->
                             case (Data.Pool.withResource_$swithResource
                                     @ (Database.Redis.ProtocolPipelining.Connection
                                            Database.Redis.Protocol.Reply)
                                     @ ()
                                     (AS.Types.dbConn ipv1)
                                       `cast`
                                     (Database.Redis.Core.NTCo:Connection[0])
                                     (\ eta1 :: Database.Redis.ProtocolPipelining.Connection
                                                    Database.Redis.Protocol.Reply
                                        eta2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                      case ((AS.DB.API.setCell_go
                                               (GHC.Types.:
                                                  @ AS.Types.ASCell
                                                  (AS.Types.Cell
                                                     l
                                                     e
                                                     v
                                                     (Data.List.deleteBy
                                                        @ AS.Types.ASCellTag
                                                        AS.Types.$fEqASCellTag_$c==
                                                        w1
                                                        ts))
                                                  (GHC.Types.[] @ AS.Types.ASCell)))
                                              `cast`
                                            (Trans
                                                 (Database.Redis.Core.NTCo:Redis[0] <()>_N)
                                                 (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                      <Database.Redis.ProtocolPipelining.Connection
                                                           Database.Redis.Protocol.Reply>_R
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                                              eta1)
                                             `cast`
                                           (GHC.Types.NTCo:IO[0] <()>_R)
                                             eta2 of ds4 { (#,#) ipv4 ipv5 ->
                                      case AS.Util.printTimed1
                                             AS.DB.API.redo2
                                             ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                                      (# ipv6, GHC.Tuple.() #) } })
                                       `cast`
                                     (<Database.Redis.ProtocolPipelining.Connection
                                           Database.Redis.Protocol.Reply>_R
                                      ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)))
                                    `cast`
                                  (GHC.Types.NTCo:IO[0] <()>_R)
                                    ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                             case w1 of wild3 {
                               DEFAULT -> (# ipv4, GHC.Tuple.() #)
                               AS.Types.StreamTag s
                               -> AS.Daemon.modifyDaemon2
                                    w
                                    (GHC.MVar.MVar @ AS.Types.ServerState ww)
                                    ipv4 } } } } } } }) -}
0c15306f7ed110840a5f3996361f063a
  $wa15 :: AS.Types.ASUserId
           -> GHC.Prim.MVar# GHC.Prim.RealWorld AS.Types.ServerState
           -> GHC.Prim.State# GHC.Prim.RealWorld
           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3, Strictness: <L,1*U><L,U><L,U>,
       Unfolding: (\ w :: AS.Types.ASUserId
                     ww :: GHC.Prim.MVar# GHC.Prim.RealWorld AS.Types.ServerState
                     w1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case GHC.Prim.readMVar#
                          @ GHC.Prim.RealWorld
                          @ AS.Types.ServerState
                          ww
                          w1 of ds { (#,#) ipv ipv1 ->
                   case AS.DB.API.undo1
                          (AS.Types.dbConn ipv1)
                          ipv of ds1 { (#,#) ipv2 ipv3 ->
                   case ipv3 of wild {
                     Data.Maybe.Nothing
                     -> case GHC.Prim.readMVar#
                               @ GHC.Prim.RealWorld
                               @ AS.Types.ServerState
                               ww
                               ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                        case ipv5 of wild1 { AS.Types.State ucs ds3 ds4 ->
                        case AS.Handler.$wa1
                               Data.Text.Internal.empty_
                               AS.Types.NoAction
                               AS.Handler.handleUndo3
                               AS.Types.failureMessage1
                               ucs
                               ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                        AS.Util.printTimed1 AS.Handler.handleUndo2 ipv6 } } }
                     Data.Maybe.Just c
                     -> case GHC.Prim.readMVar#
                               @ GHC.Prim.RealWorld
                               @ AS.Types.ServerState
                               ww
                               ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                        case ipv5 of wild1 { AS.Types.State ucs ds3 ds4 ->
                        case AS.Handler.$wa1
                               w
                               AS.Types.Undo
                               AS.Types.Success
                               (AS.Types.PayloadCommit c)
                               ucs
                               ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                        AS.Util.printTimed1 AS.Handler.handleUndo2 ipv6 } } } } } }) -}
bd01c792dd44dd5cab8b50f6ddd48579
  $wa16 :: GHC.Prim.MVar# GHC.Prim.RealWorld AS.Types.ServerState
           -> AS.Types.ASUserId
           -> AS.Types.ASPayload
           -> GHC.Prim.State# GHC.Prim.RealWorld
           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4, Strictness: <L,U><L,U(U,U,U)><S,1*U><L,U> -}
cfe9f8a3cbf76aae827ae28876c75a1b
  $wa2 :: AS.Types.ASUser
          -> GHC.MVar.MVar AS.Types.ServerState
          -> AS.Types.ASUserId
          -> AS.Types.ASPayload
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 5,
       Strictness: <L,1*U(1*U,1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A),A)><L,U(U)><L,U(U,U,U)><S,1*U><L,U>,
       Unfolding: (\ w :: AS.Types.ASUser
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     ww :: AS.Types.ASUserId
                     ww1 :: AS.Types.ASPayload
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ww1 of wild {
                     DEFAULT
                     -> case AS.Handler.handleAddTags5
                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        of {}
                     AS.Types.PayloadTags ts loc
                     -> let {
                          wild1 :: AS.Types.ASMessage
                          = AS.Types.Message
                              ww
                              AS.Handler.handleAddTags4
                              AS.Handler.handleAddTags3
                              wild
                        } in
                        letrec {
                          a1 :: [AS.Types.ASCellTag]
                                -> GHC.Prim.State# GHC.Prim.RealWorld
                                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                            {- Arity: 2, Strictness: <S,1*U><L,U> -}
                          = \ ds :: [AS.Types.ASCellTag]
                              eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                            case ds of wild2 {
                              [] -> (# eta, GHC.Tuple.() #)
                              : y ys
                              -> case w1 of ww2 { GHC.MVar.MVar ww3 ->
                                 case AS.Handler.$wa3 ww3 loc wild1 y eta of ds1 { (#,#) ipv ipv1 ->
                                 a1 ys ipv } } }
                        } in
                        case a1 ts w2 of ds1 { (#,#) ipv ipv1 ->
                        case w of ww2 { AS.Types.UserClient ww3 ww4 ww5 ->
                        case ww4 of ww6 { Network.WebSockets.Connection.Connection ww7 ww8 ww9 ww10 ww11 ->
                        (ww10
                           (Network.WebSockets.Types.DataMessage
                              (Network.WebSockets.Types.Text
                                 (Data.ByteString.Builder.toLazyByteString
                                    (case AS.Types.$w$ctoJSON3
                                            ww3
                                            AS.Types.AddTags
                                            AS.Types.Success
                                            AS.Handler.handleAddTags2 of ww12 { (##) ww13 ->
                                     Data.Aeson.Encode.ByteString.encodeToByteStringBuilder
                                       (Data.Aeson.Types.Internal.Object ww13) })))))
                          `cast`
                        (GHC.Types.NTCo:IO[0] <()>_R)
                          ipv } } } }) -}
41e2b1fbef5bdcdb2bdcc2d2f5ea84b5
  $wa3 :: GHC.Prim.MVar# GHC.Prim.RealWorld AS.Types.ServerState
          -> AS.Types.ASLocation
          -> AS.Types.ASMessage
          -> AS.Types.ASCellTag
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 5,
       Strictness: <L,U><L,U><L,1*U(1*U(U,U,U),A,A,A)><L,U><L,U>,
       Unfolding: (\ ww :: GHC.Prim.MVar#
                               GHC.Prim.RealWorld AS.Types.ServerState
                     w :: AS.Types.ASLocation
                     w1 :: AS.Types.ASMessage
                     w2 :: AS.Types.ASCellTag
                     w3 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case GHC.Prim.readMVar#
                          @ GHC.Prim.RealWorld
                          @ AS.Types.ServerState
                          ww
                          w3 of ds1 { (#,#) ipv ipv1 ->
                   case AS.DB.API.getCell2
                          (AS.Types.dbConn ipv1)
                          (GHC.Types.:
                             @ AS.Types.ASLocation
                             w
                             (GHC.Types.[] @ AS.Types.ASLocation))
                          ipv of ds2 { (#,#) ipv2 ipv3 ->
                   case ipv3 of wild {
                     []
                     -> case GHC.List.badHead
                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        of {}
                     : x ds3
                     -> let {
                          $w$j :: GHC.Prim.State# GHC.Prim.RealWorld
                                  -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                            {- Arity: 1, Strictness: <L,U> -}
                          = \ w4 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                            case w2 of wild1 {
                              DEFAULT -> (# w4, GHC.Tuple.() #)
                              AS.Types.StreamTag s
                              -> case AS.DB.API.getCell2
                                        (AS.Types.dbConn ipv1)
                                        (GHC.Types.:
                                           @ AS.Types.ASLocation
                                           w
                                           (GHC.Types.[] @ AS.Types.ASLocation))
                                        w4 of ds4 { (#,#) ipv4 ipv5 ->
                                 case ipv5 of wild2 {
                                   []
                                   -> case GHC.List.badHead
                                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                      of {}
                                   : x1 ds5
                                   -> case x1 of wild3 {
                                        Data.Maybe.Nothing -> (# ipv4, GHC.Tuple.() #)
                                        Data.Maybe.Just cell
                                        -> case AS.Daemon.modifyDaemon2
                                                  w
                                                  (GHC.MVar.MVar @ AS.Types.ServerState ww)
                                                  ipv4 of ds6 { (#,#) ipv6 ipv7 ->
                                           AS.Daemon.$wa
                                             s
                                             w
                                             (AS.Types.Message
                                                (AS.Types.messageUserId w1)
                                                AS.Types.Evaluate
                                                AS.Types.NoResult
                                                (AS.Types.PayloadC cell))
                                             ipv6 } } } } }
                        } in
                        case x of wild1 {
                          Data.Maybe.Nothing -> $w$j ipv2
                          Data.Maybe.Just c
                          -> case c of wild2 { AS.Types.Cell l e v ts ->
                             case GHC.List.elem
                                    @ AS.Types.ASCellTag
                                    AS.Types.$fEqASCellTag
                                    w2
                                    ts of wild3 {
                               GHC.Types.False
                               -> case (Data.Pool.withResource_$swithResource
                                          @ (Database.Redis.ProtocolPipelining.Connection
                                                 Database.Redis.Protocol.Reply)
                                          @ ()
                                          (AS.Types.dbConn ipv1)
                                            `cast`
                                          (Database.Redis.Core.NTCo:Connection[0])
                                          (\ eta1 :: Database.Redis.ProtocolPipelining.Connection
                                                         Database.Redis.Protocol.Reply
                                             eta2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                           case ((AS.DB.API.setCell_go
                                                    (GHC.Types.:
                                                       @ AS.Types.ASCell
                                                       (AS.Types.Cell
                                                          l
                                                          e
                                                          v
                                                          (GHC.Types.: @ AS.Types.ASCellTag w2 ts))
                                                       (GHC.Types.[] @ AS.Types.ASCell)))
                                                   `cast`
                                                 (Trans
                                                      (Database.Redis.Core.NTCo:Redis[0] <()>_N)
                                                      (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                           <Database.Redis.ProtocolPipelining.Connection
                                                                Database.Redis.Protocol.Reply>_R
                                                           <GHC.Types.IO>_R
                                                           <()>_N))
                                                   eta1)
                                                  `cast`
                                                (GHC.Types.NTCo:IO[0] <()>_R)
                                                  eta2 of ds4 { (#,#) ipv4 ipv5 ->
                                           case AS.Util.printTimed1
                                                  AS.DB.API.redo2
                                                  ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                                           (# ipv6, GHC.Tuple.() #) } })
                                            `cast`
                                          (<Database.Redis.ProtocolPipelining.Connection
                                                Database.Redis.Protocol.Reply>_R
                                           ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)))
                                         `cast`
                                       (GHC.Types.NTCo:IO[0] <()>_R)
                                         ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                                  $w$j ipv4 }
                               GHC.Types.True -> $w$j ipv2 } } } } } }) -}
6a12c02779bcdbadad33c5054c2dd47d
  $wa4 :: AS.Types.ASUser
          -> GHC.MVar.MVar AS.Types.ServerState
          -> AS.Types.ASPayload
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4, Strictness: <L,U(U(U,U,U),A,A)><L,1*U(U)><S,1*U><L,U>,
       Unfolding: (\ w :: AS.Types.ASUser
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     ww :: AS.Types.ASPayload
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ww of wild {
                     DEFAULT
                     -> case AS.Handler.handleClose2
                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        of {}
                     AS.Types.PayloadS ds
                     -> case ds of wild1 { AS.Types.Sheet sheetid ds1 ds2 ->
                        let {
                          $wlvl :: GHC.Prim.ByteArray#
                                   -> GHC.Prim.Int#
                                   -> GHC.Prim.Int#
                                   -> GHC.Types.Bool
                            {- Arity: 3, Strictness: <L,U><L,U><L,U> -}
                          = \ ww1 :: GHC.Prim.ByteArray#
                              ww2 :: GHC.Prim.Int#
                              ww3 :: GHC.Prim.Int# ->
                            case sheetid of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.==# dt2 ww3) of wild3 {
                              GHC.Types.False -> GHC.Types.True
                              GHC.Types.True
                              -> case {__pkg_ccall text-1.2.1.1 _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                -> GHC.Prim.Word#
                                                                                -> GHC.Prim.ByteArray#
                                                                                -> GHC.Prim.Word#
                                                                                -> GHC.Prim.Word#
                                                                                -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                      GHC.Prim.Int# #)}
                                        dt
                                        (GHC.Prim.int2Word# dt1)
                                        ww1
                                        (GHC.Prim.int2Word# ww2)
                                        (GHC.Prim.int2Word# dt2)
                                        GHC.Prim.realWorld# of wild4 { (#,#) ds11 ds12 ->
                                 case GHC.Prim.narrow32Int# ds12 of wild5 {
                                   DEFAULT -> GHC.Types.True 0 -> GHC.Types.False } } } }
                        } in
                        let {
                          lvl12 :: AS.Types.ASWindow -> GHC.Types.Bool
                            {- Arity: 1, Strictness: <S(SLL),1*U(1*U(U,U,U),A,A)>,
                               Inline: INLINE[0],
                               Unfolding: InlineRule (1, True, False)
                                          (\ w3 :: AS.Types.ASWindow ->
                                           case w3 of ww1 { AS.Types.Window ww2 ww3 ww4 ->
                                           case ww2 of ww5 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                           $wlvl ww6 ww7 ww8 } }) -}
                          = \ w3 :: AS.Types.ASWindow ->
                            case w3 of ww1 { AS.Types.Window ww2 ww3 ww4 ->
                            case ww2 of ww5 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                            $wlvl ww6 ww7 ww8 } }
                        } in
                        AS.Users.modifyUser1
                          (\ ds3 :: AS.Types.ASUser ->
                           case ds3 of wild2 { AS.Types.UserClient uid conn windows ->
                           AS.Types.UserClient
                             uid
                             conn
                             (GHC.List.filter @ AS.Types.ASWindow lvl12 windows) })
                          w
                          w1
                          w2 } }) -}
36b7f912c2218352d60cb82838d5d9ef
  $wa5 :: AS.Types.ASUser
          -> GHC.Prim.MVar# GHC.Prim.RealWorld AS.Types.ServerState
          -> AS.Types.ASPayload
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4,
       Strictness: <L,1*U(1*U(U,U,U),1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A),A)><L,U><S,1*U><L,U> -}
80f634083be4a8270de5b26687ffdca8
  $wa6 :: AS.Types.ASPayload
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 2, Strictness: <S,1*U><L,U>,
       Unfolding: (\ w :: AS.Types.ASPayload
                     w1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w of wild {
                     DEFAULT
                     -> case AS.Handler.handleCopyForced2
                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        of {}
                     AS.Types.PayloadLL ds
                     -> case ds of wild1 {
                          []
                          -> case AS.Handler.handleCopyForced2
                             ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                             of {}
                          : from ds1
                          -> case ds1 of wild2 {
                               []
                               -> case AS.Handler.handleCopyForced2
                                  ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                  of {}
                               : to ds2
                               -> case ds2 of wild3 {
                                    [] -> (# w1, GHC.Tuple.() #)
                                    : ipv ipv1
                                    -> case AS.Handler.handleCopyForced2
                                       ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                       of {} } } } }) -}
a14fba086030ff3d0d8f4a3a5d1b5e15
  $wa7 :: AS.Types.ASUser
          -> GHC.Prim.MVar# GHC.Prim.RealWorld AS.Types.ServerState
          -> AS.Types.ASPayload
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4,
       Strictness: <L,1*U(1*U(U,U,U),A,A)><L,U><S,1*U><L,U> -}
c1062c781c8fe9794e067ea592e8ae46
  $wa8 :: AS.Types.ASUser
          -> AS.Types.ASMessage
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3,
       Strictness: <L,1*U(1*U,1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A),A)><L,1*U(A,1*U,A,1*U)><L,U>,
       Unfolding: (\ w :: AS.Types.ASUser
                     w1 :: AS.Types.ASMessage
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case GHC.IO.Handle.Text.hPutStr2
                          GHC.IO.Handle.FD.stdout
                          AS.Handler.handleEval4
                          GHC.Types.True
                          w2 of ds1 { (#,#) ipv ipv1 ->
                   case w1 of wild { AS.Types.Message uid action ds2 ds3 ->
                   case ds3 of wild1 {
                     DEFAULT
                     -> case AS.Dispatch.Repl.runReplDispatch2
                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        of {}
                     AS.Types.PayloadXp xp
                     -> case AS.Eval.Core.evalCodeRepl1
                               xp
                               ipv of ds4 { (#,#) ipv2 ipv3 ->
                        case w of ww { AS.Types.UserClient ww1 ww2 ww3 ->
                        case ww2 of ww4 { Network.WebSockets.Connection.Connection ww5 ww6 ww7 ww8 ww9 ->
                        (ww8
                           (Network.WebSockets.Types.DataMessage
                              (Network.WebSockets.Types.Text
                                 (Data.ByteString.Builder.toLazyByteString
                                    (case AS.Types.$w$ctoJSON3
                                            ww1
                                            action
                                            AS.Types.Success
                                            (AS.Types.PayloadLangValue
                                               (AS.Types.LangValue
                                                  ipv3
                                                  (case xp of wild2 {
                                                     AS.Types.Expression ds5 ds6 -> ds6
                                                     AS.Types.Reference ipv4 ipv5
                                                     -> AS.Types.language1 }))) of ww10 { (##) ww11 ->
                                     Data.Aeson.Encode.ByteString.encodeToByteStringBuilder
                                       (Data.Aeson.Types.Internal.Object ww11) })))))
                          `cast`
                        (GHC.Types.NTCo:IO[0] <()>_R)
                          ipv2 } } } } } }) -}
8272f33a3dac7ec95c781dc8418f6ca5
  $wa9 :: AS.Types.ASUser
          -> GHC.Prim.MVar# GHC.Prim.RealWorld AS.Types.ServerState
          -> AS.Types.ASPayload
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4,
       Strictness: <L,1*U(1*U,1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A),A)><L,U><S,1*U><L,U> -}
f425ffaa7b3c2074c1b265c199481881
  broadcast :: GHC.MVar.MVar AS.Types.ServerState
               -> AS.Types.ASMessage
               -> GHC.Types.IO ()
    {- Arity: 3, Strictness: <S,1*U(U)><L,1*U(1*U,1*U,1*U,1*U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Handler.broadcast1
                    `cast`
                  (<GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R <AS.Types.ASMessage>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
7e040bb3e223945b11a864fb6d2a1ea4
  broadcast1 :: GHC.MVar.MVar AS.Types.ServerState
                -> AS.Types.ASMessage
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3, Strictness: <S,1*U(U)><L,1*U(1*U,1*U,1*U,1*U)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ w :: GHC.MVar.MVar AS.Types.ServerState
                     w1 :: AS.Types.ASMessage
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w of ww { GHC.MVar.MVar ww1 -> AS.Handler.$wa ww1 w1 w2 }) -}
c35766cf00462ef7ac37aec438777150
  broadcastFiltered :: AS.Types.ASMessage
                       -> [AS.Types.ASUser]
                       -> GHC.Types.IO ()
    {- Arity: 3,
       Strictness: <S(LLLS),1*U(1*U,1*U,1*U,1*U)><S,1*U><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Handler.broadcastFiltered1
                    `cast`
                  (<AS.Types.ASMessage>_R
                   ->_R <[AS.Types.ASUser]>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
0f69bdd46238656e6af4ae93e689f813
  broadcastFiltered1 :: AS.Types.ASMessage
                        -> [AS.Types.ASUser]
                        -> GHC.Prim.State# GHC.Prim.RealWorld
                        -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3,
       Strictness: <S(LLLS),1*U(1*U,1*U,1*U,1*U)><S,1*U><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ w :: AS.Types.ASMessage
                     w1 :: [AS.Types.ASUser]
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w of ww { AS.Types.Message ww1 ww2 ww3 ww4 ->
                   AS.Handler.$wa1 ww1 ww2 ww3 ww4 w1 w2 }) -}
bf36e479278580be77b6a9949b877ee4
  handleAcknowledge :: AS.Types.ASUser -> GHC.Types.IO ()
    {- Arity: 2,
       Strictness: <S(LS(SSSC(C(S))L)L),1*U(A,1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A),A)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Handler.handleAcknowledge1
                    `cast`
                  (<AS.Types.ASUser>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
8f7c13a6f4097de588641bcf81bc9bcf
  handleAcknowledge1 :: AS.Types.ASUser
                        -> GHC.Prim.State# GHC.Prim.RealWorld
                        -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 2,
       Strictness: <S(LS(SSSC(C(S))L)L),1*U(A,1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A),A)><L,U>,
       Unfolding: InlineRule (2, True, False)
                  (\ user :: AS.Types.ASUser
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case user of wild { AS.Types.UserClient ds1 ds2 ds3 ->
                   case ds2 of wild1 { Network.WebSockets.Connection.Connection dt ds ds4 ds5 dt1 ->
                   (ds5
                      (Network.WebSockets.Types.DataMessage
                         (Network.WebSockets.Types.Text
                            (Network.WebSockets.Types.$fWebSocketsDataText_$ctoLazyByteString
                               AS.Handler.handleAcknowledge2))))
                     `cast`
                   (GHC.Types.NTCo:IO[0] <()>_R)
                     eta } }) -}
7bf877574189b70678ab4c72fdc0ab75
  handleAcknowledge2 :: Data.Text.Internal.Text
    {- Unfolding: (Data.Text.Show.unpackCString# "ACK"#) -}
0514065ba76f88a505a793a25fd064ec
  handleAddTags :: AS.Types.ASUser
                   -> GHC.MVar.MVar AS.Types.ServerState
                   -> AS.Types.ASMessage
                   -> GHC.Types.IO ()
    {- Arity: 4,
       Strictness: <L,1*U(1*U,1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A),A)><L,U(U)><S(LLLS),1*U(U(U,U,U),A,A,1*U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Handler.handleAddTags1
                    `cast`
                  (<AS.Types.ASUser>_R
                   ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R <AS.Types.ASMessage>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
dc16e8ee0aad5735d9018c36f287089c
  handleAddTags1 :: AS.Types.ASUser
                    -> GHC.MVar.MVar AS.Types.ServerState
                    -> AS.Types.ASMessage
                    -> GHC.Prim.State# GHC.Prim.RealWorld
                    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4,
       Strictness: <L,1*U(1*U,1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A),A)><L,U(U)><S(LLLS),1*U(U(U,U,U),A,A,1*U)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (4, True, False)
                  (\ w :: AS.Types.ASUser
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     w2 :: AS.Types.ASMessage
                     w3 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w2 of ww { AS.Types.Message ww1 ww2 ww3 ww4 ->
                   AS.Handler.$wa2 w w1 ww1 ww4 w3 }) -}
660ad16f9b3f1c51da17a0e1ea95445a
  handleAddTags2 :: AS.Types.ASPayload
    {- HasNoCafRefs, Strictness: m1,
       Unfolding: (AS.Types.PayloadN GHC.Tuple.()) -}
5db141a0729e7e2417fc8c92802bd134
  handleAddTags3 :: AS.Types.ASResult {- Strictness: b -}
e6064dcaf18efd5104d0df50e5a94fd4
  handleAddTags4 :: AS.Types.ASAction {- Strictness: b -}
2ac15358001aa37bf9c16981b8be02bc
  handleAddTags5 :: GHC.Types.IO () {- Strictness: b -}
a9707b169b4a7440076ce2f443f8d2dd
  handleClear :: GHC.MVar.MVar AS.Types.ServerState
                 -> GHC.Types.IO ()
    {- Arity: 2, Strictness: <S,1*U(U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Handler.handleClear1
                    `cast`
                  (<GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
dc0b3a52b5fc478dc481326fef8b3418
  handleClear1 :: GHC.MVar.MVar AS.Types.ServerState
                  -> GHC.Prim.State# GHC.Prim.RealWorld
                  -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 2, Strictness: <S,1*U(U)><L,U>,
       Unfolding: InlineRule (2, True, False)
                  (\ state :: GHC.MVar.MVar AS.Types.ServerState
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case state of wild { GHC.MVar.MVar mvar# ->
                   case GHC.Prim.readMVar#
                          @ GHC.Prim.RealWorld
                          @ AS.Types.ServerState
                          mvar#
                          s of ds1 { (#,#) ipv ipv1 ->
                   case ipv1 of wild1 { AS.Types.State ucs ds ds2 ->
                   AS.Handler.broadcastFiltered1
                     AS.Handler.handleClear2
                     ucs
                     ipv } } }) -}
5ac214c378ff408cd410582557307192
  handleClear2 :: AS.Types.ASMessage
    {- Strictness: m,
       Unfolding: (AS.Types.Message
                     Data.Text.Internal.empty_
                     AS.Types.NoAction
                     AS.Handler.handleClear3
                     AS.Types.failureMessage1) -}
2858ce0e5ed2a28449b110abeaeacdd9
  handleClear3 :: AS.Types.ASResult
    {- HasNoCafRefs, Strictness: m2,
       Unfolding: (AS.Types.Failure (GHC.Types.[] @ GHC.Types.Char)) -}
c8d3f863ac558d628f93cd8b990ca984
  handleClose :: AS.Types.ASUser
                 -> GHC.MVar.MVar AS.Types.ServerState
                 -> AS.Types.ASMessage
                 -> GHC.Types.IO ()
    {- Arity: 4,
       Strictness: <L,U(U(U,U,U),A,A)><L,1*U(U)><S(LLLS),1*U(A,A,A,1*U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Handler.handleClose1
                    `cast`
                  (<AS.Types.ASUser>_R
                   ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R <AS.Types.ASMessage>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
fa21cc3672b9e0eb9c4bb4d8f602bdea
  handleClose1 :: AS.Types.ASUser
                  -> GHC.MVar.MVar AS.Types.ServerState
                  -> AS.Types.ASMessage
                  -> GHC.Prim.State# GHC.Prim.RealWorld
                  -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4,
       Strictness: <L,U(U(U,U,U),A,A)><L,1*U(U)><S(LLLS),1*U(A,A,A,1*U)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (4, True, False)
                  (\ w :: AS.Types.ASUser
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     w2 :: AS.Types.ASMessage
                     w3 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w2 of ww { AS.Types.Message ww1 ww2 ww3 ww4 ->
                   AS.Handler.$wa4 w w1 ww4 w3 }) -}
75bfb117cfdef7ce74e6c335ab48f138
  handleClose2 :: GHC.Types.IO () {- Strictness: b -}
2cf51d8fb4e9befe58e00ceba9e67bcd
  handleCopy :: AS.Types.ASUser
                -> GHC.MVar.MVar AS.Types.ServerState
                -> AS.Types.ASPayload
                -> GHC.Types.IO ()
    {- Arity: 4,
       Strictness: <L,1*U(1*U(U,U,U),1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A),A)><S,1*U(U)><S,1*U><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Handler.handleCopy1
                    `cast`
                  (<AS.Types.ASUser>_R
                   ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R <AS.Types.ASPayload>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
c0d2dfcdf91058597e18b0899fb75c55
  handleCopy1 :: AS.Types.ASUser
                 -> GHC.MVar.MVar AS.Types.ServerState
                 -> AS.Types.ASPayload
                 -> GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4,
       Strictness: <L,1*U(1*U(U,U,U),1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A),A)><S,1*U(U)><S,1*U><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (4, True, False)
                  (\ w :: AS.Types.ASUser
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     w2 :: AS.Types.ASPayload
                     w3 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w1 of ww { GHC.MVar.MVar ww1 ->
                   AS.Handler.$wa5 w ww1 w2 w3 }) -}
a8242851c77ea82ac97851e2a7ecadcb
  handleCopyForced :: AS.Types.ASUser
                      -> GHC.MVar.MVar AS.Types.ServerState
                      -> AS.Types.ASPayload
                      -> GHC.Types.IO ()
    {- Arity: 4, Strictness: <L,A><L,A><S,1*U><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Handler.handleCopyForced1
                    `cast`
                  (<AS.Types.ASUser>_R
                   ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R <AS.Types.ASPayload>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
7bce512969e4bf78452a7624cfe55d39
  handleCopyForced1 :: AS.Types.ASUser
                       -> GHC.MVar.MVar AS.Types.ServerState
                       -> AS.Types.ASPayload
                       -> GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4, Strictness: <L,A><L,A><S,1*U><L,U>, Inline: INLINE[0],
       Unfolding: InlineRule (4, True, True)
                  (\ w :: AS.Types.ASUser
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     w2 :: AS.Types.ASPayload
                     w3 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   AS.Handler.$wa6 w2 w3) -}
f79224129c428a19b87fc11bcdc41d8c
  handleCopyForced2 :: GHC.Types.IO () {- Strictness: b -}
90ec430a9fbd602522f868e671a77725
  handleDelete :: AS.Types.ASUser
                  -> GHC.MVar.MVar AS.Types.ServerState
                  -> AS.Types.ASPayload
                  -> GHC.Types.IO ()
    {- Arity: 4,
       Strictness: <L,1*U(1*U(U,U,U),A,A)><S,1*U(U)><S,1*U><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Handler.handleDelete1
                    `cast`
                  (<AS.Types.ASUser>_R
                   ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R <AS.Types.ASPayload>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
8d28524075f0a6005223a2ad24171555
  handleDelete1 :: AS.Types.ASUser
                   -> GHC.MVar.MVar AS.Types.ServerState
                   -> AS.Types.ASPayload
                   -> GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4,
       Strictness: <L,1*U(1*U(U,U,U),A,A)><S,1*U(U)><S,1*U><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (4, True, False)
                  (\ w :: AS.Types.ASUser
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     w2 :: AS.Types.ASPayload
                     w3 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w1 of ww { GHC.MVar.MVar ww1 ->
                   AS.Handler.$wa7 w ww1 w2 w3 }) -}
f6c22b27b7339ddd7979b32d1827d522
  handleEval :: GHC.MVar.MVar AS.Types.ServerState
                -> AS.Types.ASMessage
                -> GHC.Types.IO ()
    {- Arity: 3, Strictness: <L,U(U)><L,1*U(U(U,U,U),U,U,1*U)><L,U>,
       Unfolding: (AS.Handler.handleEval1
                     `cast`
                   (<GHC.MVar.MVar AS.Types.ServerState>_R
                    ->_R <AS.Types.ASMessage>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
92400494eeb027c9b0653d9877a8d12f
  handleEval1 :: GHC.MVar.MVar AS.Types.ServerState
                 -> AS.Types.ASMessage
                 -> GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3, Strictness: <L,U(U)><L,1*U(U(U,U,U),U,U,1*U)><L,U>,
       Unfolding: (\ state :: GHC.MVar.MVar AS.Types.ServerState
                     msg :: AS.Types.ASMessage
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case GHC.IO.Handle.Text.hPutStr2
                          GHC.IO.Handle.FD.stdout
                          AS.Handler.handleEval4
                          GHC.Types.True
                          s of ds1 { (#,#) ipv ipv1 ->
                   case msg of ww { AS.Types.Message ww1 ww2 ww3 ww4 ->
                   case AS.Dispatch.Core.$wa2
                          state
                          ww1
                          ww2
                          ww3
                          ww4
                          ipv of ds2 { (#,#) ipv2 ipv3 ->
                   GHC.Prim.catch#
                     @ ()
                     @ GHC.Exception.SomeException
                     (AS.Handler.handleEval3 state ipv3)
                     AS.Handler.handleEval2
                     ipv2 } } }) -}
9dfdd173b067da522abc15d64e78e181
  handleEval2 :: GHC.Exception.SomeException
                 -> GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (\ e :: GHC.Exception.SomeException
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   GHC.IO.Handle.Text.hPutStr2
                     GHC.IO.Handle.FD.stdout
                     (GHC.CString.unpackAppendCString#
                        "error"#
                        (case e of wild { GHC.Exception.SomeException e0 $dException e1 ->
                         GHC.Show.showsPrec
                           @ e0
                           (GHC.Exception.$p2Exception @ e0 $dException)
                           GHC.Show.shows27
                           e1
                           (GHC.Types.[] @ GHC.Types.Char) }))
                     GHC.Types.True
                     eta) -}
518ad00795db96a68d7b8bb1d7af6b1a
  handleEval3 :: GHC.MVar.MVar AS.Types.ServerState
                 -> AS.Types.ASMessage
                 -> GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3, Strictness: <S,1*U(U)><L,1*U(1*U,1*U,1*U,1*U)><L,U>,
       Unfolding: InlineRule (3, True, False)
                  (\ state :: GHC.MVar.MVar AS.Types.ServerState
                     msg :: AS.Types.ASMessage
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case state of wild { GHC.MVar.MVar mvar# ->
                   case GHC.Prim.readMVar#
                          @ GHC.Prim.RealWorld
                          @ AS.Types.ServerState
                          mvar#
                          s of ds1 { (#,#) ipv ipv1 ->
                   case ipv1 of wild1 { AS.Types.State ucs ds ds2 ->
                   AS.Handler.broadcastFiltered1 msg ucs ipv } } }) -}
bec3ce7c1b1027ee49370a68640e2182
  handleEval4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "IN EVAL HANDLER"#) -}
fe13b6f24da567092ffdf62818a65a16
  handleEvalRepl :: AS.Types.ASUser
                    -> GHC.MVar.MVar AS.Types.ServerState
                    -> AS.Types.ASMessage
                    -> GHC.Types.IO ()
    {- Arity: 4,
       Strictness: <L,1*U(1*U,1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A),A)><L,A><L,1*U(A,1*U,A,1*U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Handler.handleEvalRepl1
                    `cast`
                  (<AS.Types.ASUser>_R
                   ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R <AS.Types.ASMessage>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
588231bd473c88504b57d497eb5c21cb
  handleEvalRepl1 :: AS.Types.ASUser
                     -> GHC.MVar.MVar AS.Types.ServerState
                     -> AS.Types.ASMessage
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4,
       Strictness: <L,1*U(1*U,1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A),A)><L,A><L,1*U(A,1*U,A,1*U)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (4, True, True)
                  (\ w :: AS.Types.ASUser
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     w2 :: AS.Types.ASMessage
                     w3 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   AS.Handler.$wa8 w w2 w3) -}
709a9c9b8822aa17a9ee190804a56c03
  handleGet :: AS.Types.ASUser
               -> GHC.MVar.MVar AS.Types.ServerState
               -> AS.Types.ASPayload
               -> GHC.Types.IO ()
    {- Arity: 4,
       Strictness: <L,1*U(1*U,1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A),A)><S,1*U(U)><S,1*U><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Handler.handleGet1
                    `cast`
                  (<AS.Types.ASUser>_R
                   ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R <AS.Types.ASPayload>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
84b5e8cad4e29bf022914d8f37218dff
  handleGet1 :: AS.Types.ASUser
                -> GHC.MVar.MVar AS.Types.ServerState
                -> AS.Types.ASPayload
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4,
       Strictness: <L,1*U(1*U,1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A),A)><S,1*U(U)><S,1*U><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (4, True, False)
                  (\ w :: AS.Types.ASUser
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     w2 :: AS.Types.ASPayload
                     w3 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w1 of ww { GHC.MVar.MVar ww1 ->
                   AS.Handler.$wa9 w ww1 w2 w3 }) -}
d167f53ee0783a259517a9718e8204a2
  handleImport :: GHC.MVar.MVar AS.Types.ServerState
                  -> AS.Types.ASMessage
                  -> GHC.Types.IO ()
    {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Handler.handleImport1
                    `cast`
                  (<GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R <AS.Types.ASMessage>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
371d18ba9c302d432c785f84aa9125b0
  handleImport1 :: GHC.MVar.MVar AS.Types.ServerState
                   -> AS.Types.ASMessage
                   -> GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,U>,
       Unfolding: InlineRule (3, True, True)
                  (\ state :: GHC.MVar.MVar AS.Types.ServerState
                     msg :: AS.Types.ASMessage
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   (# eta, GHC.Tuple.() #)) -}
a597563fb25f86d0974c2ae2c1f7a4c8
  handleNew :: GHC.MVar.MVar AS.Types.ServerState
               -> AS.Types.ASMessage
               -> GHC.Types.IO ()
    {- Arity: 3,
       Strictness: <S,1*U(U)><S(LLLS),1*U(1*U,1*U,A,1*U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Handler.handleNew1
                    `cast`
                  (<GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R <AS.Types.ASMessage>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
d073e90059948d627c47284b5c5ddc42
  handleNew1 :: GHC.MVar.MVar AS.Types.ServerState
                -> AS.Types.ASMessage
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3,
       Strictness: <S,1*U(U)><S(LLLS),1*U(1*U,1*U,A,1*U)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ w :: GHC.MVar.MVar AS.Types.ServerState
                     w1 :: AS.Types.ASMessage
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w of ww { GHC.MVar.MVar ww1 ->
                   case w1 of ww2 { AS.Types.Message ww3 ww4 ww5 ww6 ->
                   AS.Handler.$wa10 ww1 ww3 ww4 ww6 w2 } }) -}
18cc01b0f73aebad3e7cdfe991c0e0f9
  handleNew2 :: GHC.Types.IO () {- Strictness: b -}
df93443dfe8a4f8c7297cebbe96684ce
  handleOpen :: AS.Types.ASUser
                -> GHC.MVar.MVar AS.Types.ServerState
                -> AS.Types.ASMessage
                -> GHC.Types.IO ()
    {- Arity: 4,
       Strictness: <L,U(U(U,U,U),A,A)><L,1*U(U)><S(LLLS),1*U(A,A,A,1*U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Handler.handleOpen1
                    `cast`
                  (<AS.Types.ASUser>_R
                   ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R <AS.Types.ASMessage>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
b350ccd59f5ea97ffaa2f2339ab87677
  handleOpen1 :: AS.Types.ASUser
                 -> GHC.MVar.MVar AS.Types.ServerState
                 -> AS.Types.ASMessage
                 -> GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4,
       Strictness: <L,U(U(U,U,U),A,A)><L,1*U(U)><S(LLLS),1*U(A,A,A,1*U)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (4, True, False)
                  (\ w :: AS.Types.ASUser
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     w2 :: AS.Types.ASMessage
                     w3 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w2 of ww { AS.Types.Message ww1 ww2 ww3 ww4 ->
                   AS.Handler.$wa11 w w1 ww4 w3 }) -}
90d1b0cb0a882d2d8d323f7ed1d69e45
  handleOpen2 :: (GHC.Types.Int, GHC.Types.Int)
    {- HasNoCafRefs, Strictness: m,
       Unfolding: ((AS.Handler.handleOpen3, AS.Handler.handleOpen3)) -}
e6b9bc8f96e5ed0b54c55024f97f2623
  handleOpen3 :: GHC.Types.Int
    {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# (-1)) -}
2691e0b9a4e8cfc7516bde9fe5d246b4
  handleOpen4 :: GHC.Types.IO () {- Strictness: b -}
938a30225383fc0200925d8b981dde2a
  handleRedo :: AS.Types.ASUserId
                -> GHC.MVar.MVar AS.Types.ServerState
                -> GHC.Types.IO ()
    {- Arity: 3, Strictness: <L,1*U><S,1*U(U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Handler.handleRedo1
                    `cast`
                  (<AS.Types.ASUserId>_R
                   ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
6a323a0c623e316124714d5e7fc49d4d
  handleRedo1 :: AS.Types.ASUserId
                 -> GHC.MVar.MVar AS.Types.ServerState
                 -> GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3, Strictness: <L,1*U><S,1*U(U)><L,U>, Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ w :: AS.Types.ASUserId
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w1 of ww { GHC.MVar.MVar ww1 ->
                   AS.Handler.$wa12 w ww1 w2 }) -}
6cd3ae2f19d22385df5ff78575cf23f7
  handleRedo2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "Server processed redo"#) -}
91c48ab1af9c1b5c818d9bf9a4f73ab0
  handleRedo3 :: AS.Types.ASResult
    {- Unfolding: (AS.Types.Failure AS.Handler.handleRedo4) -}
5d733a7825a5e76d2db4282635a79ba4
  handleRedo4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "Too far forwards"#) -}
8ea62d9777643877d1ff1a3dc44cc443
  handleRemoveTags :: AS.Types.ASUser
                      -> GHC.MVar.MVar AS.Types.ServerState
                      -> AS.Types.ASMessage
                      -> GHC.Types.IO ()
    {- Arity: 4,
       Strictness: <L,1*U(1*U,1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A),A)><L,U(U)><S(LLLS),1*U(A,A,A,1*U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Handler.handleRemoveTags1
                    `cast`
                  (<AS.Types.ASUser>_R
                   ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R <AS.Types.ASMessage>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
646b3a235851f040f141873847d9b31e
  handleRemoveTags1 :: AS.Types.ASUser
                       -> GHC.MVar.MVar AS.Types.ServerState
                       -> AS.Types.ASMessage
                       -> GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4,
       Strictness: <L,1*U(1*U,1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A),A)><L,U(U)><S(LLLS),1*U(A,A,A,1*U)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (4, True, False)
                  (\ w :: AS.Types.ASUser
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     w2 :: AS.Types.ASMessage
                     w3 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w2 of ww { AS.Types.Message ww1 ww2 ww3 ww4 ->
                   AS.Handler.$wa13 w w1 ww4 w3 }) -}
2cc60264b33545da82bdbd0dfe73b4fb
  handleRemoveTags2 :: GHC.Types.IO () {- Strictness: b -}
b6188ef9b75fe04bbe701a6b73b7b307
  handleUndo :: AS.Types.ASUserId
                -> GHC.MVar.MVar AS.Types.ServerState
                -> GHC.Types.IO ()
    {- Arity: 3, Strictness: <L,1*U><S,1*U(U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Handler.handleUndo1
                    `cast`
                  (<AS.Types.ASUserId>_R
                   ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
a21bf27884a0f13cd27e5f4bcbd5b423
  handleUndo1 :: AS.Types.ASUserId
                 -> GHC.MVar.MVar AS.Types.ServerState
                 -> GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3, Strictness: <L,1*U><S,1*U(U)><L,U>, Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ w :: AS.Types.ASUserId
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w1 of ww { GHC.MVar.MVar ww1 ->
                   AS.Handler.$wa15 w ww1 w2 }) -}
c2dfa9ab552213b077a76a4df5b23ba1
  handleUndo2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "Server processed undo"#) -}
564af25f9afcef1349734b22a9810b64
  handleUndo3 :: AS.Types.ASResult
    {- Unfolding: (AS.Types.Failure AS.Handler.handleUndo4) -}
6285473ff0a54ff639eb65cd97276aa4
  handleUndo4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "Too far back"#) -}
d5a64852d5e18e03ea42e86236e9de4e
  handleUpdateWindow :: GHC.MVar.MVar AS.Types.ServerState
                        -> AS.Types.ASMessage
                        -> GHC.Types.IO ()
    {- Arity: 3,
       Strictness: <S,1*U(U)><S(LLLS),1*U(U(U,U,U),A,A,1*U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Handler.handleUpdateWindow1
                    `cast`
                  (<GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R <AS.Types.ASMessage>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
330d0bc4a71a7794151580576e86d9a9
  handleUpdateWindow1 :: GHC.MVar.MVar AS.Types.ServerState
                         -> AS.Types.ASMessage
                         -> GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3,
       Strictness: <S,1*U(U)><S(LLLS),1*U(U(U,U,U),A,A,1*U)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ w :: GHC.MVar.MVar AS.Types.ServerState
                     w1 :: AS.Types.ASMessage
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w of ww { GHC.MVar.MVar ww1 ->
                   case w1 of ww2 { AS.Types.Message ww3 ww4 ww5 ww6 ->
                   AS.Handler.$wa16 ww1 ww3 ww6 w2 } }) -}
fece0c4a54bade7d329667b0dd89755d
  processAddTag :: AS.Types.ASUser
                   -> GHC.MVar.MVar AS.Types.ServerState
                   -> AS.Types.ASLocation
                   -> AS.Types.ASMessage
                   -> AS.Types.ASCellTag
                   -> GHC.Types.IO ()
    {- Arity: 6,
       Strictness: <L,A><S,1*U(U)><L,U><L,1*U(1*U(U,U,U),A,A,A)><L,U><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Handler.processAddTag1
                    `cast`
                  (<AS.Types.ASUser>_R
                   ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R <AS.Types.ASLocation>_R
                   ->_R <AS.Types.ASMessage>_R
                   ->_R <AS.Types.ASCellTag>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
bbf0f370736204b3cfefc9087773b085
  processAddTag1 :: AS.Types.ASUser
                    -> GHC.MVar.MVar AS.Types.ServerState
                    -> AS.Types.ASLocation
                    -> AS.Types.ASMessage
                    -> AS.Types.ASCellTag
                    -> GHC.Prim.State# GHC.Prim.RealWorld
                    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 6,
       Strictness: <L,A><S,1*U(U)><L,U><L,1*U(1*U(U,U,U),A,A,A)><L,U><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (6, True, False)
                  (\ w :: AS.Types.ASUser
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     w2 :: AS.Types.ASLocation
                     w3 :: AS.Types.ASMessage
                     w4 :: AS.Types.ASCellTag
                     w5 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w1 of ww { GHC.MVar.MVar ww1 ->
                   AS.Handler.$wa3 ww1 w2 w3 w4 w5 }) -}
41ad28375d663f7592e5d79b7893734a
  processRemoveTag :: AS.Types.ASLocation
                      -> GHC.MVar.MVar AS.Types.ServerState
                      -> AS.Types.ASCellTag
                      -> GHC.Types.IO ()
    {- Arity: 4, Strictness: <L,U><S,1*U(U)><L,U><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Handler.processRemoveTag1
                    `cast`
                  (<AS.Types.ASLocation>_R
                   ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R <AS.Types.ASCellTag>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
3173484c970fcafe1a564589f977fa95
  processRemoveTag1 :: AS.Types.ASLocation
                       -> GHC.MVar.MVar AS.Types.ServerState
                       -> AS.Types.ASCellTag
                       -> GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4, Strictness: <L,U><S,1*U(U)><L,U><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (4, True, False)
                  (\ w :: AS.Types.ASLocation
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     w2 :: AS.Types.ASCellTag
                     w3 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w1 of ww { GHC.MVar.MVar ww1 ->
                   AS.Handler.$wa14 w ww1 w2 w3 }) -}
cef8932a8056dba70e84eb6df1e02ef5
  sendBroadcastFiltered :: GHC.MVar.MVar AS.Types.ServerState
                           -> AS.Types.ASMessage
                           -> GHC.Types.IO ()
    {- Arity: 3, Strictness: <S,1*U(U)><L,1*U(1*U,1*U,1*U,1*U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Handler.handleEval3
                    `cast`
                  (<GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R <AS.Types.ASMessage>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
d1d4133e0a27086d847076038b04b0d3
  sendToOriginalUser :: AS.Types.ASUser
                        -> AS.Types.ASMessage
                        -> GHC.Types.IO ()
    {- Arity: 3,
       Strictness: <S(LS(SSSC(C(S))L)L),1*U(1*U,1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A),A)><L,1*U(A,1*U,1*U,1*U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Handler.sendToOriginalUser1
                    `cast`
                  (<AS.Types.ASUser>_R
                   ->_R <AS.Types.ASMessage>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
d4cf081e366dfebd6ed5bd900a26eaa4
  sendToOriginalUser1 :: AS.Types.ASUser
                         -> AS.Types.ASMessage
                         -> GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3,
       Strictness: <S(LS(SSSC(C(S))L)L),1*U(1*U,1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A),A)><L,1*U(A,1*U,1*U,1*U)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ w :: AS.Types.ASUser
                     w1 :: AS.Types.ASMessage
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w of ww { AS.Types.UserClient ww1 ww2 ww3 ->
                   case ww2 of ww4 { Network.WebSockets.Connection.Connection ww5 ww6 ww7 ww8 ww9 ->
                   (ww8
                      (Network.WebSockets.Types.DataMessage
                         (Network.WebSockets.Types.Text
                            (Data.ByteString.Builder.toLazyByteString
                               (case w1 of wild { AS.Types.Message ds1 a1 r p ->
                                case AS.Types.$w$ctoJSON3 ww1 a1 r p of ww10 { (##) ww11 ->
                                Data.Aeson.Encode.ByteString.encodeToByteStringBuilder
                                  (Data.Aeson.Types.Internal.Object ww11) } })))))
                     `cast`
                   (GHC.Types.NTCo:IO[0] <()>_R)
                     w2 } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

