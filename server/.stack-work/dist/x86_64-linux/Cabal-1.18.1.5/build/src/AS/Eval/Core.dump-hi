
==================== FINAL INTERFACE ====================
2015-09-24 03:38:27.456579 UTC

interface alphasheets-0.1.0.0:AS.Eval.Core 7084
  interface hash: dba91ce83784d3f06a7731f59e00eec5
  ABI hash: 0a0d946149f3ecace6e4fde0a14640e4
  export-list hash: a8fd7d5e67e40ad69836b4f35807868b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e156f5ccc0a4b7238641a9085ca60f8f
  used TH splices: True
  where
exports:
  AS.Eval.Core.clearReplRecord
  AS.Eval.Core.doEval
  AS.Eval.Core.eval
  AS.Eval.Core.evalCode
  AS.Eval.Core.evalCodeRepl
  AS.Eval.Core.evalExpression
  AS.Eval.Core.evalRef
  AS.Eval.Core.evalString
  AS.Eval.Core.pyString
  AS.Eval.Core.pyfiString
  AS.Eval.Core.readOutput
  AS.Eval.Core.runFile
  AS.Eval.Core.runReplFile
  AS.Eval.Core.writeExecFile
  AS.Eval.Core.writeReplFile
  AS.Eval.Core.writeReplRecord
module dependencies: AS.Config.Paths AS.Config.Settings
                     AS.Eval.Lang AS.Parsing.Common AS.Parsing.Eval AS.Parsing.In
                     AS.Parsing.Out AS.Types AS.Util
package dependencies: BoundedChan-1.0.3.0 SHA-1.6.4.2 aeson-0.8.1.1
                      array-0.5.0.0 attoparsec-0.13.0.1 base base64-bytestring-1.0.0.1
                      binary-0.7.1.0 blaze-builder-0.4.0.1 bytestring-0.10.4.0
                      bytestring-lexing-0.5.0.2 case-insensitive-1.2.0.4 cereal-0.4.1.1
                      containers-0.5.5.1 crypto-api-0.13.2 deepseq-1.3.0.2
                      directory-1.2.2.1 dlist-0.7.1.1 entropy-0.3.7 filepath-1.3.0.2
                      ghc-prim hashable-1.2.3.3 hedis-0.6.9 integer-gmp
                      monad-control-1.0.0.4 mtl-2.2.1 network-2.6.2.1 parsec-3.1.9
                      pretty-1.1.1.1 primitive-0.6 process-1.2.3.0 pureMD5-2.1.2.1
                      pyfi-0.4.0.4 random-1.1 regex-base-0.93.2 regex-posix-0.95.2
                      resource-pool-0.2.3.2 scientific-0.3.3.8 split-0.2.2 stm-2.4.4
                      strict-0.3.2 tagged-0.8.1 template-haskell text-1.2.1.1
                      time-1.5.0.1 transformers-0.4.3.0 transformers-base-0.4.4
                      unix-2.7.1.0 unordered-containers-0.2.5.1 uuid-1.3.10
                      uuid-types-1.0.1 vector-0.11.0.0 websockets-0.9.5.0
orphans: aeson-0.8.1.1:Data.Aeson.Types.Generic
         aeson-0.8.1.1:Data.Aeson.Types.Instances
         aeson-0.8.1.1:Data.Aeson.Types.Internal
         alphasheets-0.1.0.0:AS.Eval.Lang alphasheets-0.1.0.0:AS.Parsing.In
         attoparsec-0.13.0.1:Data.Attoparsec.ByteString.Char8 base:GHC.Base
         base:GHC.Float base:GHC.Real binary-0.7.1.0:Data.Binary.Generic
         bytestring-0.10.4.0:Data.ByteString.Builder
         bytestring-lexing-0.5.0.2:Data.ByteString.Lex.Fractional
         crypto-api-0.13.2:Crypto.Classes crypto-api-0.13.2:Crypto.Random
         hashable-1.2.3.3:Data.Hashable.Generic
         network-2.6.2.1:Network.Socket network-2.6.2.1:Network.Socket.Types
         pyfi-0.4.0.4:Python random-1.1:System.Random
         regex-base-0.93.2:Text.Regex.Base.Context
         regex-posix-0.95.2:Text.Regex.Posix.ByteString
         regex-posix-0.95.2:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2:Text.Regex.Posix.Sequence
         regex-posix-0.95.2:Text.Regex.Posix.String
         resource-pool-0.2.3.2:Data.Pool stm-2.4.4:Control.Monad.STM
         template-haskell:Language.Haskell.TH.PprLib text-1.2.1.1:Data.Text
         text-1.2.1.1:Data.Text.Lazy text-1.2.1.1:Data.Text.Show
         time-1.5.0.1:Data.Time.Calendar.Gregorian
         time-1.5.0.1:Data.Time.Format.Parse
         time-1.5.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.4.3.0:Control.Monad.Trans.Error
         vector-0.11.0.0:Data.Vector.Fusion.Bundle
         vector-0.11.0.0:Data.Vector.Unboxed
family instance modules: alphasheets-0.1.0.0:AS.Types
                         attoparsec-0.13.0.1:Data.Attoparsec.Internal.Types
                         base:Control.Applicative base:Data.Either base:Data.Monoid
                         base:Data.Type.Equality base:GHC.Exts base:GHC.Generics
                         dlist-0.7.1.1:Data.DList
                         monad-control-1.0.0.4:Control.Monad.Trans.Control
                         primitive-0.6:Control.Monad.Primitive tagged-0.8.1:Data.Tagged
                         text-1.2.1.1:Data.Text text-1.2.1.1:Data.Text.Lazy
                         unordered-containers-0.2.5.1:Data.HashMap.Base
                         unordered-containers-0.2.5.1:Data.HashSet
                         uuid-types-1.0.1:Data.UUID.Types.Internal
                         uuid-types-1.0.1:Data.UUID.Types.Internal.Builder
                         vector-0.11.0.0:Data.Vector vector-0.11.0.0:Data.Vector.Primitive
                         vector-0.11.0.0:Data.Vector.Storable
                         vector-0.11.0.0:Data.Vector.Unboxed
                         vector-0.11.0.0:Data.Vector.Unboxed.Base
import  -/  AS.Config.Settings b59cada5dab6da716812ef29c8d0a55f
  exports: 0c823ce19dbdd82846e3dcfdd9e8e922
  isDebug 6965ad1e55c3b281bd9e52a088dd739a
import  -/  AS.Eval.Lang 1ebaeacd881c235fd2a8983da5e9d146
  exports: 1de0d43afedb183b51cd3a9e0a515463
  addCompileCmd 0a6aa945f246491ee0b44d95715ee5f7
  formatRunArgs f54e19cf0001a7d6c48fb28c54b6d91c
  getReplRecord 931a82e496c7a9157c4471bfed80bd3f
  getReplRecordFile 24fa1ea45956553ed9dcd6c20dff38e7
  getRunFile 6a3564ced5bf0451a37a7ca3b72b77b3
  getRunReplFile df11a428981a690a0953ccf198e8cc11
  getRunnerArgs f0dff3b39a992c21f6c0da4074c830eb
  getRunnerCmd 607e49ed3fa2fab17bb4d975c4e808cf
  getRunnerCmdRepl 78a001cdd3ffed504cb0407d47e9958b
  interpolate f02601ac379c0b3462501d2ede9fa5f1
  interpolateFile 21dddf0e4170799c2989f52fcc5221fb
  interpolateFileRepl bce53f1e6a7ddde4b15f56e02f1d1c16
  lookupString 4bfe0917fa3db2ae7f5566126279e610
import  -/  AS.Parsing.Common ceccfbae6a55ecc56f531616855b9b06
  exports: b53f07d91299e788b6ffa7cfbc3e8f8f
import  -/  AS.Parsing.Eval a337c846c3c62b9dd3b0d4385077fea6
  exports: 26258216dfa5e4529b0daad0f5a7444b
  getReplExpressions 9ee68480591cd9a1354b721b9e69a2e1
import  -/  AS.Parsing.In 98eb4c4c40887c46f7e5ad3d1e6d68e6
  exports: 906b8f0955301c1a3a8c568e58f43d5d
  parseValue 1562806cc3fe51ea4005e4579a40e195
import  -/  AS.Parsing.Out dd270cee574919ef59c3b5c824275231
  exports: b4cc2ee9878e9c201d4134316c957a72
  exLocToASLocation 31e174c69836028e375c5dade213c1d6
  excelMatch 9b9ec9f71fb465c6567bd9be87fbfd23
  getMatchesWithContext 577784235c207381cf34d48eb7d1e701
  replaceMatches efc937eaa950cd7daac838c89238cffe
import  -/  AS.Types e3666650dafeff86b49d80330a77be8c
  exports: f8584b3856684401ece78f5d630831a9
  ASExpression 64e605941635d5560dadb6b522a83662
  ASLanguage 37e5d158f6c905c972eb637f34e85db0
  ASLocation 42b88bd590b6186a8f42af5a0deb461a
  ASSheetId 4ed60fa4a266e9c370748b465970547f
  ASValue cf27945d6d550d5b2c4aa963af53bf25
  Excel 42d5319c0fb1ce752e5a0b3af0288451
  Expression f785db95121a6dab5f264f3d6c185f9b
  OCaml 5b3b1ae20cfc4a6a1a4504a2b84e1b52
  Python ac7cdaae311730879724e4fbfab50a2b
  Reference 07c3f14712d76d5812c8dbd70307f517
  SQL e4a5a897edfd83a9739604cfeb3dd472
  ValueError 809b295d50dee23502f37980ed790cf0
  ValueL 3869c969a355ac446978790d8e12a1f0
  expression 6ea1c8a95a3119194a24a1b062d4f02c
  language 96d4cc4ee6772e20c09c6cc6a5feae9a
  locSheetId 0eb45f0ce468cda62d570bcb8b46f9d1
import  -/  AS.Util 7d03dc2552b02355618f794279df874f
  exports: 061da0521eb01812fd74bf75a38cb988
  printTimed 35cb21e1f23638a3173441d7200c130f
import  -/  base:Control.Applicative 30b769206cb5c020684e1bda0d7e7dd3
import  -/  base:Control.Monad 483e787e07c2e49f1fb1c1b88665cb92
import  -/  base:Data.List 8b77870d02d66076337587b759b7ee19
import  -/  base:Data.Maybe 5034d40e23c3a7110309f188001df4ca
import  -/  base:Data.Tuple cac4e06c48274e85317bd3e59867ef5b
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:GHC.IO 4f1da187b3631b8d72997b7dc992301d
import  -/  base:GHC.IO.Handle.Text 69f1e461016fd70cdf6f3676c04d367a
import  -/  base:GHC.List 4cff382327e59a5787355ca0a4174450
import  -/  base:GHC.Num 5e7786970581cacc802bf850d458a30b
import  -/  base:GHC.Show cf1a7ff9edb0f41528085aad04d33753
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  base:System.IO cadd0efb01c47ddd8f52d750739fdbdf
import  -/  containers-0.5.5.1:Data.Map 39e9346954b9366e01d2c8afb617e216
import  -/  containers-0.5.5.1:Data.Map.Base 4216c6c0396261d88891bb4aaa09340a
import  -/  ghc-prim:GHC.Classes 3e6cbe1e7e80480408cfa8d5450726a0
import  -/  ghc-prim:GHC.Types dcba736fa3dfba12d307ab18354845d2
import  -/  process-1.2.3.0:System.Process b89d6ff64677fd5d7d336dbf1aa71d74
import  -/  pyfi-0.4.0.4:Python a85687a529c2e6b9e46ec356585093e2
import  -/  text-1.2.1.1:Data.Text ddf865ef7152d1de0d03707558cc6523
import  -/  time-1.5.0.1:Data.Time.Clock f41c6b331f55aebceef7fdef0c152e53
ab0b8568d06571c8b153a6a9a347db83
  clearReplRecord :: AS.Types.ASLanguage -> GHC.Types.IO ()
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (AS.Eval.Core.clearReplRecord1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
a0dbb8054b75eac5f8218fccdac2b728
  clearReplRecord1 :: AS.Types.ASLanguage
                      -> GHC.Prim.State# GHC.Prim.RealWorld
                      -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case System.Posix.Directory.getWorkingDirectory1
                          eta of ds1 { (#,#) ipv ipv1 ->
                   System.IO.writeFile1
                     (GHC.Base.++
                        @ GHC.Types.Char
                        (System.FilePath.Posix.combine ipv1 AS.Config.Paths.getEvalPath2)
                        (case lang of wild {
                           DEFAULT -> AS.Eval.Lang.getReplRecordFile2
                           AS.Types.Python -> AS.Eval.Lang.getReplRecord2 }))
                     (GHC.Types.[] @ GHC.Types.Char)
                     ipv }) -}
562d41dfc5c15c072cc6530a476a6562
  doEval :: AS.Types.ASLanguage
            -> GHC.Base.String
            -> GHC.Types.IO GHC.Base.String
    {- Arity: 3, Strictness: <S,1*U><L,U><L,U>,
       Unfolding: (AS.Eval.Core.doEval1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R <GHC.Base.String>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
57ba5cdba636de78d1971a1ba970e5f3
  doEval1 :: AS.Types.ASLanguage
             -> GHC.Base.String
             -> GHC.Prim.State# GHC.Prim.RealWorld
             -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 3, Strictness: <S,1*U><L,U><L,U> -}
b814a7107af2f1e7b531e416ba7e288b
  eval :: GHC.Base.String
          -> AS.Types.ASLanguage
          -> GHC.Types.IO GHC.Base.String
    {- Arity: 3, Strictness: <L,U><L,1*U><L,U>,
       Unfolding: (AS.Eval.Core.eval1
                     `cast`
                   (<GHC.Base.String>_R
                    ->_R <AS.Types.ASLanguage>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
0e6e0548010cd463843a1947ce69ae0a
  eval1 :: GHC.Base.String
           -> AS.Types.ASLanguage
           -> GHC.Prim.State# GHC.Prim.RealWorld
           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 3, Strictness: <L,U><L,1*U><L,U>,
       Unfolding: (\ s :: GHC.Base.String
                     lang :: AS.Types.ASLanguage
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case System.Process.runInteractiveCommand1
                          s
                          eta of ds1 { (#,#) ipv ipv1 ->
                   case ipv1 of wild { (,,,) ds stdOut stdErr hProcess ->
                   case GHC.IO.Handle.Text.hGetContents1
                          stdOut
                          ipv of ds2 { (#,#) ipv2 ipv3 ->
                   case GHC.IO.Handle.Text.hGetContents1
                          stdErr
                          ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                   letrec {
                     a :: [GHC.Types.Char]
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                GHC.IO.Exception.ExitCode #)
                       {- Arity: 2, Strictness: <S,1*U><L,U> -}
                     = \ ds4 :: [GHC.Types.Char]
                         eta1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case ds4 of wild1 {
                         [] -> System.Process.callCommand3 hProcess eta1
                         : y ys -> case y of tpl { GHC.Types.C# ipv6 -> a ys eta1 } }
                   } in
                   case a ipv3 ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                   letrec {
                     a1 :: [GHC.Types.Char]
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.IO.Exception.ExitCode #)
                       {- Arity: 2, Strictness: <S,1*U><L,U> -}
                     = \ ds5 :: [GHC.Types.Char]
                         eta1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case ds5 of wild1 {
                         [] -> System.Process.callCommand3 hProcess eta1
                         : y ys -> case y of tpl { GHC.Types.C# ipv8 -> a1 ys eta1 } }
                   } in
                   case a1 ipv5 ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                   (# ipv8, AS.Eval.Core.readOutput lang ipv3 ipv5 #) } } } } } }) -}
389778f7e7b6ce7b06d3984f2d94a702
  evalCode :: AS.Types.ASSheetId
              -> Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue
              -> AS.Types.ASExpression
              -> GHC.Types.IO AS.Types.ASValue
    {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>,
       Unfolding: (AS.Eval.Core.evalCode1
                     `cast`
                   (<AS.Types.ASSheetId>_R
                    ->_R <Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue>_R
                    ->_R <AS.Types.ASExpression>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <AS.Types.ASValue>_R))) -}
bd75329c5f8e9426e756f2af3b8b0991
  evalCode1 :: AS.Types.ASSheetId
               -> Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue
               -> AS.Types.ASExpression
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ASValue #)
    {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U> -}
e774f8bb552f1ac4eac6ae71e33d0655
  evalCodeRepl :: AS.Types.ASExpression
                  -> GHC.Types.IO AS.Types.ASValue
    {- Arity: 2, Strictness: <S,1*U><L,U>,
       Unfolding: (AS.Eval.Core.evalCodeRepl1
                     `cast`
                   (<AS.Types.ASExpression>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <AS.Types.ASValue>_R))) -}
c508231a068d41b97698bf3e60c66ef1
  evalCodeRepl1 :: AS.Types.ASExpression
                   -> GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ASValue #)
    {- Arity: 2, Strictness: <S,1*U><L,U>,
       Unfolding: (\ ds :: AS.Types.ASExpression
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ds of wild {
                     AS.Types.Expression str lang
                     -> case AS.Eval.Lang.getReplTemplate1
                               lang
                               eta of ds1 { (#,#) ipv ipv1 ->
                        let {
                          ds2 :: (GHC.Base.String, GHC.Base.String)
                          = AS.Parsing.Eval.getReplExpressions lang str
                        } in
                        let {
                          evalFile :: GHC.Base.String
                          = AS.Eval.Lang.$wlayoutCodeFile
                              lang
                              (GHC.Types.[] @ GHC.Types.Char)
                              ipv1
                              (case ds2 of wild1 { (,) recordXp evalXp -> evalXp })
                        } in
                        case AS.Eval.Core.evalCodeRepl5
                               lang
                               evalFile
                               ipv of ds3 { (#,#) ipv2 ipv3 ->
                        case AS.Eval.Lang.getReplRecord1
                               lang
                               ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                        case AS.Eval.Core.evalCodeRepl4
                               lang
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  ipv5
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     AS.Eval.Core.evalCodeRepl3
                                     (case ds2 of wild1 { (,) recordXp evalXp -> recordXp })))
                               ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                        case AS.Eval.Core.doEval1
                               lang
                               evalFile
                               ipv6 of ds6 { (#,#) ipv8 ipv9 ->
                        case AS.Parsing.In.parseValue lang ipv9 of wild1 {
                          DEFAULT -> (# ipv8, wild1 #)
                          AS.Types.ValueError ds7 ds8 ds9 ds10
                          -> case AS.Eval.Core.evalCodeRepl4
                                    lang
                                    ipv5
                                    ipv8 of ds11 { (#,#) ipv10 ipv11 ->
                             (# ipv10, wild1 #) } } } } } } }
                     AS.Types.Reference ipv ipv1
                     -> case AS.Eval.Core.evalCodeRepl2
                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ASValue #)
                        of {} }) -}
094cdd2570b98b6cce04228f4767fa72
  evalCodeRepl2 :: GHC.Types.IO AS.Types.ASValue {- Strictness: b -}
1d4d43e8dbc1c2eb24c8060768f22c76
  evalCodeRepl3 :: GHC.Types.Char
    {- HasNoCafRefs, Unfolding: (GHC.Types.C# '\n') -}
9ffbd148b73777c7533c3f7613aa1dd2
  evalCodeRepl4 :: AS.Types.ASLanguage
                   -> GHC.Base.String
                   -> GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3, Strictness: <L,1*U><L,1*U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     contents :: GHC.Base.String
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case System.Posix.Directory.getWorkingDirectory1
                          eta of ds1 { (#,#) ipv ipv1 ->
                   System.IO.writeFile1
                     (GHC.Base.++
                        @ GHC.Types.Char
                        (System.FilePath.Posix.combine ipv1 AS.Config.Paths.getEvalPath2)
                        (case lang of wild {
                           DEFAULT -> AS.Eval.Lang.getReplRecordFile2
                           AS.Types.Python -> AS.Eval.Lang.getReplRecord2 }))
                     contents
                     ipv }) -}
ddd17ba7fa08d567890f563cfb583c62
  evalCodeRepl5 :: AS.Types.ASLanguage
                   -> GHC.Base.String
                   -> GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3, Strictness: <L,1*U><L,1*U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     contents :: GHC.Base.String
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case System.Posix.Directory.getWorkingDirectory1
                          eta of ds1 { (#,#) ipv ipv1 ->
                   System.IO.writeFile1
                     (GHC.Base.++
                        @ GHC.Types.Char
                        (System.FilePath.Posix.combine ipv1 AS.Config.Paths.getEvalPath2)
                        (case lang of wild {
                           DEFAULT -> AS.Eval.Lang.getRunReplFile6
                           AS.Types.R -> AS.Eval.Lang.getRunReplFile5
                           AS.Types.Python -> AS.Eval.Lang.getRunReplFile4
                           AS.Types.OCaml -> AS.Eval.Lang.getRunReplFile3
                           AS.Types.SQL -> AS.Eval.Lang.getRunReplFile2 }))
                     contents
                     ipv }) -}
8ae1aeda6f33d76e88082801b7a86e17
  evalExpression :: AS.Types.ASLocation
                    -> Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue
                    -> AS.Types.ASExpression
                    -> GHC.Types.IO AS.Types.ASValue
    {- Arity: 4, Strictness: <L,1*U><L,U><S,1*U><L,U>,
       Unfolding: (AS.Eval.Core.evalExpression1
                     `cast`
                   (<AS.Types.ASLocation>_R
                    ->_R <Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue>_R
                    ->_R <AS.Types.ASExpression>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <AS.Types.ASValue>_R))) -}
a6302a82c5c9b9d255805fe767fa740c
  evalExpression1 :: AS.Types.ASLocation
                     -> Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue
                     -> AS.Types.ASExpression
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ASValue #)
    {- Arity: 4, Strictness: <L,1*U><L,U><S,1*U><L,U>,
       Unfolding: (\ loc :: AS.Types.ASLocation
                     dict :: Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue
                     expr :: AS.Types.ASExpression
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case expr of wild {
                     AS.Types.Expression ds ds1
                     -> AS.Eval.Core.evalCode1 (AS.Types.locSheetId loc) dict wild eta
                     AS.Types.Reference ds ds1
                     -> AS.Eval.Core.evalExpression2 loc dict wild eta }) -}
394da93136dedba9481487713032fcae
  evalExpression2 :: AS.Types.ASLocation
                     -> Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue
                     -> AS.Types.ASExpression
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ASValue #)
    {- Arity: 4, Strictness: <L,1*U><L,U><S,1*U><L,U>,
       Unfolding: (\ loc :: AS.Types.ASLocation
                     dict :: Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue
                     ds :: AS.Types.ASExpression
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ds of wild {
                     AS.Types.Expression ipv ipv1
                     -> case AS.Eval.Core.evalExpression3
                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ASValue #)
                        of {}
                     AS.Types.Reference l ds1
                     -> case ds1 of wild1 { (,) a b ->
                        (# eta,
                           case AS.Eval.Lang.$s!1 @ AS.Types.ASValue l dict of wild2 {
                             DEFAULT -> AS.Eval.Lang.$s!1 @ AS.Types.ASValue loc dict
                             AS.Types.ValueL lst
                             -> case b of wild3 { GHC.Types.I# n0 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<# n0 0) of wild4 {
                                  GHC.Types.False
                                  -> case GHC.List.!!_sub @ AS.Types.ASValue lst n0 of wild5 {
                                       DEFAULT -> wild5
                                       AS.Types.ValueL row -> GHC.List.!! @ AS.Types.ASValue row a }
                                  GHC.Types.True
                                  -> case GHC.List.!!1
                                     ret_ty AS.Types.ASValue
                                     of {} } } } #) } }) -}
206cdb0ebaca2fbbf57bd6ee92077e12
  evalExpression3 :: GHC.Types.IO AS.Types.ASValue
    {- Strictness: b -}
87b43df571d9b522ba0b9641a4cf20cd
  evalRef :: AS.Types.ASLocation
             -> Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue
             -> AS.Types.ASExpression
             -> GHC.Types.IO AS.Types.ASValue
    {- Arity: 4, Strictness: <L,1*U><L,U><S,1*U><L,U>,
       Unfolding: (AS.Eval.Core.evalExpression2
                     `cast`
                   (<AS.Types.ASLocation>_R
                    ->_R <Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue>_R
                    ->_R <AS.Types.ASExpression>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <AS.Types.ASValue>_R))) -}
90f612f3570e36b626f9fd27553ca1fb
  evalString :: AS.Types.ASLanguage
                -> GHC.Base.String
                -> GHC.Types.IO AS.Types.ASValue
    {- Arity: 3, Strictness: <L,U><L,1*U><L,U>,
       Unfolding: (AS.Eval.Core.evalString1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R <GHC.Base.String>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <AS.Types.ASValue>_R))) -}
01d582abad9c5cb8089ed9ef44225f52
  evalString1 :: AS.Types.ASLanguage
                 -> GHC.Base.String
                 -> GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ASValue #)
    {- Arity: 3, Strictness: <L,U><L,1*U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     evalStr :: GHC.Base.String
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case Python.defVV1
                          @ GHC.Base.String
                          @ GHC.Base.String
                          Data.Aeson.Types.Instances.$fToJSON[]0_$ctoJSON
                            `cast`
                          (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0] <[GHC.Types.Char]>_N))
                          Data.Aeson.Types.Instances.$fFromJSON[]0_$cparseJSON
                            `cast`
                          (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0]
                                    <[GHC.Types.Char]>_N))
                          (GHC.Base.++ @ GHC.Types.Char evalStr AS.Eval.Core.pyString)
                          AS.Eval.Core.evalString2
                          s of ds1 { (#,#) ipv ipv1 ->
                   (# ipv, AS.Parsing.In.parseValue lang ipv1 #) }) -}
6e1bc8fbc565e75f090169a53565d3b7
  evalString2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "Hello"#) -}
e91c0501263c973f396232ce2a8c8db4
  pyString :: GHC.Base.String
    {- Unfolding: (GHC.CString.unpackCString#
                     "\n\
                     \def export(x=1):\n\
                     \\treturn repr(result)"#) -}
36372bac4c2e18725036a7bdd344c358
  pyfiString :: GHC.Base.String -> GHC.Types.IO GHC.Base.String
    {- Arity: 1, Strictness: <L,1*U>,
       Unfolding: (AS.Eval.Core.pyfiString1
                     `cast`
                   (<GHC.Base.String>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
3edab9f916f6e4455cce68ee430c9da9
  pyfiString1 :: GHC.Base.String
                 -> GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 1, Strictness: <L,1*U>,
       Unfolding: (\ evalStr :: GHC.Base.String ->
                   Python.defVV1
                     @ GHC.Base.String
                     @ GHC.Base.String
                     Data.Aeson.Types.Instances.$fToJSON[]0_$ctoJSON
                       `cast`
                     (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0] <[GHC.Types.Char]>_N))
                     Data.Aeson.Types.Instances.$fFromJSON[]0_$cparseJSON
                       `cast`
                     (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0]
                               <[GHC.Types.Char]>_N))
                     (GHC.Base.++ @ GHC.Types.Char evalStr AS.Eval.Core.pyString)
                     AS.Eval.Core.evalString2) -}
566306b063346f658d81a0e1989e8460
  readOutput :: AS.Types.ASLanguage
                -> GHC.Base.String
                -> GHC.Base.String
                -> GHC.Base.String
    {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U><L,1*U><S,1*U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     res :: GHC.Base.String
                     err :: GHC.Base.String ->
                   case err of wild {
                     [] -> res
                     : ipv ipv1
                     -> case lang of wild1 {
                          DEFAULT -> wild
                          AS.Types.Python
                          -> case res of wild2 { [] -> wild : ipv2 ipv3 -> wild2 } } }) -}
2245cb69042a913a902c05be15648a2f
  runFile :: AS.Types.ASLanguage -> GHC.Types.IO GHC.Base.String
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (AS.Eval.Core.runFile1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
9b9f271f45900d6c9c422e603eaa1c43
  runFile1 :: AS.Types.ASLanguage
              -> GHC.Prim.State# GHC.Prim.RealWorld
              -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case AS.Eval.Lang.getRunnerArgs1
                          lang
                          eta of ds1 { (#,#) ipv ipv1 ->
                   case AS.Eval.Lang.getRunFile1 lang ipv of ds2 { (#,#) ipv2 ipv3 ->
                   case AS.Eval.Lang.addCompileCmd1
                          lang
                          (AS.Eval.Lang.$wformatRunArgs
                             (AS.Eval.Lang.getRunnerCmd lang)
                             ipv3
                             ipv1)
                          ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                   AS.Eval.Core.eval1 ipv5 lang ipv4 } } }) -}
4e946c1da8b8c8746274681f86104f9b
  runReplFile :: AS.Types.ASLanguage -> GHC.Types.IO GHC.Base.String
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (AS.Eval.Core.runReplFile1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
1e5863a683f9c3eb4b43cbaa45cd00f8
  runReplFile1 :: AS.Types.ASLanguage
                  -> GHC.Prim.State# GHC.Prim.RealWorld
                  -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case AS.Eval.Lang.getRunnerArgs1
                          lang
                          eta of ds1 { (#,#) ipv ipv1 ->
                   case System.Posix.Directory.getWorkingDirectory1
                          ipv of ds2 { (#,#) ipv2 ipv3 ->
                   AS.Eval.Core.eval1
                     (case lang of wild {
                        DEFAULT -> AS.Eval.Lang.getRunnerCmdRepl1
                        AS.Types.Python
                        -> AS.Eval.Lang.$wformatRunArgs
                             AS.Eval.Lang.getRunnerCmd1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                (System.FilePath.Posix.combine ipv3 AS.Config.Paths.getEvalPath2)
                                AS.Eval.Lang.getRunReplFile4)
                             ipv1 })
                     lang
                     ipv2 } }) -}
64039dd84678ed63134701aa19f534ae
  writeExecFile :: AS.Types.ASLanguage
                   -> GHC.Base.String
                   -> GHC.Types.IO ()
    {- Arity: 3, Strictness: <L,1*U><L,1*U><L,U>,
       Unfolding: (AS.Eval.Core.writeExecFile1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R <GHC.Base.String>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
4eb256e691d09c27634380fb722137fd
  writeExecFile1 :: AS.Types.ASLanguage
                    -> GHC.Base.String
                    -> GHC.Prim.State# GHC.Prim.RealWorld
                    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3, Strictness: <L,1*U><L,1*U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     contents :: GHC.Base.String
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case AS.Eval.Lang.getRunFile1 lang eta of ds1 { (#,#) ipv ipv1 ->
                   System.IO.writeFile1 ipv1 contents ipv }) -}
c622afacf9d7d5a0e441a79c749b0cdb
  writeReplFile :: AS.Types.ASLanguage
                   -> GHC.Base.String
                   -> GHC.Types.IO ()
    {- Arity: 3, Strictness: <L,1*U><L,1*U><L,U>,
       Unfolding: (AS.Eval.Core.evalCodeRepl5
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R <GHC.Base.String>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
bf1f57e963c8571af3ca2bca789c2a94
  writeReplRecord :: AS.Types.ASLanguage
                     -> GHC.Base.String
                     -> GHC.Types.IO ()
    {- Arity: 3, Strictness: <L,1*U><L,1*U><L,U>,
       Unfolding: (AS.Eval.Core.evalCodeRepl4
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R <GHC.Base.String>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

