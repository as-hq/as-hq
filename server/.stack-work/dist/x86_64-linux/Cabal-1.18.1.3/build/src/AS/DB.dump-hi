
==================== FINAL INTERFACE ====================
2015-09-01 19:49:53.019778 UTC

interface alphasheets-0.1.0.0:AS.DB 7083
  interface hash: 0b9c24ef8fd55ce13e68388a5a89ad1d
  ABI hash: d1da9735084f4def655f259d6291ea4a
  export-list hash: b8d3e216c017511efcdf8107eca94954
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 5316f95d5f7b98addcee99ed907c3931
  used TH splices: False
  where
exports:
  AS.DB.addCommit
  AS.DB.bStrToASCommit
  AS.DB.bStrToASExpression
  AS.DB.bStrToASLocation
  AS.DB.bStrToASValue
  AS.DB.bStrToRelation
  AS.DB.bStrToTags
  AS.DB.cInfo
  AS.DB.canAccess
  AS.DB.canAccessAll
  AS.DB.canAccessSheet
  AS.DB.cellChunkSize
  AS.DB.chunkM
  AS.DB.chunkM_
  AS.DB.createSheet
  AS.DB.createWorkbook
  AS.DB.dagChunkSize
  AS.DB.deleteCells
  AS.DB.deleteChunkCells
  AS.DB.deleteChunkLocs
  AS.DB.deleteChunkVolatileCells
  AS.DB.deleteLocs
  AS.DB.deleteSheet
  AS.DB.deleteWorkbook
  AS.DB.genericChunkSize
  AS.DB.getCell
  AS.DB.getCells
  AS.DB.getChunkCells
  AS.DB.getDAG
  AS.DB.getSheet
  AS.DB.getVolatileLocs
  AS.DB.getWorkbook
  AS.DB.isPermissibleMessage
  AS.DB.maybeASCell
  AS.DB.pushCommit
  AS.DB.redo
  AS.DB.setCell
  AS.DB.setCells
  AS.DB.setChunkCells
  AS.DB.setChunkVolatileCells
  AS.DB.undo
  AS.DB.updateAfterEval
  AS.DB.updateChunkDAG
  AS.DB.updateDAG
module dependencies: AS.Types AS.Util
package dependencies: BoundedChan-1.0.3.0 SHA-1.6.4.2 aeson-0.8.1.1
                      array-0.5.0.0 attoparsec-0.13.0.1 base base64-bytestring-1.0.0.1
                      binary-0.7.1.0 blaze-builder-0.4.0.1 bytestring-0.10.4.0
                      bytestring-lexing-0.5.0.2 case-insensitive-1.2.0.4
                      containers-0.5.5.1 deepseq-1.3.0.2 dlist-0.7.1.1 entropy-0.3.7
                      ghc-prim hashable-1.2.3.3 hedis-0.6.8 integer-gmp
                      monad-control-1.0.0.4 mtl-2.2.1 network-2.6.2.1 primitive-0.5.2.1
                      random-1.1 resource-pool-0.2.3.2 scientific-0.3.3.8 split-0.2.2
                      stm-2.4.2 text-1.2.1.1 time-1.5.0.1 transformers-0.4.3.0
                      transformers-base-0.4.4 unix-2.7.1.0 unordered-containers-0.2.5.1
                      uuid-1.3.10 uuid-types-1.0.1 vector-0.10.9.1 websockets-0.9.5.0
orphans: aeson-0.8.1.1:Data.Aeson.Types.Generic
         aeson-0.8.1.1:Data.Aeson.Types.Instances
         aeson-0.8.1.1:Data.Aeson.Types.Internal
         attoparsec-0.13.0.1:Data.Attoparsec.ByteString.Char8 base:GHC.Base
         base:GHC.Float base:GHC.Real binary-0.7.1.0:Data.Binary.Generic
         bytestring-0.10.4.0:Data.ByteString.Builder
         bytestring-lexing-0.5.0.2:Data.ByteString.Lex.Fractional
         hashable-1.2.3.3:Data.Hashable.Generic
         network-2.6.2.1:Network.Socket network-2.6.2.1:Network.Socket.Types
         random-1.1:System.Random resource-pool-0.2.3.2:Data.Pool
         stm-2.4.2:Control.Monad.STM text-1.2.1.1:Data.Text
         text-1.2.1.1:Data.Text.Lazy text-1.2.1.1:Data.Text.Show
         time-1.5.0.1:Data.Time.Calendar.Gregorian
         time-1.5.0.1:Data.Time.Format.Parse
         time-1.5.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.4.3.0:Control.Monad.Trans.Error
         vector-0.10.9.1:Data.Vector.Fusion.Stream
         vector-0.10.9.1:Data.Vector.Unboxed
family instance modules: alphasheets-0.1.0.0:AS.Types
                         attoparsec-0.13.0.1:Data.Attoparsec.Internal.Types
                         base:Control.Applicative base:Data.Either base:Data.Monoid
                         base:Data.Type.Equality base:GHC.Exts base:GHC.Generics
                         dlist-0.7.1.1:Data.DList
                         monad-control-1.0.0.4:Control.Monad.Trans.Control
                         primitive-0.5.2.1:Control.Monad.Primitive text-1.2.1.1:Data.Text
                         text-1.2.1.1:Data.Text.Lazy
                         unordered-containers-0.2.5.1:Data.HashMap.Base
                         unordered-containers-0.2.5.1:Data.HashSet
                         uuid-types-1.0.1:Data.UUID.Types.Internal
                         uuid-types-1.0.1:Data.UUID.Types.Internal.Builder
                         vector-0.10.9.1:Data.Vector vector-0.10.9.1:Data.Vector.Primitive
                         vector-0.10.9.1:Data.Vector.Storable
                         vector-0.10.9.1:Data.Vector.Unboxed.Base
import  -/  aeson-0.8.1.1:Data.Aeson 2bcee634dc715d12e7154aed92c42567
import  -/  AS.Types 57177fd753daf2295937f583773f48c2
  exports: 6e42e59e48c9bd8a9ec1e6c5c6514bc2
  ASCell 8aaaba72e62199ec29d193feeafd5149
  ASCellTag fdc0ed9f737a15f02f6635f28a8109d8
  ASCommit 5c958e13f54c2ad011a482aa3c87d4a9
  ASCommit 357716470597b416930a47d082252963
  ASExpression 9cbd86115fab1fed071da19ea97623d5
  ASLocation a0a8734170556a1370de82a1630a4c6d
  ASMessage 4c981fc92afa9b0d3d0f889c5a8d7a7a
  ASSheet e371e54727c8f7f53b6538fb7c54b1bf
  ASSheetId 4ed60fa4a266e9c370748b465970547f
  ASUser 4187706b5feca3cee412cd2a03a405bc
  ASUserId 3094df477896c468afcf617b4934d3e3
  ASValue 9fbe83609efa13c71e95a441f7e5b8bf
  ASWorkbook c2153a3aa5546c05a17fb9c52baabe33
  Cell a71eaf14eaf14807100ece3dda35b9c0
  Message abb1a691675f78c4a5f27701b161e038
  PayloadC 262ab299cea24e7cd35ffdd0e30144bc
  PayloadCL 3db8e33fd6525f6996175a852a79b054
  PayloadL f2851d80f685c472f6a7f84b7b7544f2
  PayloadLL 2e35fdb1f7687f489f2ce0dc1e6d3be0
  PayloadSheet f5b516be2e4b1d4d5eb85444cb79c56e
  PayloadTags 39410d6c113f3b61a7f81cd108531a28
  PayloadW e628a4385e09acceecde17f60f40e966
  Sheet 3bbae61cefa3152949b5bdd1e7c4c310
  cellExpression 7be9bc118473a48b307dd8f9ea955922
  cellLocation f1401190ff92781469bd41791b16d46d
  cellTags caad5c9e272a91fa9d37ea7735244bf9
  cellValue a18d8335515fc012356e88d140248afb
  locSheetId dd4f183d0e554d077dabf8cd0b2ddf96
  sheetId 12d5026147189f81050c6c33ef9bd971
  sheetPermissions ffcca3e827e57eedb1c37059262f3ea8
  userId b59e1116911385e69ed7f7d2d17817f4
  windowSheetId 72d4af447e7a8d7c1ce690d5794c2d0b
import  -/  AS.Util fcc8b95dc3c2bad9df28c51cf1f39293
  exports: 47ea528d752de70f9f7cc438ef23ed30
  containsTrackingTag 773120b75fa1da6ce348b73faeed0bfe
  decomposeLocs 66ef07bc6ac89ed196e5675f5fe3a6eb
  getASTime 1326f0a9fd448a42c034f7c4c344cb4f
  getUniqueId 60c32243d3d8680410f7a7c577d8af73
  hasPermissions 5960715d35fe1d86560938381665aced
  hasVolatileTag 22fa9ba535ffdb9d03a97ab0fc03dd85
import  -/  base:Control.Applicative 30b769206cb5c020684e1bda0d7e7dd3
import  -/  base:Control.Concurrent 1be25cd1e2ac314074fafb26df0ff06b
import  -/  base:Control.Monad 483e787e07c2e49f1fb1c1b88665cb92
import  -/  base:Data.Either d1c890129a7c6a9ec02a642c6c2f4ed3
import  -/  base:Data.Functor 2a75672109006aa68920c9629500622a
import  -/  base:Data.List 0908c8f6208710e0f918cb6f09e882cc
import  -/  base:Data.Maybe 5034d40e23c3a7110309f188001df4ca
import  -/  base:Data.Tuple cac4e06c48274e85317bd3e59867ef5b
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:GHC.List 4cff382327e59a5787355ca0a4174450
import  -/  base:GHC.Show cf1a7ff9edb0f41528085aad04d33753
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  base:System.IO cadd0efb01c47ddd8f52d750739fdbdf
import  -/  base:Text.Read 6fe10a0a6d0a38c215de3b09e72ca556
import  -/  bytestring-0.10.4.0:Data.ByteString.Char8 6ba74203c82670d222b910afbd6fa1a4
import  -/  bytestring-0.10.4.0:Data.ByteString.Internal fa55d64693da6dc2853af02a961709cc
import  -/  bytestring-0.10.4.0:Data.ByteString.Lazy.Char8 a118adac239daed5c4f03b800d5d3693
import  -/  ghc-prim:GHC.Classes 3e6cbe1e7e80480408cfa8d5450726a0
import  -/  ghc-prim:GHC.Types dcba736fa3dfba12d307ab18354845d2
import  -/  hedis-0.6.8:Database.Redis 1816496c53d12c0544405c37b5ed17f1
import  -/  hedis-0.6.8:Database.Redis.Commands 1c8dbaba351c71ffa30b90d051365c11
import  -/  hedis-0.6.8:Database.Redis.Core 6836e7f7087b7d8fbcb24001f07a796a
import  -/  hedis-0.6.8:Database.Redis.Transactions a5aa167357ad8c4df0719db328292b1a
import  -/  mtl-2.2.1:Control.Monad.Trans a895895592675f11fcf1e6c722171af2
import  -/  network-2.6.2.1:Network 75c31e6848d384743e777db056b493d8
import  -/  split-0.2.2:Data.List.Split 9e8c4182840695ff3a75320d1faeebd2
import  -/  split-0.2.2:Data.List.Split.Internals 9eba89d19ec7034f3a51e3d7887f4bdb
import  -/  text-1.2.1.1:Data.Text b3c4fa3023eabdced6a311d2fdbd8c54
import  -/  text-1.2.1.1:Data.Text.IO 4fed59515c6adf3b8e249dd22b5b5fda
import  -/  time-1.5.0.1:Data.Time 83db74e45d592c48784d903af55214b0
11633b7c4ffa09f2a410675e9ff9191d
  $wa :: [AS.Types.ASLocation]
         -> GHC.Prim.State# GHC.Prim.RealWorld
         -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
    {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
       Unfolding: (\ w :: [AS.Types.ASLocation]
                     w1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case AS.DB.canAccessAll2 w w1 of ds1 { (#,#) ipv ipv1 ->
                   (# ipv,
                      GHC.List.all
                        @ GHC.Types.Bool
                        (GHC.Base.id @ GHC.Types.Bool)
                        ipv1 #) }) -}
055cf47b31d462e14e31828093a96694
  $wa1 :: AS.Types.ASPayload
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
    {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
       Unfolding: (\ ww :: AS.Types.ASPayload
                     w :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ww of wild {
                     DEFAULT -> (# w, GHC.Types.True #)
                     AS.Types.PayloadC cell -> (# w, GHC.Types.False #)
                     AS.Types.PayloadCL cells
                     -> case AS.DB.canAccessAll2
                               (GHC.Base.map
                                  @ AS.Types.ASCell
                                  @ AS.Types.ASLocation
                                  AS.Types.cellLocation
                                  cells)
                               w of ds1 { (#,#) ipv ipv1 ->
                        (# ipv,
                           GHC.List.all
                             @ GHC.Types.Bool
                             (GHC.Base.id @ GHC.Types.Bool)
                             ipv1 #) }
                     AS.Types.PayloadL loc -> (# w, GHC.Types.False #)
                     AS.Types.PayloadLL locs -> AS.DB.$wa locs w
                     AS.Types.PayloadSheet sheet -> (# w, GHC.Types.False #)
                     AS.Types.PayloadW window -> (# w, GHC.Types.False #)
                     AS.Types.PayloadTags ds loc -> (# w, GHC.Types.False #) }) -}
c98f81e32861fba6fd1a22bd9e4342db
  $wgo :: [Database.Redis.Transactions.Queued
               [Data.ByteString.Internal.ByteString]]
          -> (# Data.Vector.Vector Database.Redis.Protocol.Reply
                -> Data.Either.Either
                       Database.Redis.Protocol.Reply
                       [[Data.ByteString.Internal.ByteString]] #)
    {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
1a6bd0a1ccef8c646cd576c0d883ca9d
  $wmaybeASCell :: AS.Types.ASLocation
                   -> Data.Maybe.Maybe AS.Types.ASExpression
                   -> Data.Maybe.Maybe AS.Types.ASValue
                   -> Data.Maybe.Maybe [AS.Types.ASCellTag]
                   -> Data.Maybe.Maybe AS.Types.ASCell
    {- Arity: 4, HasNoCafRefs, Strictness: <L,U><S,1*U><L,1*U><L,1*U>,
       Unfolding: (\ ww :: AS.Types.ASLocation
                     ww1 :: Data.Maybe.Maybe AS.Types.ASExpression
                     ww2 :: Data.Maybe.Maybe AS.Types.ASValue
                     ww3 :: Data.Maybe.Maybe [AS.Types.ASCellTag] ->
                   case ww1 of wild {
                     Data.Maybe.Nothing -> Data.Maybe.Nothing @ AS.Types.ASCell
                     Data.Maybe.Just e
                     -> case ww2 of wild1 {
                          Data.Maybe.Nothing -> Data.Maybe.Nothing @ AS.Types.ASCell
                          Data.Maybe.Just v
                          -> case ww3 of wild2 {
                               Data.Maybe.Nothing -> Data.Maybe.Nothing @ AS.Types.ASCell
                               Data.Maybe.Just tags
                               -> Data.Maybe.Just
                                    @ AS.Types.ASCell
                                    (AS.Types.Cell ww e v tags) } } }) -}
681d7716d2b8397390a5dce4a584c2cb
  addCommit :: AS.Types.ASUser
               -> [AS.Types.ASCell]
               -> [AS.Types.ASCell]
               -> GHC.Types.IO ()
    {- Arity: 4, Strictness: <L,1*U(1*U(U,U,U),A,A)><L,U><L,U><L,U>,
       Unfolding: (AS.DB.addCommit1
                     `cast`
                   (<AS.Types.ASUser>_R
                    ->_R <[AS.Types.ASCell]>_R
                    ->_R <[AS.Types.ASCell]>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
0d556c648462894a25c90569d800f7a2
  addCommit1 :: AS.Types.ASUser
                -> [AS.Types.ASCell]
                -> [AS.Types.ASCell]
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4, Strictness: <L,1*U(1*U(U,U,U),A,A)><L,U><L,U><L,U>,
       Unfolding: (\ user :: AS.Types.ASUser
                     b :: [AS.Types.ASCell]
                     a4 :: [AS.Types.ASCell]
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   let {
                     a5 :: AS.Types.ASUserId
                     = case user of wild { AS.Types.User ds1 ds2 ds3 -> ds1 }
                   } in
                   case AS.DB.addCommit2
                          (AS.Types.ASCommit a5 b a4 AS.Util.getASTime2)
                          eta of ds1 { (#,#) ipv ipv1 ->
                   GHC.IO.Handle.Text.hPutStr2
                     GHC.IO.Handle.FD.stdout
                     (AS.Types.$w$cshowsPrec6
                        0
                        a5
                        b
                        a4
                        AS.Util.getASTime2
                        (GHC.Types.[] @ GHC.Types.Char))
                     GHC.Types.True
                     ipv }) -}
3ba465f4feb47bd18e1552704cff480a
  addCommit2 :: AS.Types.ASCommit
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 2,
       Strictness: <L,1*U(1*U(U,U,U),1*U,1*U,1*U(1*U,1*U(U),1*U(U),1*U(U)))><L,U> -}
cfa2ce69f0bfd28c2bf24927d4c431d5
  bStrToASCommit :: Data.Maybe.Maybe
                        Data.ByteString.Internal.ByteString
                    -> Data.Maybe.Maybe AS.Types.ASCommit
    {- Arity: 1, Strictness: <S,1*U>,
       Unfolding: (\ ds :: Data.Maybe.Maybe
                               Data.ByteString.Internal.ByteString ->
                   case ds of wild {
                     Data.Maybe.Nothing -> Data.Maybe.Nothing @ AS.Types.ASCommit
                     Data.Maybe.Just b
                     -> Data.Maybe.Just
                          @ AS.Types.ASCommit
                          (case Text.Read.readEither6
                                  @ AS.Types.ASCommit
                                  (Text.ParserCombinators.ReadP.run
                                     @ AS.Types.ASCommit
                                     AS.DB.bStrToASCommit3
                                     (case b of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                                      Data.ByteString.Internal.$wunpackAppendCharsLazy
                                        ww1
                                        ww2
                                        ww3
                                        ww4
                                        (GHC.Types.[] @ GHC.Types.Char) })) of wild1 {
                             [] -> AS.DB.bStrToASCommit2
                             : x ds1
                             -> case ds1 of wild2 {
                                  [] -> x : ipv ipv1 -> AS.DB.bStrToASCommit1 } }) }) -}
ab335d4491a1e56de234f73b466365e4
  bStrToASCommit1 :: AS.Types.ASCommit {- Strictness: b -}
aecaeea2ef2fd63f592fa91e7aadfbcb
  bStrToASCommit2 :: AS.Types.ASCommit {- Strictness: b -}
00bf89eab9c134ab769e6589fd1ba9c6
  bStrToASCommit3 :: Text.ParserCombinators.ReadP.P AS.Types.ASCommit
    {- Unfolding: ((GHC.Read.parens1
                      @ AS.Types.ASCommit
                      AS.Types.$fReadASCommit3
                        `cast`
                      (Trans
                           (<Text.ParserCombinators.ReadPrec.Prec>_R
                            ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                          <AS.Types.ASCommit>_R))
                           (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                     <AS.Types.ASCommit>_R)))
                      Text.ParserCombinators.ReadPrec.minPrec)
                     `cast`
                   (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <AS.Types.ASCommit>_R)
                     @ AS.Types.ASCommit
                     (Text.Read.readEither5 @ AS.Types.ASCommit)) -}
23e13a1e0f6b430fdcf9b82d7e82e99b
  bStrToASExpression :: Data.Maybe.Maybe
                            Data.ByteString.Internal.ByteString
                        -> Data.Maybe.Maybe AS.Types.ASExpression
    {- Arity: 1, Strictness: <S,1*U>,
       Unfolding: (\ ds :: Data.Maybe.Maybe
                               Data.ByteString.Internal.ByteString ->
                   case ds of wild {
                     Data.Maybe.Nothing -> Data.Maybe.Nothing @ AS.Types.ASExpression
                     Data.Maybe.Just b
                     -> Data.Maybe.Just
                          @ AS.Types.ASExpression
                          (case Text.Read.readEither6
                                  @ AS.Types.ASExpression
                                  (Text.ParserCombinators.ReadP.run
                                     @ AS.Types.ASExpression
                                     AS.DB.bStrToASExpression3
                                     (case b of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                                      Data.ByteString.Internal.$wunpackAppendCharsLazy
                                        ww1
                                        ww2
                                        ww3
                                        ww4
                                        (GHC.Types.[] @ GHC.Types.Char) })) of wild1 {
                             [] -> AS.DB.bStrToASExpression2
                             : x ds1
                             -> case ds1 of wild2 {
                                  [] -> x : ipv ipv1 -> AS.DB.bStrToASExpression1 } }) }) -}
e9c49916dd70e7d03a87f54cd0134525
  bStrToASExpression1 :: AS.Types.ASExpression {- Strictness: b -}
688ae81848b36f55946f25515a836bfe
  bStrToASExpression2 :: AS.Types.ASExpression {- Strictness: b -}
37b8000c9413f0e1889f0637338febb4
  bStrToASExpression3 :: Text.ParserCombinators.ReadP.P
                             AS.Types.ASExpression
    {- Unfolding: ((GHC.Read.parens1
                      @ AS.Types.ASExpression
                      AS.Types.$fReadASExpression3
                        `cast`
                      (Trans
                           (<Text.ParserCombinators.ReadPrec.Prec>_R
                            ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                          <AS.Types.ASExpression>_R))
                           (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                     <AS.Types.ASExpression>_R)))
                      Text.ParserCombinators.ReadPrec.minPrec)
                     `cast`
                   (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                        <AS.Types.ASExpression>_R)
                     @ AS.Types.ASExpression
                     (Text.Read.readEither5 @ AS.Types.ASExpression)) -}
68ca5614d6d5420ba1f2ad9ce600bd0d
  bStrToASLocation :: Data.ByteString.Internal.ByteString
                      -> AS.Types.ASLocation
    {- Arity: 1, Strictness: <L,1*U(U,U,U,U)>,
       Unfolding: (\ b :: Data.ByteString.Internal.ByteString ->
                   case Text.Read.readEither6
                          @ AS.Types.ASLocation
                          (Text.ParserCombinators.ReadP.run
                             @ AS.Types.ASLocation
                             AS.DB.bStrToASLocation3
                             (case b of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                              Data.ByteString.Internal.$wunpackAppendCharsLazy
                                ww1
                                ww2
                                ww3
                                ww4
                                (GHC.Types.[] @ GHC.Types.Char) })) of wild {
                     [] -> AS.DB.bStrToASLocation2
                     : x ds
                     -> case ds of wild1 {
                          [] -> x : ipv ipv1 -> AS.DB.bStrToASLocation1 } }) -}
72c083337bb4251ea3b0a41e0af88a26
  bStrToASLocation1 :: AS.Types.ASLocation {- Strictness: b -}
b7b1b544b3a61921a0ab0cb7e5ef8bd6
  bStrToASLocation2 :: AS.Types.ASLocation {- Strictness: b -}
8dbfed9d75350cb73b2e488bca5e0331
  bStrToASLocation3 :: Text.ParserCombinators.ReadP.P
                           AS.Types.ASLocation
    {- Unfolding: ((GHC.Read.parens1
                      @ AS.Types.ASLocation
                      AS.Types.$fReadASLocation3
                        `cast`
                      (Trans
                           (<Text.ParserCombinators.ReadPrec.Prec>_R
                            ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                          <AS.Types.ASLocation>_R))
                           (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                     <AS.Types.ASLocation>_R)))
                      Text.ParserCombinators.ReadPrec.minPrec)
                     `cast`
                   (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                        <AS.Types.ASLocation>_R)
                     @ AS.Types.ASLocation
                     (Text.Read.readEither5 @ AS.Types.ASLocation)) -}
01f0225c641b99f6fcdafd307ba002e7
  bStrToASValue :: Data.Maybe.Maybe
                       Data.ByteString.Internal.ByteString
                   -> Data.Maybe.Maybe AS.Types.ASValue
    {- Arity: 1, Strictness: <S,1*U>,
       Unfolding: (\ ds :: Data.Maybe.Maybe
                               Data.ByteString.Internal.ByteString ->
                   case ds of wild {
                     Data.Maybe.Nothing -> Data.Maybe.Nothing @ AS.Types.ASValue
                     Data.Maybe.Just b
                     -> Data.Maybe.Just
                          @ AS.Types.ASValue
                          (case Text.Read.readEither6
                                  @ AS.Types.ASValue
                                  (Text.ParserCombinators.ReadP.run
                                     @ AS.Types.ASValue
                                     AS.DB.bStrToASValue3
                                     (case b of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                                      Data.ByteString.Internal.$wunpackAppendCharsLazy
                                        ww1
                                        ww2
                                        ww3
                                        ww4
                                        (GHC.Types.[] @ GHC.Types.Char) })) of wild1 {
                             [] -> AS.DB.bStrToASValue2
                             : x ds1
                             -> case ds1 of wild2 {
                                  [] -> x : ipv ipv1 -> AS.DB.bStrToASValue1 } }) }) -}
bec967fbdac73d89bec6aa26fe0ab1b5
  bStrToASValue1 :: AS.Types.ASValue {- Strictness: b -}
659dd18b57cb3812e3f1a74c8fb21523
  bStrToASValue2 :: AS.Types.ASValue {- Strictness: b -}
fc78725996eba60475186f4644c8fb9a
  bStrToASValue3 :: Text.ParserCombinators.ReadP.P AS.Types.ASValue
    {- Unfolding: ((GHC.Read.parens1
                      @ AS.Types.ASValue
                      AS.Types.$fReadASValue3
                        `cast`
                      (Trans
                           (<Text.ParserCombinators.ReadPrec.Prec>_R
                            ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                          <AS.Types.ASValue>_R))
                           (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                     <AS.Types.ASValue>_R)))
                      Text.ParserCombinators.ReadPrec.minPrec)
                     `cast`
                   (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <AS.Types.ASValue>_R)
                     @ AS.Types.ASValue
                     (Text.Read.readEither5 @ AS.Types.ASValue)) -}
9381e99e08eddb6b296ef5d3ff9ecb7a
  bStrToRelation :: (Data.ByteString.Internal.ByteString,
                     Data.ByteString.Internal.ByteString)
                    -> (AS.Types.ASLocation, AS.Types.ASLocation)
    {- Arity: 1, Strictness: <S,1*U(1*U(U,U,U,U),1*U(U,U,U,U))>m,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: (Data.ByteString.Internal.ByteString,
                            Data.ByteString.Internal.ByteString) ->
                   case ds of wild { (,) r s ->
                   (AS.DB.bStrToASLocation r, AS.DB.bStrToASLocation s) }) -}
58f533379534f40f42c0e17e8a48dfe9
  bStrToTags :: Data.Maybe.Maybe Data.ByteString.Internal.ByteString
                -> Data.Maybe.Maybe [AS.Types.ASCellTag]
    {- Arity: 1, Strictness: <S,1*U>,
       Unfolding: (\ ds :: Data.Maybe.Maybe
                               Data.ByteString.Internal.ByteString ->
                   case ds of wild {
                     Data.Maybe.Nothing -> Data.Maybe.Nothing @ [AS.Types.ASCellTag]
                     Data.Maybe.Just b
                     -> Data.Maybe.Just
                          @ [AS.Types.ASCellTag]
                          (case Text.Read.readEither6
                                  @ [AS.Types.ASCellTag]
                                  (Text.ParserCombinators.ReadP.run
                                     @ [AS.Types.ASCellTag]
                                     AS.DB.bStrToTags3
                                     (case b of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                                      Data.ByteString.Internal.$wunpackAppendCharsLazy
                                        ww1
                                        ww2
                                        ww3
                                        ww4
                                        (GHC.Types.[] @ GHC.Types.Char) })) of wild1 {
                             [] -> AS.DB.bStrToTags2
                             : x ds1
                             -> case ds1 of wild2 {
                                  [] -> x : ipv ipv1 -> AS.DB.bStrToTags1 } }) }) -}
266e0628fb6cc2f314790deb640f4bb2
  bStrToTags1 :: [AS.Types.ASCellTag] {- Strictness: b -}
d7dc14bc0f8fe44e9edcf08c7b12c3ae
  bStrToTags2 :: [AS.Types.ASCellTag] {- Strictness: b -}
d6686709554772cd104e5a5100136603
  bStrToTags3 :: Text.ParserCombinators.ReadP.P [AS.Types.ASCellTag]
    {- Unfolding: (GHC.Read.$wa
                     @ AS.Types.ASCellTag
                     AS.Types.$fReadASCellTag2
                       `cast`
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <AS.Types.ASCellTag>_R))
                     @ [AS.Types.ASCellTag]
                     (Text.Read.readEither5 @ [AS.Types.ASCellTag])) -}
dc3c11436b7e3815d2ef3c377dbac72e
  cInfo :: Database.Redis.Core.ConnectInfo
    {- Strictness: m,
       Unfolding: (Database.Redis.Core.ConnInfo
                     AS.DB.cInfo6
                     AS.DB.cInfo4
                     (Data.Maybe.Nothing @ Data.ByteString.Internal.ByteString)
                     AS.DB.cInfo3
                     AS.DB.cInfo2
                     AS.DB.cInfo1
                       `cast`
                     (Trans
                          (Sym (Data.Fixed.NTCo:Fixed[0] <Data.Fixed.E12>_P))
                          (Sym (Data.Time.Clock.UTC.NTCo:NominalDiffTime[0])))) -}
cd87954582734e32eb407c69c5982b77
  cInfo1 :: GHC.Integer.Type.Integer
    {- Unfolding: (__integer 100000000000000) -}
731014be3b7fdc86a3c5c5f9f8008d52
  cInfo2 :: GHC.Types.Int
    {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 100) -}
632291389d76da95b623cacd98a7f89f
  cInfo3 :: GHC.Integer.Type.Integer {- Unfolding: (__integer 0) -}
64cc491452dd088186c09da467ec83d4
  cInfo4 :: Network.PortID
    {- Strictness: m2, Unfolding: (Network.PortNumber AS.DB.cInfo5) -}
947d8632716be238d7551ecfb9e6559c
  cInfo5 :: Network.Socket.Types.PortNumber
    {- Unfolding: (case {__pkg_ccall network-2.6.2.1 htons GHC.Prim.Word#
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 GHC.Prim.Word# #)}
                          __word 6379
                          GHC.Prim.realWorld# of wild1 { (#,#) ds ds1 ->
                   (GHC.Word.W16# (GHC.Prim.narrow16Word# ds1))
                     `cast`
                   (Sym (Network.Socket.Types.NTCo:PortNumber[0])) }) -}
60f0328944cda9d696630c94f905a0aa
  cInfo6 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "localhost"#) -}
ac68d0ea752e468cf26473b6cf0615af
  canAccess :: AS.Types.ASUserId
               -> AS.Types.ASLocation
               -> GHC.Types.IO GHC.Types.Bool
    {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.DB.canAccess1
                    `cast`
                  (<AS.Types.ASUserId>_R
                   ->_R <AS.Types.ASLocation>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Types.Bool>_R)) -}
b4c4537e56efe7c0ab6ee74d9e053a78
  canAccess1 :: AS.Types.ASUserId
                -> AS.Types.ASLocation
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
    {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,U>,
       Unfolding: InlineRule (3, True, True)
                  (\ uid :: AS.Types.ASUserId
                     loc :: AS.Types.ASLocation
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   (# eta, GHC.Types.False #)) -}
871b2eacf7ff9b26157b906e8d536cf2
  canAccessAll :: AS.Types.ASUserId
                  -> [AS.Types.ASLocation]
                  -> GHC.Types.IO GHC.Types.Bool
    {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.DB.canAccessAll1
                    `cast`
                  (<AS.Types.ASUserId>_R
                   ->_R <[AS.Types.ASLocation]>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Types.Bool>_R)) -}
74e6c703585973f627d1c3c17a95f84b
  canAccessAll1 :: AS.Types.ASUserId
                   -> [AS.Types.ASLocation]
                   -> GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
    {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (3, True, True)
                  (\ w :: AS.Types.ASUserId
                     w1 :: [AS.Types.ASLocation]
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   AS.DB.$wa w1 w2) -}
3a725bd3e0153bf13e9f093f6f2e9a3a
  canAccessAll2 :: [AS.Types.ASLocation]
                   -> GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Bool] #)
    {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
b4b634c5ff76de94a7dcd8fd734f2c16
  canAccessSheet :: AS.Types.ASUserId
                    -> AS.Types.ASSheetId
                    -> GHC.Types.IO GHC.Types.Bool
    {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.DB.canAccessSheet1
                    `cast`
                  (<AS.Types.ASUserId>_R
                   ->_R <AS.Types.ASSheetId>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Types.Bool>_R)) -}
12ad4f8c44e1539bf902586eca8162f2
  canAccessSheet1 :: AS.Types.ASUserId
                     -> AS.Types.ASSheetId
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
    {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,U>,
       Unfolding: InlineRule (3, True, True)
                  (\ uid :: AS.Types.ASUserId
                     sheetId :: AS.Types.ASSheetId
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   (# eta, GHC.Types.False #)) -}
232240c393e064d7c2e2afd14c419e46
  cellChunkSize :: GHC.Types.Int
    {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1000) -}
4cb770392a1687bb3317b7a47199035d
  chunkM :: ([a] -> Database.Redis.Core.Redis [b])
            -> GHC.Types.Int
            -> [a]
            -> GHC.Types.IO [b]
    {- Arity: 4, Strictness: <L,C(U)><L,U(U)><L,1*U><L,U>,
       Unfolding: (AS.DB.chunkM1
                     `cast`
                   (forall a4 b.
                    <[a4] -> Database.Redis.Core.Redis [b]>_R
                    ->_R <GHC.Types.Int>_R
                    ->_R <[a4]>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <[b]>_R))) -}
8aa77d267c5ce7b58a0a541833dbdc2f
  chunkM1 :: ([a] -> Database.Redis.Core.Redis [b])
             -> GHC.Types.Int
             -> [a]
             -> GHC.Prim.State# GHC.Prim.RealWorld
             -> (# GHC.Prim.State# GHC.Prim.RealWorld, [b] #)
    {- Arity: 4, Strictness: <L,C(U)><L,U(U)><L,1*U><L,U>,
       Unfolding: (\ @ a4
                     @ b
                     f :: [a4] -> Database.Redis.Core.Redis [b]
                     size :: GHC.Types.Int
                     lst :: [a4]
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case Database.Redis.Core.$wa
                          AS.DB.cInfo6
                          AS.DB.cInfo4
                          (Data.Maybe.Nothing @ Data.ByteString.Internal.ByteString)
                          AS.DB.cInfo3
                          100
                          AS.DB.cInfo1
                            `cast`
                          (Trans
                               (Sym (Data.Fixed.NTCo:Fixed[0] <Data.Fixed.E12>_P))
                               (Sym (Data.Time.Clock.UTC.NTCo:NominalDiffTime[0])))
                          eta of ds1 { (#,#) ipv ipv1 ->
                   (Data.Pool.withResource_$swithResource
                      @ (Database.Redis.ProtocolPipelining.Connection
                             Database.Redis.Protocol.Reply)
                      @ [b]
                      ipv1 `cast` (Database.Redis.Core.NTCo:Connection[0])
                      (\ r1 :: Database.Redis.ProtocolPipelining.Connection
                                   Database.Redis.Protocol.Reply
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       letrec {
                         go11 :: [[a4]] -> Database.Redis.Core.Redis [[b]]
                           {- Arity: 1, Strictness: <S,1*U> -}
                         = \ ds :: [[a4]] ->
                           case ds of wild {
                             []
                             -> (AS.DB.chunkM3 @ b)
                                  `cast`
                                (Trans
                                     (<Database.Redis.ProtocolPipelining.Connection
                                           Database.Redis.Protocol.Reply>_R
                                      ->_R Sym (GHC.Types.NTCo:IO[0] <[[b]]>_R))
                                     (Trans
                                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                    <Database.Redis.ProtocolPipelining.Connection
                                                         Database.Redis.Protocol.Reply>_R
                                                    <GHC.Types.IO>_R
                                                    <[[b]]>_N))
                                          (Sym (Database.Redis.Core.NTCo:Redis[0]) <[[b]]>_N)))
                             : y ys
                             -> let {
                                  m1 :: Database.Redis.Core.Redis [b] = f y
                                } in
                                let {
                                  ys1 :: Database.Redis.Core.Redis [[b]] = go11 ys
                                } in
                                (\ eta1 :: Database.Redis.ProtocolPipelining.Connection
                                               Database.Redis.Protocol.Reply
                                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                 case (m1
                                         `cast`
                                       (Trans
                                            (Database.Redis.Core.NTCo:Redis[0] <[b]>_N)
                                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                 <Database.Redis.ProtocolPipelining.Connection
                                                      Database.Redis.Protocol.Reply>_R
                                                 <GHC.Types.IO>_R
                                                 <[b]>_N))
                                         eta1)
                                        `cast`
                                      (GHC.Types.NTCo:IO[0] <[b]>_R)
                                        eta2 of ds2 { (#,#) ipv2 ipv3 ->
                                 case (ys1
                                         `cast`
                                       (Trans
                                            (Database.Redis.Core.NTCo:Redis[0] <[[b]]>_N)
                                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                 <Database.Redis.ProtocolPipelining.Connection
                                                      Database.Redis.Protocol.Reply>_R
                                                 <GHC.Types.IO>_R
                                                 <[[b]]>_N))
                                         eta1)
                                        `cast`
                                      (GHC.Types.NTCo:IO[0] <[[b]]>_R)
                                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                                 (# ipv4, GHC.Types.: @ [b] ipv3 ipv5 #) } })
                                  `cast`
                                (Trans
                                     (<Database.Redis.ProtocolPipelining.Connection
                                           Database.Redis.Protocol.Reply>_R
                                      ->_R Sym (GHC.Types.NTCo:IO[0] <[[b]]>_R))
                                     (Trans
                                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                    <Database.Redis.ProtocolPipelining.Connection
                                                         Database.Redis.Protocol.Reply>_R
                                                    <GHC.Types.IO>_R
                                                    <[[b]]>_N))
                                          (Sym (Database.Redis.Core.NTCo:Redis[0]) <[[b]]>_N))) }
                       } in
                       case ((go11 (Data.List.Split.Internals.chunksOf @ a4 size lst))
                               `cast`
                             (Trans
                                  (Database.Redis.Core.NTCo:Redis[0] <[[b]]>_N)
                                  (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                       <Database.Redis.ProtocolPipelining.Connection
                                            Database.Redis.Protocol.Reply>_R
                                       <GHC.Types.IO>_R
                                       <[[b]]>_N))
                               r1)
                              `cast`
                            (GHC.Types.NTCo:IO[0] <[[b]]>_R)
                              s of ds2 { (#,#) ipv2 ipv3 ->
                       (# ipv2, AS.DB.chunkM2 @ b ipv3 #) })
                        `cast`
                      (<Database.Redis.ProtocolPipelining.Connection
                            Database.Redis.Protocol.Reply>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <[b]>_R)))
                     `cast`
                   (GHC.Types.NTCo:IO[0] <[b]>_R)
                     ipv }) -}
b8646abdfd3392fdd377da2ab77771b6
  chunkM2 :: [[b]] -> [b]
    {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
76a3fe6e2dd0d0a0e222149ad147d305
  chunkM3 :: Database.Redis.ProtocolPipelining.Connection
                 Database.Redis.Protocol.Reply
             -> GHC.Prim.State# GHC.Prim.RealWorld
             -> (# GHC.Prim.State# GHC.Prim.RealWorld, [[b]] #)
    {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,U>,
       Unfolding: (\ @ b
                     eta1 :: Database.Redis.ProtocolPipelining.Connection
                                 Database.Redis.Protocol.Reply
                     eta2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   (# eta2, GHC.Types.[] @ [b] #)) -}
9ab66ffc8a0f740b5bf89da8921f3f95
  chunkM_ :: ([a] -> Database.Redis.Core.Redis ())
             -> GHC.Types.Int
             -> [a]
             -> GHC.Types.IO ()
    {- Arity: 4, Strictness: <L,C(U)><L,U(U)><L,1*U><L,U>,
       Unfolding: (AS.DB.chunkM_1
                     `cast`
                   (forall a4.
                    <[a4] -> Database.Redis.Core.Redis ()>_R
                    ->_R <GHC.Types.Int>_R
                    ->_R <[a4]>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
0d72bbffc851f6e862479d9d2bb01b21
  chunkM_1 :: ([a] -> Database.Redis.Core.Redis ())
              -> GHC.Types.Int
              -> [a]
              -> GHC.Prim.State# GHC.Prim.RealWorld
              -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4, Strictness: <L,C(U)><L,U(U)><L,1*U><L,U>,
       Unfolding: (\ @ a4
                     f :: [a4] -> Database.Redis.Core.Redis ()
                     size :: GHC.Types.Int
                     lst :: [a4]
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case Database.Redis.Core.$wa
                          AS.DB.cInfo6
                          AS.DB.cInfo4
                          (Data.Maybe.Nothing @ Data.ByteString.Internal.ByteString)
                          AS.DB.cInfo3
                          100
                          AS.DB.cInfo1
                            `cast`
                          (Trans
                               (Sym (Data.Fixed.NTCo:Fixed[0] <Data.Fixed.E12>_P))
                               (Sym (Data.Time.Clock.UTC.NTCo:NominalDiffTime[0])))
                          eta of ds1 { (#,#) ipv ipv1 ->
                   (Data.Pool.withResource_$swithResource
                      @ (Database.Redis.ProtocolPipelining.Connection
                             Database.Redis.Protocol.Reply)
                      @ ()
                      ipv1 `cast` (Database.Redis.Core.NTCo:Connection[0])
                      (\ conn :: Database.Redis.ProtocolPipelining.Connection
                                     Database.Redis.Protocol.Reply ->
                       letrec {
                         go11 :: [[a4]] -> Database.Redis.Core.Redis ()
                           {- Arity: 1, Strictness: <S,1*U> -}
                         = \ ds :: [[a4]] ->
                           case ds of wild {
                             []
                             -> AS.DB.chunkM_2
                                  `cast`
                                (Trans
                                     (<Database.Redis.ProtocolPipelining.Connection
                                           Database.Redis.Protocol.Reply>_R
                                      ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                                     (Trans
                                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                    <Database.Redis.ProtocolPipelining.Connection
                                                         Database.Redis.Protocol.Reply>_R
                                                    <GHC.Types.IO>_R
                                                    <()>_N))
                                          (Sym (Database.Redis.Core.NTCo:Redis[0]) <()>_N)))
                             : y ys
                             -> let {
                                  a5 :: Database.Redis.Core.Redis () = f y
                                } in
                                let {
                                  ys1 :: Database.Redis.Core.Redis () = go11 ys
                                } in
                                (\ eta1 :: Database.Redis.ProtocolPipelining.Connection
                                               Database.Redis.Protocol.Reply
                                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                 case (a5
                                         `cast`
                                       (Trans
                                            (Database.Redis.Core.NTCo:Redis[0] <()>_N)
                                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                 <Database.Redis.ProtocolPipelining.Connection
                                                      Database.Redis.Protocol.Reply>_R
                                                 <GHC.Types.IO>_R
                                                 <()>_N))
                                         eta1)
                                        `cast`
                                      (GHC.Types.NTCo:IO[0] <()>_R)
                                        eta2 of ds2 { (#,#) ipv2 ipv3 ->
                                 (ys1
                                    `cast`
                                  (Trans
                                       (Database.Redis.Core.NTCo:Redis[0] <()>_N)
                                       (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                            <Database.Redis.ProtocolPipelining.Connection
                                                 Database.Redis.Protocol.Reply>_R
                                            <GHC.Types.IO>_R
                                            <()>_N))
                                    eta1)
                                   `cast`
                                 (GHC.Types.NTCo:IO[0] <()>_R)
                                   ipv2 })
                                  `cast`
                                (Trans
                                     (<Database.Redis.ProtocolPipelining.Connection
                                           Database.Redis.Protocol.Reply>_R
                                      ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                                     (Trans
                                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                    <Database.Redis.ProtocolPipelining.Connection
                                                         Database.Redis.Protocol.Reply>_R
                                                    <GHC.Types.IO>_R
                                                    <()>_N))
                                          (Sym (Database.Redis.Core.NTCo:Redis[0]) <()>_N))) }
                       } in
                       (go11 (Data.List.Split.Internals.chunksOf @ a4 size lst))
                         `cast`
                       (Trans
                            (Database.Redis.Core.NTCo:Redis[0] <()>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Database.Redis.ProtocolPipelining.Connection
                                      Database.Redis.Protocol.Reply>_R
                                 <GHC.Types.IO>_R
                                 <()>_N))
                         conn))
                     `cast`
                   (GHC.Types.NTCo:IO[0] <()>_R)
                     ipv }) -}
30725915cc3dcbdc51f51d2c7be05377
  chunkM_2 :: Database.Redis.ProtocolPipelining.Connection
                  Database.Redis.Protocol.Reply
              -> GHC.Prim.State# GHC.Prim.RealWorld
              -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,U>,
       Unfolding: InlineRule (2, True, True)
                  (\ eta1 :: Database.Redis.ProtocolPipelining.Connection
                                 Database.Redis.Protocol.Reply
                     eta2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   (# eta2, GHC.Tuple.() #)) -}
b7dcc893016884adb899afaef70b1e43
  createSheet :: AS.Types.ASSheet -> GHC.Types.IO AS.Types.ASSheet
    {- Arity: 2, Strictness: <S,1*U(A,U,U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.DB.createSheet1
                    `cast`
                  (<AS.Types.ASSheet>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <AS.Types.ASSheet>_R)) -}
0c92396025896d795f85e2ec251d669b
  createSheet1 :: AS.Types.ASSheet
                  -> GHC.Prim.State# GHC.Prim.RealWorld
                  -> (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ASSheet #)
    {- Arity: 2, Strictness: <S,1*U(A,U,U)><L,U>,
       Unfolding: InlineRule (2, True, False)
                  (\ ds :: AS.Types.ASSheet
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ds of wild { AS.Types.Sheet ds1 name permissions ->
                   case AS.Util.getUniqueId1 eta of ds2 { (#,#) ipv ipv1 ->
                   (# ipv, AS.Types.Sheet ipv1 name permissions #) } }) -}
4d9cadec8a68908407f69a7e61d0bb70
  createWorkbook :: AS.Types.ASWorkbook -> GHC.Types.IO ()
    {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.DB.createWorkbook1
                    `cast`
                  (<AS.Types.ASWorkbook>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
0d6a20bafb0d28e99fbd3c3c1891dcca
  createWorkbook1 :: AS.Types.ASWorkbook
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,U>,
       Unfolding: InlineRule (2, True, True)
                  (\ workbook :: AS.Types.ASWorkbook
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   (# eta, GHC.Tuple.() #)) -}
6e45052e78b4c8523c5174e50f6983f2
  dagChunkSize :: GHC.Types.Int
    {- Strictness: m, Unfolding: (AS.DB.cellChunkSize) -}
bb0f60b7d274b7dc1072beccb3a2c3ae
  deleteCells :: [AS.Types.ASCell] -> GHC.Types.IO ()
    {- Arity: 2, Strictness: <S,1*U><L,U>,
       Unfolding: (AS.DB.deleteCells1
                     `cast`
                   (<[AS.Types.ASCell]>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
b9bec032542147a566801be582e046b2
  deleteCells1 :: [AS.Types.ASCell]
                  -> GHC.Prim.State# GHC.Prim.RealWorld
                  -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 2, Strictness: <S,1*U><L,U>,
       Unfolding: (\ ds :: [AS.Types.ASCell]
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ds of wild {
                     [] -> (# eta, GHC.Tuple.() #)
                     : ipv ipv1
                     -> case Database.Redis.Core.$wa
                               AS.DB.cInfo6
                               AS.DB.cInfo4
                               (Data.Maybe.Nothing @ Data.ByteString.Internal.ByteString)
                               AS.DB.cInfo3
                               100
                               AS.DB.cInfo1
                                 `cast`
                               (Trans
                                    (Sym (Data.Fixed.NTCo:Fixed[0] <Data.Fixed.E12>_P))
                                    (Sym (Data.Time.Clock.UTC.NTCo:NominalDiffTime[0])))
                               eta of ds1 { (#,#) ipv2 ipv3 ->
                        case (Data.Pool.withResource_$swithResource
                                @ (Database.Redis.ProtocolPipelining.Connection
                                       Database.Redis.Protocol.Reply)
                                @ ()
                                ipv3 `cast` (Database.Redis.Core.NTCo:Connection[0])
                                (\ conn :: Database.Redis.ProtocolPipelining.Connection
                                               Database.Redis.Protocol.Reply ->
                                 (AS.DB.deleteCells_go
                                    (Data.List.Split.Internals.chunksOf
                                       @ AS.Types.ASCell
                                       AS.DB.cellChunkSize
                                       wild))
                                   `cast`
                                 (Trans
                                      (Database.Redis.Core.NTCo:Redis[0] <()>_N)
                                      (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                           <Database.Redis.ProtocolPipelining.Connection
                                                Database.Redis.Protocol.Reply>_R
                                           <GHC.Types.IO>_R
                                           <()>_N))
                                   conn))
                               `cast`
                             (GHC.Types.NTCo:IO[0] <()>_R)
                               ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                        AS.DB.chunkM_1
                          @ AS.Types.ASCell
                          AS.DB.deleteChunkVolatileCells
                          AS.DB.cellChunkSize
                          wild
                          ipv4 } } }) -}
a0c19c6a6a70a572f825f07c9566af66
  deleteCells_go :: [[AS.Types.ASCell]]
                    -> Database.Redis.Core.Redis ()
    {- Arity: 1, Strictness: <S,1*U> -}
f84dff06ea229c76017cee0a4a8614c2
  deleteChunkCells :: [AS.Types.ASCell]
                      -> Database.Redis.Core.Redis ()
    {- Arity: 1, Strictness: <L,1*U> -}
a7f9b5dfe28e35d353d57455816c52ac
  deleteChunkLocs :: [AS.Types.ASLocation]
                     -> Database.Redis.Core.Redis ()
    {- Arity: 1, Strictness: <L,1*U> -}
1ea1ad55a31870b6c3628398cfce1d9c
  deleteChunkVolatileCells :: [AS.Types.ASCell]
                              -> Database.Redis.Core.Redis ()
    {- Arity: 1, Strictness: <L,1*U>,
       Unfolding: (\ cells :: [AS.Types.ASCell] ->
                   let {
                     lvl49 :: Data.ByteString.Internal.ByteString
                     = Database.Redis.Protocol.renderRequest
                         (GHC.Types.:
                            @ Data.ByteString.Internal.ByteString
                            Database.Redis.Commands.srem1
                            (GHC.Types.:
                               @ Data.ByteString.Internal.ByteString
                               AS.DB.deleteChunkVolatileCells1
                               (GHC.Base.map
                                  @ Data.ByteString.Internal.ByteString
                                  @ Data.ByteString.Internal.ByteString
                                  (GHC.Base.id @ Data.ByteString.Internal.ByteString)
                                  (AS.DB.deleteChunkVolatileCells_go cells))))
                   } in
                   (\ eta :: Database.Redis.ProtocolPipelining.Connection
                                 Database.Redis.Protocol.Reply
                      eta1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                    case eta of ww { Database.Redis.ProtocolPipelining.Conn ww1 ww2 ww3 ww4 ->
                    case lvl49 of ww5 { Data.ByteString.Internal.PS ww6 ww7 ww8 ww9 ->
                    case Database.Redis.ProtocolPipelining.$wa2
                           @ Database.Redis.Protocol.Reply
                           ww1
                           ww2
                           ww3
                           ww6
                           ww7
                           ww8
                           ww9
                           eta1 of ds1 { (#,#) ipv ipv1 ->
                    (# ipv, GHC.Tuple.() #) } } })
                     `cast`
                   (Trans
                        (<Database.Redis.ProtocolPipelining.Connection
                              Database.Redis.Protocol.Reply>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Trans
                             (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                       <Database.Redis.ProtocolPipelining.Connection
                                            Database.Redis.Protocol.Reply>_R
                                       <GHC.Types.IO>_R
                                       <()>_N))
                             (Sym (Database.Redis.Core.NTCo:Redis[0]) <()>_N)))) -}
9c01adffe9ed277592cfdbf8e554312b
  deleteChunkVolatileCells1 :: Data.ByteString.Internal.ByteString
    {- Unfolding: (case GHC.Prim.newMutVar#
                          @ GHC.ForeignPtr.Finalizers
                          @ GHC.Prim.RealWorld
                          GHC.ForeignPtr.NoFinalizers
                          GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                   let {
                     addr# :: GHC.Prim.Addr# = "volLocs"#
                   } in
                   case {__pkg_ccall bytestring-0.10.4.0 strlen GHC.Prim.Addr#
                                                                -> GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                -> (# GHC.Prim.State#
                                                                          GHC.Prim.RealWorld,
                                                                      GHC.Prim.Word# #)}
                          addr#
                          ipv of wild { (#,#) ds3 ds4 ->
                   Data.ByteString.Internal.PS
                     addr#
                     (GHC.ForeignPtr.PlainForeignPtr ipv1)
                     0
                     (GHC.Prim.word2Int# ds4) } }) -}
c3285925a24ab07c605d5e0ffae7cae9
  deleteChunkVolatileCells_go :: [AS.Types.ASCell]
                                 -> [Data.ByteString.Internal.ByteString]
    {- Arity: 1, Strictness: <S,1*U> -}
26bd3f8a53bf4a08baa9f6528e98e244
  deleteLocs :: [AS.Types.ASLocation] -> GHC.Types.IO ()
    {- Arity: 2, Strictness: <S,1*U><L,U>,
       Unfolding: (AS.DB.deleteLocs1
                     `cast`
                   (<[AS.Types.ASLocation]>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
6d7dfef0226d020fcc3bfd43f1c03f80
  deleteLocs1 :: [AS.Types.ASLocation]
                 -> GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 2, Strictness: <S,1*U><L,U>,
       Unfolding: (\ ds :: [AS.Types.ASLocation]
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ds of wild {
                     [] -> (# eta, GHC.Tuple.() #)
                     : ipv ipv1
                     -> AS.DB.chunkM_1
                          @ AS.Types.ASLocation
                          AS.DB.deleteChunkLocs
                          AS.DB.cellChunkSize
                          (AS.DB.deleteLocs_go wild)
                          eta }) -}
6f7930203b1a41a53edb62a4391577fb
  deleteLocs_go :: [AS.Types.ASLocation] -> [AS.Types.ASLocation]
    {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
ee3d0f4d25d0a1104d16d3c62f7c6316
  deleteSheet :: AS.Types.ASSheetId -> GHC.Types.IO ()
    {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.DB.deleteSheet1
                    `cast`
                  (<AS.Types.ASSheetId>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
15f85fb4dcfd194ba0ed30ab84e9cb81
  deleteSheet1 :: AS.Types.ASSheetId
                  -> GHC.Prim.State# GHC.Prim.RealWorld
                  -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,U>,
       Unfolding: InlineRule (2, True, True)
                  (\ sheet :: AS.Types.ASSheetId
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   (# eta, GHC.Tuple.() #)) -}
38951f5dbf4b8b5d967e5a0c52ac0435
  deleteWorkbook :: GHC.Base.String -> GHC.Types.IO ()
    {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.DB.deleteWorkbook1
                    `cast`
                  (<GHC.Base.String>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
6ab4a14162251db9bd371392ad1166a9
  deleteWorkbook1 :: GHC.Base.String
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,U>,
       Unfolding: InlineRule (2, True, True)
                  (\ name :: GHC.Base.String
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   (# eta, GHC.Tuple.() #)) -}
de45013d54eee025803bc88e5cc925dd
  genericChunkSize :: GHC.Types.Int
    {- Strictness: m, Unfolding: (AS.DB.cellChunkSize) -}
fe14785ad2782dada9d42b1cf55c1d04
  getCell :: AS.Types.ASLocation
             -> GHC.Types.IO (Data.Maybe.Maybe AS.Types.ASCell)
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (AS.DB.getCell1
                     `cast`
                   (<AS.Types.ASLocation>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0]
                                  <Data.Maybe.Maybe AS.Types.ASCell>_R))) -}
36219345f477d0d1d5d65f51fddb2b35
  getCell1 :: AS.Types.ASLocation
              -> GHC.Prim.State# GHC.Prim.RealWorld
              -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                    Data.Maybe.Maybe AS.Types.ASCell #)
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (\ loc :: AS.Types.ASLocation
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case AS.DB.chunkM1
                          @ AS.Types.ASLocation
                          @ (Data.Maybe.Maybe AS.Types.ASCell)
                          AS.DB.getChunkCells
                          AS.DB.cellChunkSize
                          (GHC.Types.:
                             @ AS.Types.ASLocation
                             loc
                             (GHC.Types.[] @ AS.Types.ASLocation))
                          s of ds1 { (#,#) ipv ipv1 ->
                   (# ipv,
                      case ipv1 of wild {
                        [] -> GHC.List.badHead @ (Data.Maybe.Maybe AS.Types.ASCell)
                        : x ds2 -> x } #) }) -}
93a606f1b4216007217600460caca167
  getCells :: [AS.Types.ASLocation]
              -> GHC.Types.IO [Data.Maybe.Maybe AS.Types.ASCell]
    {- Arity: 2, Strictness: <S,1*U><L,U>,
       Unfolding: (AS.DB.getCells1
                     `cast`
                   (<[AS.Types.ASLocation]>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0]
                                  <[Data.Maybe.Maybe AS.Types.ASCell]>_R))) -}
c563006667d5e503519a423b167cbd16
  getCells1 :: [AS.Types.ASLocation]
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     [Data.Maybe.Maybe AS.Types.ASCell] #)
    {- Arity: 2, Strictness: <S,1*U><L,U>,
       Unfolding: (\ ds :: [AS.Types.ASLocation]
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ds of wild {
                     [] -> (# eta, GHC.Types.[] @ (Data.Maybe.Maybe AS.Types.ASCell) #)
                     : ipv ipv1
                     -> AS.DB.chunkM1
                          @ AS.Types.ASLocation
                          @ (Data.Maybe.Maybe AS.Types.ASCell)
                          AS.DB.getChunkCells
                          AS.DB.cellChunkSize
                          wild
                          eta }) -}
81b98ebb3d0d1e0709708d778180f537
  getChunkCells :: [AS.Types.ASLocation]
                   -> Database.Redis.Core.Redis [Data.Maybe.Maybe AS.Types.ASCell]
    {- Arity: 1, Strictness: <L,U> -}
f5691fadd7a4f3020a8cefa211227ac8
  getDAG :: GHC.Types.IO [(AS.Types.ASLocation, AS.Types.ASLocation)]
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (AS.DB.getDAG1
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0]
                             <[(AS.Types.ASLocation, AS.Types.ASLocation)]>_R))) -}
cae7d8cb120a467c63f6f1a35d7222aa
  getDAG1 :: GHC.Prim.State# GHC.Prim.RealWorld
             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                   [(AS.Types.ASLocation, AS.Types.ASLocation)] #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case Database.Redis.Core.$wa
                          AS.DB.cInfo6
                          AS.DB.cInfo4
                          (Data.Maybe.Nothing @ Data.ByteString.Internal.ByteString)
                          AS.DB.cInfo3
                          100
                          AS.DB.cInfo1
                            `cast`
                          (Trans
                               (Sym (Data.Fixed.NTCo:Fixed[0] <Data.Fixed.E12>_P))
                               (Sym (Data.Time.Clock.UTC.NTCo:NominalDiffTime[0])))
                          eta of ds1 { (#,#) ipv ipv1 ->
                   (Data.Pool.withResource_$swithResource
                      @ (Database.Redis.ProtocolPipelining.Connection
                             Database.Redis.Protocol.Reply)
                      @ [(AS.Types.ASLocation, AS.Types.ASLocation)]
                      ipv1 `cast` (Database.Redis.Core.NTCo:Connection[0])
                      AS.DB.getDAG2
                        `cast`
                      (<Database.Redis.ProtocolPipelining.Connection
                            Database.Redis.Protocol.Reply>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <[(AS.Types.ASLocation, AS.Types.ASLocation)]>_R)))
                     `cast`
                   (GHC.Types.NTCo:IO[0]
                        <[(AS.Types.ASLocation, AS.Types.ASLocation)]>_R)
                     ipv }) -}
06a4c007ad3849aa3024fb83ed93c423
  getDAG2 :: Database.Redis.ProtocolPipelining.Connection
                 Database.Redis.Protocol.Reply
             -> GHC.Prim.State# GHC.Prim.RealWorld
             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                   [(AS.Types.ASLocation, AS.Types.ASLocation)] #)
    {- Arity: 2,
       Unfolding: (\ r1 :: Database.Redis.ProtocolPipelining.Connection
                               Database.Redis.Protocol.Reply
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case r1 of ww { Database.Redis.ProtocolPipelining.Conn ww1 ww2 ww3 ww4 ->
                   case AS.DB.getDAG_lvl9 of ww5 { Data.ByteString.Internal.PS ww6 ww7 ww8 ww9 ->
                   case Database.Redis.ProtocolPipelining.$wa2
                          @ Database.Redis.Protocol.Reply
                          ww1
                          ww2
                          ww3
                          ww6
                          ww7
                          ww8
                          ww9
                          s of ds1 { (#,#) ipv ipv1 ->
                   case Database.Redis.Types.$fRedisResult[]0_$cdecode
                          @ Data.ByteString.Internal.ByteString
                          Database.Redis.Types.$fRedisResultByteString_$cdecode
                            `cast`
                          (Sym (Database.Redis.Types.NTCo:RedisResult[0]
                                    <Data.ByteString.Internal.ByteString>_N))
                          ipv1 of wild {
                     Data.Either.Left ipv2
                     -> (GHC.IO.failIO
                           @ [(AS.Types.ASLocation, AS.Types.ASLocation)]
                           AS.DB.getDAG4)
                          `cast`
                        (GHC.Types.NTCo:IO[0]
                             <[(AS.Types.ASLocation, AS.Types.ASLocation)]>_R)
                          ipv
                     Data.Either.Right tl
                     -> case Database.Redis.Transactions.multiExec1
                               @ [[Data.ByteString.Internal.ByteString]]
                               (\ eta :: GHC.Types.Int
                                  r2 :: Database.Redis.ProtocolPipelining.Connection
                                            Database.Redis.Protocol.Reply
                                  s1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                case (((AS.DB.getDAG_go1 tl)
                                         `cast`
                                       (Trans
                                            (Database.Redis.Transactions.NTCo:RedisTx[0] <[Database.Redis.Transactions.Queued
                                                                                               [Data.ByteString.Internal.ByteString]]>_N)
                                            (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                                 <GHC.Types.Int>_N
                                                 <Database.Redis.Core.Redis>_R
                                                 <[Database.Redis.Transactions.Queued
                                                       [Data.ByteString.Internal.ByteString]]>_N))
                                         eta)
                                        `cast`
                                      (Trans
                                           (Database.Redis.Core.NTCo:Redis[0] <([Database.Redis.Transactions.Queued
                                                                                     [Data.ByteString.Internal.ByteString]],
                                                                                GHC.Types.Int)>_N)
                                           (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                <Database.Redis.ProtocolPipelining.Connection
                                                     Database.Redis.Protocol.Reply>_R
                                                <GHC.Types.IO>_R
                                                <([Database.Redis.Transactions.Queued
                                                       [Data.ByteString.Internal.ByteString]],
                                                  GHC.Types.Int)>_N))
                                        r2)
                                       `cast`
                                     (GHC.Types.NTCo:IO[0]
                                          <([Database.Redis.Transactions.Queued
                                                 [Data.ByteString.Internal.ByteString]],
                                            GHC.Types.Int)>_R)
                                       s1 of ds2 { (#,#) ipv2 ipv3 ->
                                case ipv3 of wild1 { (,) a4 s' ->
                                (# ipv2,
                                   (case AS.DB.$wgo a4 of ww10 { (##) ww11 ->
                                    Database.Redis.Transactions.Queued
                                      @ [[Data.ByteString.Internal.ByteString]]
                                      ww11 },
                                    s') #) } })
                                 `cast`
                               (Trans
                                    (<GHC.Types.Int>_R
                                     ->_R Trans
                                              (<Database.Redis.ProtocolPipelining.Connection
                                                    Database.Redis.Protocol.Reply>_R
                                               ->_R Sym (GHC.Types.NTCo:IO[0]
                                                             <(Database.Redis.Transactions.Queued
                                                                   [[Data.ByteString.Internal.ByteString]],
                                                               GHC.Types.Int)>_R))
                                              (Trans
                                                   (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                             <Database.Redis.ProtocolPipelining.Connection
                                                                  Database.Redis.Protocol.Reply>_R
                                                             <GHC.Types.IO>_R
                                                             <(Database.Redis.Transactions.Queued
                                                                   [[Data.ByteString.Internal.ByteString]],
                                                               GHC.Types.Int)>_N))
                                                   (Sym (Database.Redis.Core.NTCo:Redis[0]) <(Database.Redis.Transactions.Queued
                                                                                                  [[Data.ByteString.Internal.ByteString]],
                                                                                              GHC.Types.Int)>_N)))
                                    (Trans
                                         (Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                                   <GHC.Types.Int>_N
                                                   <Database.Redis.Core.Redis>_R
                                                   <Database.Redis.Transactions.Queued
                                                        [[Data.ByteString.Internal.ByteString]]>_N))
                                         (Sym (Database.Redis.Transactions.NTCo:RedisTx[0]) <Database.Redis.Transactions.Queued
                                                                                                 [[Data.ByteString.Internal.ByteString]]>_N)))
                               ww
                               ipv of ds2 { (#,#) ipv2 ipv3 ->
                        case ipv3 of wild1 {
                          DEFAULT
                          -> (GHC.IO.failIO
                                @ [(AS.Types.ASLocation, AS.Types.ASLocation)]
                                AS.DB.getDAG3)
                               `cast`
                             (GHC.Types.NTCo:IO[0]
                                  <[(AS.Types.ASLocation, AS.Types.ASLocation)]>_R)
                               ipv2
                          Database.Redis.Transactions.TxSuccess fromLocs
                          -> (# ipv2, AS.DB.getDAG_go fromLocs tl #) } } } } } }) -}
79f40e98e84e3ae44aff6bba8f6bb491
  getDAG3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "Pattern match failure in do expression at src/AS/DB.hs:265:7-24"#) -}
e013fbc407173f71ed9198f91829226e
  getDAG4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "Pattern match failure in do expression at src/AS/DB.hs:264:7-14"#) -}
a774ce901ff6ca45732c2c56c4abb43f
  getDAG5 :: [Data.ByteString.Internal.ByteString]
    {- Unfolding: (GHC.Types.:
                     @ Data.ByteString.Internal.ByteString
                     Database.Redis.Commands.smembers1
                     AS.DB.getDAG6) -}
1626778708a46d7ec6554dbaa76da820
  getDAG6 :: [Data.ByteString.Internal.ByteString]
    {- Unfolding: (GHC.Types.:
                     @ Data.ByteString.Internal.ByteString
                     AS.DB.getDAG7
                     (GHC.Types.[] @ Data.ByteString.Internal.ByteString)) -}
36a6428cc64e949f10c79421680219ac
  getDAG7 :: Data.ByteString.Internal.ByteString
    {- Unfolding: (case GHC.Prim.newMutVar#
                          @ GHC.ForeignPtr.Finalizers
                          @ GHC.Prim.RealWorld
                          GHC.ForeignPtr.NoFinalizers
                          GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                   let {
                     addr# :: GHC.Prim.Addr# = "toLocSet"#
                   } in
                   case {__pkg_ccall bytestring-0.10.4.0 strlen GHC.Prim.Addr#
                                                                -> GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                -> (# GHC.Prim.State#
                                                                          GHC.Prim.RealWorld,
                                                                      GHC.Prim.Word# #)}
                          addr#
                          ipv of wild { (#,#) ds3 ds4 ->
                   Data.ByteString.Internal.PS
                     addr#
                     (GHC.ForeignPtr.PlainForeignPtr ipv1)
                     0
                     (GHC.Prim.word2Int# ds4) } }) -}
778dc68993b2a6ffb5e4aefbcb73c61e
  getDAG_go :: [[Data.ByteString.Internal.ByteString]]
               -> [Data.ByteString.Internal.ByteString]
               -> [(AS.Types.ASLocation, AS.Types.ASLocation)]
    {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
98c5920986b7f673abe622e6f22ba2f8
  getDAG_go1 :: [Data.ByteString.Internal.ByteString]
                -> Database.Redis.Transactions.RedisTx
                       [Database.Redis.Transactions.Queued
                            [Data.ByteString.Internal.ByteString]]
    {- Arity: 1, Strictness: <S,1*U> -}
5609c11f82cf381de25ac3f054eb1196
  getDAG_lvl9 :: Data.ByteString.Internal.ByteString
    {- Unfolding: (Database.Redis.Protocol.renderRequest
                     AS.DB.getDAG5) -}
12d9fbb5c355582360546143430c898a
  getSheet :: AS.Types.ASSheetId
              -> GHC.Types.IO (Data.Maybe.Maybe AS.Types.ASSheet)
    {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.DB.getSheet1
                    `cast`
                  (<AS.Types.ASSheetId>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0]
                                 <Data.Maybe.Maybe AS.Types.ASSheet>_R)) -}
cb2a9705dbc884dea9e8588dfeb57e12
  getSheet1 :: AS.Types.ASSheetId
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     Data.Maybe.Maybe AS.Types.ASSheet #)
    {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,U>,
       Unfolding: InlineRule (2, True, True)
                  (\ sheet :: AS.Types.ASSheetId
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   (# eta, Data.Maybe.Nothing @ AS.Types.ASSheet #)) -}
8421a0523dc85b418fe546b8739577c3
  getVolatileLocs :: GHC.Types.IO [AS.Types.ASLocation]
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (AS.DB.getVolatileLocs1
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0] <[AS.Types.ASLocation]>_R))) -}
c726a77dc7b77b8a9568281cf8ff2b5a
  getVolatileLocs1 :: GHC.Prim.State# GHC.Prim.RealWorld
                      -> (# GHC.Prim.State# GHC.Prim.RealWorld, [AS.Types.ASLocation] #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case Database.Redis.Core.$wa
                          AS.DB.cInfo6
                          AS.DB.cInfo4
                          (Data.Maybe.Nothing @ Data.ByteString.Internal.ByteString)
                          AS.DB.cInfo3
                          100
                          AS.DB.cInfo1
                            `cast`
                          (Trans
                               (Sym (Data.Fixed.NTCo:Fixed[0] <Data.Fixed.E12>_P))
                               (Sym (Data.Time.Clock.UTC.NTCo:NominalDiffTime[0])))
                          eta of ds1 { (#,#) ipv ipv1 ->
                   (Data.Pool.withResource_$swithResource
                      @ (Database.Redis.ProtocolPipelining.Connection
                             Database.Redis.Protocol.Reply)
                      @ [AS.Types.ASLocation]
                      ipv1 `cast` (Database.Redis.Core.NTCo:Connection[0])
                      AS.DB.getVolatileLocs2
                        `cast`
                      (<Database.Redis.ProtocolPipelining.Connection
                            Database.Redis.Protocol.Reply>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <[AS.Types.ASLocation]>_R)))
                     `cast`
                   (GHC.Types.NTCo:IO[0] <[AS.Types.ASLocation]>_R)
                     ipv }) -}
83939966fa97aa230e10391db88075be
  getVolatileLocs2 :: Database.Redis.ProtocolPipelining.Connection
                          Database.Redis.Protocol.Reply
                      -> GHC.Prim.State# GHC.Prim.RealWorld
                      -> (# GHC.Prim.State# GHC.Prim.RealWorld, [AS.Types.ASLocation] #)
    {- Arity: 2,
       Unfolding: (\ r1 :: Database.Redis.ProtocolPipelining.Connection
                               Database.Redis.Protocol.Reply
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case r1 of ww { Database.Redis.ProtocolPipelining.Conn ww1 ww2 ww3 ww4 ->
                   case AS.DB.getVolatileLocs_lvl9 of ww5 { Data.ByteString.Internal.PS ww6 ww7 ww8 ww9 ->
                   case Database.Redis.ProtocolPipelining.$wa2
                          @ Database.Redis.Protocol.Reply
                          ww1
                          ww2
                          ww3
                          ww6
                          ww7
                          ww8
                          ww9
                          s of ds1 { (#,#) ipv ipv1 ->
                   case Database.Redis.Types.$fRedisResult[]0_$cdecode
                          @ Data.ByteString.Internal.ByteString
                          Database.Redis.Types.$fRedisResultByteString_$cdecode
                            `cast`
                          (Sym (Database.Redis.Types.NTCo:RedisResult[0]
                                    <Data.ByteString.Internal.ByteString>_N))
                          ipv1 of wild {
                     Data.Either.Left ipv2
                     -> (GHC.IO.failIO @ [AS.Types.ASLocation] AS.DB.getVolatileLocs3)
                          `cast`
                        (GHC.Types.NTCo:IO[0] <[AS.Types.ASLocation]>_R)
                          ipv
                     Data.Either.Right vl
                     -> (# ipv,
                           GHC.Base.map
                             @ Data.ByteString.Internal.ByteString
                             @ AS.Types.ASLocation
                             AS.DB.bStrToASLocation
                             vl #) } } } }) -}
53032bdafc73e2f250013f5403fcfc84
  getVolatileLocs3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "Pattern match failure in do expression at src/AS/DB.hs:220:7-14"#) -}
91d10500b5f100e3264012a9d6732130
  getVolatileLocs4 :: [Data.ByteString.Internal.ByteString]
    {- Unfolding: (GHC.Types.:
                     @ Data.ByteString.Internal.ByteString
                     Database.Redis.Commands.smembers1
                     AS.DB.getVolatileLocs5) -}
95a877a9451912671e6ae63b9158066c
  getVolatileLocs5 :: [Data.ByteString.Internal.ByteString]
    {- Unfolding: (GHC.Types.:
                     @ Data.ByteString.Internal.ByteString
                     AS.DB.getVolatileLocs6
                     (GHC.Types.[] @ Data.ByteString.Internal.ByteString)) -}
7d56287a94fae1687ff7db5f4c4fc1f2
  getVolatileLocs6 :: Data.ByteString.Internal.ByteString
    {- Unfolding: (case GHC.Prim.newMutVar#
                          @ GHC.ForeignPtr.Finalizers
                          @ GHC.Prim.RealWorld
                          GHC.ForeignPtr.NoFinalizers
                          GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                   let {
                     addr# :: GHC.Prim.Addr# = "volLocs"#
                   } in
                   case {__pkg_ccall bytestring-0.10.4.0 strlen GHC.Prim.Addr#
                                                                -> GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                -> (# GHC.Prim.State#
                                                                          GHC.Prim.RealWorld,
                                                                      GHC.Prim.Word# #)}
                          addr#
                          ipv of wild { (#,#) ds3 ds4 ->
                   Data.ByteString.Internal.PS
                     addr#
                     (GHC.ForeignPtr.PlainForeignPtr ipv1)
                     0
                     (GHC.Prim.word2Int# ds4) } }) -}
b4d34013c17b1b464b6cbef95d1ec93d
  getVolatileLocs_lvl9 :: Data.ByteString.Internal.ByteString
    {- Unfolding: (Database.Redis.Protocol.renderRequest
                     AS.DB.getVolatileLocs4) -}
16cd28ce3f33d3bc41e051b052c45af4
  getWorkbook :: GHC.Base.String
                 -> GHC.Types.IO (Data.Maybe.Maybe AS.Types.ASWorkbook)
    {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.DB.getWorkbook1
                    `cast`
                  (<GHC.Base.String>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0]
                                 <Data.Maybe.Maybe AS.Types.ASWorkbook>_R)) -}
c3f5c94f8f476a1548eb2af9fcf3e238
  getWorkbook1 :: GHC.Base.String
                  -> GHC.Prim.State# GHC.Prim.RealWorld
                  -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                        Data.Maybe.Maybe AS.Types.ASWorkbook #)
    {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,U>,
       Unfolding: InlineRule (2, True, True)
                  (\ name :: GHC.Base.String
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   (# eta, Data.Maybe.Nothing @ AS.Types.ASWorkbook #)) -}
476c1b0a76a554734c55d0d948c998ca
  isPermissibleMessage :: AS.Types.ASUserId
                          -> AS.Types.ASMessage
                          -> GHC.Types.IO GHC.Types.Bool
    {- Arity: 3, HasNoCafRefs,
       Strictness: <L,A><S(LLLS),1*U(A,A,A,1*U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.DB.isPermissibleMessage1
                    `cast`
                  (<AS.Types.ASUserId>_R
                   ->_R <AS.Types.ASMessage>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Types.Bool>_R)) -}
60fdd9d7ce7a97840a89c3d8f45b59ce
  isPermissibleMessage1 :: AS.Types.ASUserId
                           -> AS.Types.ASMessage
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
    {- Arity: 3, HasNoCafRefs,
       Strictness: <L,A><S(LLLS),1*U(A,A,A,1*U)><L,U>, Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ w :: AS.Types.ASUserId
                     w1 :: AS.Types.ASMessage
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w1 of ww { AS.Types.Message ww1 ww2 ww3 ww4 ->
                   AS.DB.$wa1 ww4 w2 }) -}
56f2cb0a65eda0b2e59d08c3f36c9f24
  maybeASCell :: (AS.Types.ASLocation,
                  Data.Maybe.Maybe AS.Types.ASExpression,
                  Data.Maybe.Maybe AS.Types.ASValue,
                  Data.Maybe.Maybe [AS.Types.ASCellTag])
                 -> Data.Maybe.Maybe AS.Types.ASCell
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LSLL),1*U(U,1*U,1*U,1*U)>, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: (AS.Types.ASLocation,
                           Data.Maybe.Maybe AS.Types.ASExpression,
                           Data.Maybe.Maybe AS.Types.ASValue,
                           Data.Maybe.Maybe [AS.Types.ASCellTag]) ->
                   case w of ww { (,,,) ww1 ww2 ww3 ww4 ->
                   AS.DB.$wmaybeASCell ww1 ww2 ww3 ww4 }) -}
6081e8bfe49e37b9956a236d906d4d03
  pushCommit :: AS.Types.ASCommit -> GHC.Types.IO ()
    {- Arity: 2,
       Strictness: <L,1*U(1*U(U,U,U),1*U,1*U,1*U(1*U,1*U(U),1*U(U),1*U(U)))><L,U>,
       Unfolding: (AS.DB.addCommit2
                     `cast`
                   (<AS.Types.ASCommit>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
9092b9a35ad8834710f90be80fc0b8fd
  redo :: GHC.Types.IO (Data.Maybe.Maybe AS.Types.ASCommit)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (AS.DB.redo1
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0]
                             <Data.Maybe.Maybe AS.Types.ASCommit>_R))) -}
3a2a7e86b6ef249a5695822e43f372f4
  redo1 :: GHC.Prim.State# GHC.Prim.RealWorld
           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                 Data.Maybe.Maybe AS.Types.ASCommit #)
    {- Arity: 1, Strictness: <L,U> -}
00ff8ec75394e14774d0f842739054c0
  setCell :: AS.Types.ASCell -> GHC.Types.IO ()
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (AS.DB.setCell1
                     `cast`
                   (<AS.Types.ASCell>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
733d13537084d7877651bbfb3fc747a7
  setCell1 :: AS.Types.ASCell
              -> GHC.Prim.State# GHC.Prim.RealWorld
              -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (\ c :: AS.Types.ASCell
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   AS.DB.setCell2
                     (GHC.Types.: @ AS.Types.ASCell c (GHC.Types.[] @ AS.Types.ASCell))
                     eta) -}
8c97580b3ce065b0c6c4fc0334cc99f4
  setCell2 :: [AS.Types.ASCell]
              -> GHC.Prim.State# GHC.Prim.RealWorld
              -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 2, Strictness: <S,1*U><L,U>,
       Unfolding: (\ ds :: [AS.Types.ASCell]
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ds of wild {
                     [] -> (# eta, GHC.Tuple.() #)
                     : ipv ipv1
                     -> case Database.Redis.Core.$wa
                               AS.DB.cInfo6
                               AS.DB.cInfo4
                               (Data.Maybe.Nothing @ Data.ByteString.Internal.ByteString)
                               AS.DB.cInfo3
                               100
                               AS.DB.cInfo1
                                 `cast`
                               (Trans
                                    (Sym (Data.Fixed.NTCo:Fixed[0] <Data.Fixed.E12>_P))
                                    (Sym (Data.Time.Clock.UTC.NTCo:NominalDiffTime[0])))
                               eta of ds1 { (#,#) ipv2 ipv3 ->
                        case (Data.Pool.withResource_$swithResource
                                @ (Database.Redis.ProtocolPipelining.Connection
                                       Database.Redis.Protocol.Reply)
                                @ ()
                                ipv3 `cast` (Database.Redis.Core.NTCo:Connection[0])
                                (\ conn :: Database.Redis.ProtocolPipelining.Connection
                                               Database.Redis.Protocol.Reply ->
                                 (AS.DB.setCell_go
                                    (Data.List.Split.Internals.chunksOf
                                       @ AS.Types.ASCell
                                       AS.DB.cellChunkSize
                                       wild))
                                   `cast`
                                 (Trans
                                      (Database.Redis.Core.NTCo:Redis[0] <()>_N)
                                      (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                           <Database.Redis.ProtocolPipelining.Connection
                                                Database.Redis.Protocol.Reply>_R
                                           <GHC.Types.IO>_R
                                           <()>_N))
                                   conn))
                               `cast`
                             (GHC.Types.NTCo:IO[0] <()>_R)
                               ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                        AS.DB.chunkM_1
                          @ AS.Types.ASCell
                          AS.DB.setChunkVolatileCells
                          AS.DB.cellChunkSize
                          wild
                          ipv4 } } }) -}
96b999a9991c2cfb89a8a8857372c4ba
  setCell_go :: [[AS.Types.ASCell]] -> Database.Redis.Core.Redis ()
    {- Arity: 1, Strictness: <S,1*U> -}
9e8e39f93e35297ded23b1e596fdf465
  setCells :: [AS.Types.ASCell] -> GHC.Types.IO ()
    {- Arity: 2, Strictness: <S,1*U><L,U>,
       Unfolding: (AS.DB.setCell2
                     `cast`
                   (<[AS.Types.ASCell]>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
c9badcea653b115ef38e909f32cc66a4
  setChunkCells :: [AS.Types.ASCell] -> Database.Redis.Core.Redis ()
    {- Arity: 1, Strictness: <L,U> -}
abbb0f19fb2ea0071d5019f75ffc96f6
  setChunkVolatileCells :: [AS.Types.ASCell]
                           -> Database.Redis.Core.Redis ()
    {- Arity: 1, Strictness: <L,1*U>,
       Unfolding: (\ cells :: [AS.Types.ASCell] ->
                   let {
                     lvl49 :: Data.ByteString.Internal.ByteString
                     = Database.Redis.Protocol.renderRequest
                         (GHC.Types.:
                            @ Data.ByteString.Internal.ByteString
                            Database.Redis.Commands.sadd1
                            (GHC.Types.:
                               @ Data.ByteString.Internal.ByteString
                               AS.DB.setChunkVolatileCells1
                               (GHC.Base.map
                                  @ Data.ByteString.Internal.ByteString
                                  @ Data.ByteString.Internal.ByteString
                                  (GHC.Base.id @ Data.ByteString.Internal.ByteString)
                                  (AS.DB.setChunkVolatileCells_go cells))))
                   } in
                   (\ eta :: Database.Redis.ProtocolPipelining.Connection
                                 Database.Redis.Protocol.Reply
                      eta1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                    case eta of ww { Database.Redis.ProtocolPipelining.Conn ww1 ww2 ww3 ww4 ->
                    case lvl49 of ww5 { Data.ByteString.Internal.PS ww6 ww7 ww8 ww9 ->
                    case Database.Redis.ProtocolPipelining.$wa2
                           @ Database.Redis.Protocol.Reply
                           ww1
                           ww2
                           ww3
                           ww6
                           ww7
                           ww8
                           ww9
                           eta1 of ds1 { (#,#) ipv ipv1 ->
                    (# ipv, GHC.Tuple.() #) } } })
                     `cast`
                   (Trans
                        (<Database.Redis.ProtocolPipelining.Connection
                              Database.Redis.Protocol.Reply>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Trans
                             (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                       <Database.Redis.ProtocolPipelining.Connection
                                            Database.Redis.Protocol.Reply>_R
                                       <GHC.Types.IO>_R
                                       <()>_N))
                             (Sym (Database.Redis.Core.NTCo:Redis[0]) <()>_N)))) -}
0baeed930c5284547f83ad92c9233def
  setChunkVolatileCells1 :: Data.ByteString.Internal.ByteString
    {- Unfolding: (case GHC.Prim.newMutVar#
                          @ GHC.ForeignPtr.Finalizers
                          @ GHC.Prim.RealWorld
                          GHC.ForeignPtr.NoFinalizers
                          GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                   let {
                     addr# :: GHC.Prim.Addr# = "volLocs"#
                   } in
                   case {__pkg_ccall bytestring-0.10.4.0 strlen GHC.Prim.Addr#
                                                                -> GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                -> (# GHC.Prim.State#
                                                                          GHC.Prim.RealWorld,
                                                                      GHC.Prim.Word# #)}
                          addr#
                          ipv of wild { (#,#) ds3 ds4 ->
                   Data.ByteString.Internal.PS
                     addr#
                     (GHC.ForeignPtr.PlainForeignPtr ipv1)
                     0
                     (GHC.Prim.word2Int# ds4) } }) -}
eae0ea52533bb3b582a914da4f1dcc50
  setChunkVolatileCells_go :: [AS.Types.ASCell]
                              -> [Data.ByteString.Internal.ByteString]
    {- Arity: 1, Strictness: <S,1*U> -}
e8ce2bdb68c723d44a170a68a310d20e
  undo :: GHC.Types.IO (Data.Maybe.Maybe AS.Types.ASCommit)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (AS.DB.undo1
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0]
                             <Data.Maybe.Maybe AS.Types.ASCommit>_R))) -}
b95c195dc687853ae0b3ae8f3f91e58e
  undo1 :: GHC.Prim.State# GHC.Prim.RealWorld
           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                 Data.Maybe.Maybe AS.Types.ASCommit #)
    {- Arity: 1, Strictness: <L,U> -}
66fe85fd6c00f5ef98773e091f376cbe
  updateAfterEval :: AS.Types.ASUser
                     -> AS.Types.ASCell
                     -> [AS.Types.ASCell]
                     -> [AS.Types.ASCell]
                     -> GHC.Types.IO ()
    {- Arity: 5,
       Strictness: <L,1*U(1*U(U,U,U),A,A)><L,1*U(A,A,A,1*U)><L,U><S,U><L,U>,
       Unfolding: (AS.DB.updateAfterEval1
                     `cast`
                   (<AS.Types.ASUser>_R
                    ->_R <AS.Types.ASCell>_R
                    ->_R <[AS.Types.ASCell]>_R
                    ->_R <[AS.Types.ASCell]>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
6e834db2f43e01109608474b3feead20
  updateAfterEval1 :: AS.Types.ASUser
                      -> AS.Types.ASCell
                      -> [AS.Types.ASCell]
                      -> [AS.Types.ASCell]
                      -> GHC.Prim.State# GHC.Prim.RealWorld
                      -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 5,
       Strictness: <L,1*U(1*U(U,U,U),A,A)><L,1*U(A,A,A,1*U)><L,U><S,U><L,U>,
       Unfolding: (\ user :: AS.Types.ASUser
                     origCell :: AS.Types.ASCell
                     desc :: [AS.Types.ASCell]
                     cells :: [AS.Types.ASCell]
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   let {
                     $w$j :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                       {- Arity: 1, Strictness: <L,U> -}
                     = \ w :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case AS.DB.addCommit1 user desc cells w of ds1 { (#,#) ipv ipv1 ->
                       case AS.Util.containsTrackingTag
                              (AS.Types.cellTags origCell) of wild { DEFAULT ->
                       (# ipv, GHC.Tuple.() #) } }
                   } in
                   case cells of wild {
                     [] -> $w$j eta
                     : ipv ipv1
                     -> case Database.Redis.Core.$wa
                               AS.DB.cInfo6
                               AS.DB.cInfo4
                               (Data.Maybe.Nothing @ Data.ByteString.Internal.ByteString)
                               AS.DB.cInfo3
                               100
                               AS.DB.cInfo1
                                 `cast`
                               (Trans
                                    (Sym (Data.Fixed.NTCo:Fixed[0] <Data.Fixed.E12>_P))
                                    (Sym (Data.Time.Clock.UTC.NTCo:NominalDiffTime[0])))
                               eta of ds1 { (#,#) ipv2 ipv3 ->
                        case (Data.Pool.withResource_$swithResource
                                @ (Database.Redis.ProtocolPipelining.Connection
                                       Database.Redis.Protocol.Reply)
                                @ ()
                                ipv3 `cast` (Database.Redis.Core.NTCo:Connection[0])
                                (\ conn :: Database.Redis.ProtocolPipelining.Connection
                                               Database.Redis.Protocol.Reply ->
                                 (AS.DB.updateAfterEval_go1
                                    (Data.List.Split.Internals.chunksOf
                                       @ AS.Types.ASCell
                                       AS.DB.cellChunkSize
                                       wild))
                                   `cast`
                                 (Trans
                                      (Database.Redis.Core.NTCo:Redis[0] <()>_N)
                                      (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                           <Database.Redis.ProtocolPipelining.Connection
                                                Database.Redis.Protocol.Reply>_R
                                           <GHC.Types.IO>_R
                                           <()>_N))
                                   conn))
                               `cast`
                             (GHC.Types.NTCo:IO[0] <()>_R)
                               ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                        case Database.Redis.Core.$wa
                               AS.DB.cInfo6
                               AS.DB.cInfo4
                               (Data.Maybe.Nothing @ Data.ByteString.Internal.ByteString)
                               AS.DB.cInfo3
                               100
                               AS.DB.cInfo1
                                 `cast`
                               (Trans
                                    (Sym (Data.Fixed.NTCo:Fixed[0] <Data.Fixed.E12>_P))
                                    (Sym (Data.Time.Clock.UTC.NTCo:NominalDiffTime[0])))
                               ipv4 of ds3 { (#,#) ipv6 ipv7 ->
                        case (Data.Pool.withResource_$swithResource
                                @ (Database.Redis.ProtocolPipelining.Connection
                                       Database.Redis.Protocol.Reply)
                                @ ()
                                ipv7 `cast` (Database.Redis.Core.NTCo:Connection[0])
                                (\ conn :: Database.Redis.ProtocolPipelining.Connection
                                               Database.Redis.Protocol.Reply ->
                                 (AS.DB.updateAfterEval_go
                                    (Data.List.Split.Internals.chunksOf
                                       @ AS.Types.ASCell
                                       AS.DB.cellChunkSize
                                       wild))
                                   `cast`
                                 (Trans
                                      (Database.Redis.Core.NTCo:Redis[0] <()>_N)
                                      (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                           <Database.Redis.ProtocolPipelining.Connection
                                                Database.Redis.Protocol.Reply>_R
                                           <GHC.Types.IO>_R
                                           <()>_N))
                                   conn))
                               `cast`
                             (GHC.Types.NTCo:IO[0] <()>_R)
                               ipv6 of ds4 { (#,#) ipv8 ipv9 ->
                        $w$j ipv8 } } } } }) -}
ac9e735af49106b0b3455b6b3a25aff9
  updateAfterEval_go :: [[AS.Types.ASCell]]
                        -> Database.Redis.Core.Redis ()
    {- Arity: 1, Strictness: <S,1*U> -}
c3f1111a0fd01e8c4ff77223169b4065
  updateAfterEval_go1 :: [[AS.Types.ASCell]]
                         -> Database.Redis.Core.Redis ()
    {- Arity: 1, Strictness: <S,1*U> -}
6219c1f605e1c6b218ae50223120c1db
  updateChunkDAG :: [([AS.Types.ASLocation], AS.Types.ASLocation)]
                    -> Database.Redis.Core.Redis ()
    {- Arity: 1, Strictness: <S,1*U>,
       Unfolding: (\ rels :: [([AS.Types.ASLocation],
                               AS.Types.ASLocation)] ->
                   let {
                     update :: [([Data.ByteString.Internal.ByteString],
                                 Data.ByteString.Internal.ByteString)]
                     = AS.DB.updateChunkDAG_go1 rels
                   } in
                   case GHC.Classes.$fEq[]_$c==
                          @ ([Data.ByteString.Internal.ByteString],
                             Data.ByteString.Internal.ByteString)
                          AS.DB.updateChunkDAG3
                          update
                          (GHC.Types.[]
                             @ ([Data.ByteString.Internal.ByteString],
                                Data.ByteString.Internal.ByteString)) of wild {
                     GHC.Types.False
                     -> let {
                          a4 :: Database.Redis.Transactions.RedisTx
                                    [Database.Redis.Transactions.Queued GHC.Integer.Type.Integer]
                          = AS.DB.updateChunkDAG_go update
                        } in
                        let {
                          lvl49 :: Data.ByteString.Internal.ByteString
                          = Database.Redis.Protocol.renderRequest
                              (GHC.Types.:
                                 @ Data.ByteString.Internal.ByteString
                                 Database.Redis.Commands.sadd1
                                 (GHC.Types.:
                                    @ Data.ByteString.Internal.ByteString
                                    AS.DB.updateChunkDAG2
                                    (GHC.Base.map
                                       @ Data.ByteString.Internal.ByteString
                                       @ Data.ByteString.Internal.ByteString
                                       (GHC.Base.id @ Data.ByteString.Internal.ByteString)
                                       (GHC.Base.map
                                          @ ([Data.ByteString.Internal.ByteString],
                                             Data.ByteString.Internal.ByteString)
                                          @ Data.ByteString.Internal.ByteString
                                          (Data.Tuple.snd
                                             @ [Data.ByteString.Internal.ByteString]
                                             @ Data.ByteString.Internal.ByteString)
                                          update))))
                        } in
                        let {
                          a5 :: GHC.Types.Int
                                -> Database.Redis.Core.Redis
                                       (Database.Redis.Transactions.Queued GHC.Integer.Type.Integer,
                                        GHC.Types.Int)
                            {- Arity: 1, Strictness: <L,U> -}
                          = \ eta :: GHC.Types.Int ->
                            let {
                              a6 :: Database.Redis.Core.Redis
                                        ([Database.Redis.Transactions.Queued
                                              GHC.Integer.Type.Integer],
                                         GHC.Types.Int)
                              = a4
                                  `cast`
                                (Trans
                                     (Database.Redis.Transactions.NTCo:RedisTx[0] <[Database.Redis.Transactions.Queued
                                                                                        GHC.Integer.Type.Integer]>_N)
                                     (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                          <GHC.Types.Int>_N
                                          <Database.Redis.Core.Redis>_R
                                          <[Database.Redis.Transactions.Queued
                                                GHC.Integer.Type.Integer]>_N))
                                  eta
                            } in
                            (\ r1 :: Database.Redis.ProtocolPipelining.Connection
                                         Database.Redis.Protocol.Reply
                               s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                             case (a6
                                     `cast`
                                   (Trans
                                        (Database.Redis.Core.NTCo:Redis[0] <([Database.Redis.Transactions.Queued
                                                                                  GHC.Integer.Type.Integer],
                                                                             GHC.Types.Int)>_N)
                                        (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                             <Database.Redis.ProtocolPipelining.Connection
                                                  Database.Redis.Protocol.Reply>_R
                                             <GHC.Types.IO>_R
                                             <([Database.Redis.Transactions.Queued
                                                    GHC.Integer.Type.Integer],
                                               GHC.Types.Int)>_N))
                                     r1)
                                    `cast`
                                  (GHC.Types.NTCo:IO[0]
                                       <([Database.Redis.Transactions.Queued
                                              GHC.Integer.Type.Integer],
                                         GHC.Types.Int)>_R)
                                    s of ds1 { (#,#) ipv ipv1 ->
                             case ipv1 of wild1 { (,) a7 s' ->
                             case r1 of ww { Database.Redis.ProtocolPipelining.Conn ww1 ww2 ww3 ww4 ->
                             case lvl49 of ww5 { Data.ByteString.Internal.PS ww6 ww7 ww8 ww9 ->
                             case Database.Redis.ProtocolPipelining.$wa2
                                    @ Database.Redis.Protocol.Reply
                                    ww1
                                    ww2
                                    ww3
                                    ww6
                                    ww7
                                    ww8
                                    ww9
                                    ipv of ds2 { (#,#) ipv2 ipv3 ->
                             case Database.Redis.Transactions.$wa
                                    @ GHC.Integer.Type.Integer
                                    Database.Redis.Types.$fRedisResultInteger_$cdecode
                                      `cast`
                                    (Sym (Database.Redis.Types.NTCo:RedisResult[0]
                                              <GHC.Integer.Type.Integer>_N))
                                    s'
                                    ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                             case ipv5 of wild2 { (,) a8 s'1 -> ds3 } } } } } } })
                              `cast`
                            (Trans
                                 (<Database.Redis.ProtocolPipelining.Connection
                                       Database.Redis.Protocol.Reply>_R
                                  ->_R Sym (GHC.Types.NTCo:IO[0]
                                                <(Database.Redis.Transactions.Queued
                                                      GHC.Integer.Type.Integer,
                                                  GHC.Types.Int)>_R))
                                 (Trans
                                      (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                <Database.Redis.ProtocolPipelining.Connection
                                                     Database.Redis.Protocol.Reply>_R
                                                <GHC.Types.IO>_R
                                                <(Database.Redis.Transactions.Queued
                                                      GHC.Integer.Type.Integer,
                                                  GHC.Types.Int)>_N))
                                      (Sym (Database.Redis.Core.NTCo:Redis[0]) <(Database.Redis.Transactions.Queued
                                                                                     GHC.Integer.Type.Integer,
                                                                                 GHC.Types.Int)>_N)))
                        } in
                        (\ r1 :: Database.Redis.ProtocolPipelining.Connection
                                     Database.Redis.Protocol.Reply
                           s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                         case Database.Redis.Transactions.multiExec1
                                @ GHC.Integer.Type.Integer
                                a5
                                  `cast`
                                (Trans
                                     (Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                               <GHC.Types.Int>_N
                                               <Database.Redis.Core.Redis>_R
                                               <Database.Redis.Transactions.Queued
                                                    GHC.Integer.Type.Integer>_N))
                                     (Sym (Database.Redis.Transactions.NTCo:RedisTx[0]) <Database.Redis.Transactions.Queued
                                                                                             GHC.Integer.Type.Integer>_N))
                                r1
                                s of ds1 { (#,#) ipv ipv1 ->
                         case ipv1 of wild1 {
                           DEFAULT
                           -> (GHC.IO.failIO @ () AS.DB.updateChunkDAG1)
                                `cast`
                              (GHC.Types.NTCo:IO[0] <()>_R)
                                ipv
                           Database.Redis.Transactions.TxSuccess ds
                           -> (# ipv, GHC.Tuple.() #) } })
                          `cast`
                        (Trans
                             (<Database.Redis.ProtocolPipelining.Connection
                                   Database.Redis.Protocol.Reply>_R
                              ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                             (Trans
                                  (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                            <Database.Redis.ProtocolPipelining.Connection
                                                 Database.Redis.Protocol.Reply>_R
                                            <GHC.Types.IO>_R
                                            <()>_N))
                                  (Sym (Database.Redis.Core.NTCo:Redis[0]) <()>_N)))
                     GHC.Types.True
                     -> AS.DB.chunkM_2
                          `cast`
                        (Trans
                             (<Database.Redis.ProtocolPipelining.Connection
                                   Database.Redis.Protocol.Reply>_R
                              ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                             (Trans
                                  (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                            <Database.Redis.ProtocolPipelining.Connection
                                                 Database.Redis.Protocol.Reply>_R
                                            <GHC.Types.IO>_R
                                            <()>_N))
                                  (Sym (Database.Redis.Core.NTCo:Redis[0]) <()>_N))) }) -}
a20b7f4da887fb82fdc356228e0fa2f2
  updateChunkDAG1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "Pattern match failure in do expression at src/AS/DB.hs:254:7-17"#) -}
5bd4915967cbc050096e06e227283c01
  updateChunkDAG2 :: Data.ByteString.Internal.ByteString
    {- Unfolding: (case GHC.Prim.newMutVar#
                          @ GHC.ForeignPtr.Finalizers
                          @ GHC.Prim.RealWorld
                          GHC.ForeignPtr.NoFinalizers
                          GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                   let {
                     addr# :: GHC.Prim.Addr# = "toLocSet"#
                   } in
                   case {__pkg_ccall bytestring-0.10.4.0 strlen GHC.Prim.Addr#
                                                                -> GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                -> (# GHC.Prim.State#
                                                                          GHC.Prim.RealWorld,
                                                                      GHC.Prim.Word# #)}
                          addr#
                          ipv of wild { (#,#) ds3 ds4 ->
                   Data.ByteString.Internal.PS
                     addr#
                     (GHC.ForeignPtr.PlainForeignPtr ipv1)
                     0
                     (GHC.Prim.word2Int# ds4) } }) -}
f0b167f1b62055a8ccccb80df84ce0bd
  updateChunkDAG3 :: GHC.Classes.Eq
                         ([Data.ByteString.Internal.ByteString],
                          Data.ByteString.Internal.ByteString)
    {- Unfolding: (GHC.Classes.$fEq(,)
                     @ [Data.ByteString.Internal.ByteString]
                     @ Data.ByteString.Internal.ByteString
                     AS.DB.updateChunkDAG4
                     Data.ByteString.Internal.$fEqByteString) -}
22ba3b6fe11df28da4e96af739d50542
  updateChunkDAG4 :: GHC.Classes.Eq
                         [Data.ByteString.Internal.ByteString]
    {- Unfolding: (GHC.Classes.$fEq[]
                     @ Data.ByteString.Internal.ByteString
                     Data.ByteString.Internal.$fEqByteString) -}
401b7e3b4edfe4614b98bd0feb3421b9
  updateChunkDAG_go :: [([Data.ByteString.Internal.ByteString],
                         Data.ByteString.Internal.ByteString)]
                       -> Database.Redis.Transactions.RedisTx
                              [Database.Redis.Transactions.Queued GHC.Integer.Type.Integer]
    {- Arity: 1, Strictness: <S,1*U> -}
c359a7f7fb63d9b6f6e48d90e29c6e82
  updateChunkDAG_go1 :: [([AS.Types.ASLocation],
                          AS.Types.ASLocation)]
                        -> [([Data.ByteString.Internal.ByteString],
                             Data.ByteString.Internal.ByteString)]
    {- Arity: 1, Strictness: <S,1*U> -}
177a63f5a8721af58d29cf54eb37414c
  updateDAG :: [([AS.Types.ASLocation], AS.Types.ASLocation)]
               -> GHC.Types.IO ()
    {- Arity: 2, Strictness: <S,1*U><L,U>,
       Unfolding: (AS.DB.updateDAG1
                     `cast`
                   (<[([AS.Types.ASLocation], AS.Types.ASLocation)]>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
27c44225b04c780b2d721122ff09d219
  updateDAG1 :: [([AS.Types.ASLocation], AS.Types.ASLocation)]
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 2, Strictness: <S,1*U><L,U>,
       Unfolding: (\ ds :: [([AS.Types.ASLocation], AS.Types.ASLocation)]
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ds of wild {
                     [] -> (# eta, GHC.Tuple.() #)
                     : ipv ipv1
                     -> AS.DB.chunkM_1
                          @ ([AS.Types.ASLocation], AS.Types.ASLocation)
                          AS.DB.updateChunkDAG
                          AS.DB.cellChunkSize
                          wild
                          eta }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

