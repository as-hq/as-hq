
==================== FINAL INTERFACE ====================
2015-09-01 13:16:44.23329 UTC

interface alphasheets-0.1.0.0:AS.Handler 7083
  interface hash: 60c1c259c0a7f39fce45f0f7808fa8fe
  ABI hash: 587fea7850457b515d58c2d96946ad7b
  export-list hash: 0ead87ef776f4876e90df30dee7a7cec
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 5316f95d5f7b98addcee99ed907c3931
  used TH splices: False
  where
exports:
  AS.Handler.broadcast
  AS.Handler.broadcastFiltered
  AS.Handler.handleAddTags
  AS.Handler.handleClear
  AS.Handler.handleDelete
  AS.Handler.handleEval
  AS.Handler.handleGet
  AS.Handler.handleRedo
  AS.Handler.handleRemoveTags
  AS.Handler.handleUndo
  AS.Handler.processAddTag
  AS.Handler.processRemoveTag
  AS.Handler.sendBroadcastFiltered
  AS.Handler.sendToOriginalUser
module dependencies: AS.Config.Paths AS.Config.Settings AS.DAG
                     AS.DB AS.Daemon AS.Dispatch AS.Eval AS.Eval.Endware AS.Eval.Lang
                     AS.Eval.Middleware AS.Parsing.Common AS.Parsing.In AS.Parsing.Out
                     AS.Types AS.Util
package dependencies: BoundedChan-1.0.3.0 SHA-1.6.4.2 aeson-0.8.1.1
                      array-0.5.0.0 attoparsec-0.13.0.1 base base64-bytestring-1.0.0.1
                      binary-0.7.1.0 blaze-builder-0.4.0.1 bytestring-0.10.4.0
                      bytestring-lexing-0.5.0.2 case-insensitive-1.2.0.4 cereal-0.4.1.1
                      containers-0.5.5.1 crypto-api-0.13.2 daemons-0.2.1
                      data-default-0.5.3 data-default-class-0.0.1
                      data-default-instances-base-0.0.1
                      data-default-instances-containers-0.0.1
                      data-default-instances-dlist-0.0.1
                      data-default-instances-old-locale-0.0.1 deepseq-1.3.0.2
                      directory-1.2.2.1 dlist-0.7.1.1 entropy-0.3.7 filepath-1.3.0.2
                      ghc-prim hashable-1.2.3.3 hedis-0.6.8 integer-gmp
                      monad-control-1.0.0.4 monad-loops-0.4.3 mtl-2.2.1 network-2.6.2.1
                      old-locale-1.0.0.6 parsec-3.1.9 pretty-1.1.1.1 primitive-0.5.2.1
                      process-1.2.3.0 pureMD5-2.1.2.1 pyfi-0.4.0.4 random-1.1
                      regex-base-0.93.2 regex-posix-0.95.2 resource-pool-0.2.3.2
                      scientific-0.3.3.8 split-0.2.2 stm-2.4.2 strict-0.3.2 tagged-0.8.1
                      template-haskell text-1.2.1.1 time-1.5.0.1 transformers-0.4.3.0
                      transformers-base-0.4.4 unix-2.7.1.0 unordered-containers-0.2.5.1
                      vector-0.10.9.1 websockets-0.9.5.0
orphans: aeson-0.8.1.1:Data.Aeson.Types.Generic
         aeson-0.8.1.1:Data.Aeson.Types.Instances
         aeson-0.8.1.1:Data.Aeson.Types.Internal alphasheets-0.1.0.0:AS.DAG
         alphasheets-0.1.0.0:AS.Dispatch alphasheets-0.1.0.0:AS.Eval.Lang
         alphasheets-0.1.0.0:AS.Parsing.In
         attoparsec-0.13.0.1:Data.Attoparsec.ByteString.Char8 base:GHC.Base
         base:GHC.Float base:GHC.Real binary-0.7.1.0:Data.Binary.Generic
         bytestring-0.10.4.0:Data.ByteString.Builder
         bytestring-lexing-0.5.0.2:Data.ByteString.Lex.Fractional
         crypto-api-0.13.2:Crypto.Classes crypto-api-0.13.2:Crypto.Random
         data-default-instances-base-0.0.1:Data.Default.Instances.Base
         data-default-instances-containers-0.0.1:Data.Default.Instances.Containers
         data-default-instances-dlist-0.0.1:Data.Default.Instances.DList
         data-default-instances-old-locale-0.0.1:Data.Default.Instances.OldLocale
         hashable-1.2.3.3:Data.Hashable.Generic
         network-2.6.2.1:Network.Socket network-2.6.2.1:Network.Socket.Types
         pyfi-0.4.0.4:Python random-1.1:System.Random
         regex-base-0.93.2:Text.Regex.Base.Context
         regex-posix-0.95.2:Text.Regex.Posix.ByteString
         regex-posix-0.95.2:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2:Text.Regex.Posix.Sequence
         regex-posix-0.95.2:Text.Regex.Posix.String
         resource-pool-0.2.3.2:Data.Pool stm-2.4.2:Control.Monad.STM
         template-haskell:Language.Haskell.TH.PprLib text-1.2.1.1:Data.Text
         text-1.2.1.1:Data.Text.Lazy text-1.2.1.1:Data.Text.Show
         time-1.5.0.1:Data.Time.Calendar.Gregorian
         time-1.5.0.1:Data.Time.Format.Parse
         time-1.5.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.4.3.0:Control.Monad.Trans.Error
         vector-0.10.9.1:Data.Vector.Fusion.Stream
         vector-0.10.9.1:Data.Vector.Unboxed
family instance modules: alphasheets-0.1.0.0:AS.Types
                         attoparsec-0.13.0.1:Data.Attoparsec.Internal.Types
                         base:Control.Applicative base:Data.Either base:Data.Monoid
                         base:Data.Type.Equality base:GHC.Exts base:GHC.Generics
                         dlist-0.7.1.1:Data.DList
                         monad-control-1.0.0.4:Control.Monad.Trans.Control
                         primitive-0.5.2.1:Control.Monad.Primitive tagged-0.8.1:Data.Tagged
                         text-1.2.1.1:Data.Text text-1.2.1.1:Data.Text.Lazy
                         unordered-containers-0.2.5.1:Data.HashMap.Base
                         unordered-containers-0.2.5.1:Data.HashSet
                         vector-0.10.9.1:Data.Vector vector-0.10.9.1:Data.Vector.Primitive
                         vector-0.10.9.1:Data.Vector.Storable
                         vector-0.10.9.1:Data.Vector.Unboxed.Base
import  -/  aeson-0.8.1.1:Data.Aeson 2bcee634dc715d12e7154aed92c42567
import  -/  aeson-0.8.1.1:Data.Aeson.Encode.ByteString 04b640ac3757997bdf0ec42533e6bf2d
import  -/  AS.DB b103d865f4ec53f55246735818175d83
  exports: e630d4005d8ca7bc23c8345324ef20d5
  getCell 32e8e02834a55ef43ef56780b981e4e5
  getCells d6562588ae1387a6917e7b7057c92e8d
  redo 8d86a3bcedc95080ff275e5fae51d98c
  setCell e68cce7a2210a977e4007c3b545b2e82
  undo f84339eec2e6dcf4db48739439abd786
import  -/  AS.Daemon 0cb0c0e54e25503d46803247a35fccf1
  exports: 9cc1d7948c91bb66b16279cc7498110a
  modifyDaemon 7e26cc78b819173a7ee45ea3d122ed38
  removeDaemon 658db4c61f5f6ad4d38db845f4085a83
import  -/  AS.Dispatch 37cddcc4722fb6f5fe2a7386f0dd77f3
  exports: 5ca54fad58853d43d077afdec09156c9
  runDispatchCycle 3a1d3010582de7819347a8207b33ba0d
import  -/  AS.Types 17df67c7fb5c4274434b135ecca2fd18
  exports: faa4c33d7992048176259497d33a778a
  ASCell 32dfbbc25ff3c5498ee65784d103d0bc
  ASCellTag d780e9be33bd685d9cf285ea38f21380
  ASCommit 3048b0a9be11147e56e1bb31d1b8c891
  ASCommit 675fd72d85072c5d5cc350714855d057
  ASLocation 3b2dd632a092c707ad7f9fd2853e51c0
  ASMessage e2f20bd53daac1ec88467c56dfd226ba
  ASPayload d5da2ad0e47a7db7913d27893aa5defd
  ASUser acde587c6bc643725943e2f314258960
  AddTags 0f156c970e57d8417dddd1d2e82a0846
  Cell dec97d7f3bb4a40c8963b32a5fb15721
  Commit 1f82d8c3f88aa5d7a1a59172d0092ade
  Delete 0ebab4fd4a83111cdf14958427d2364f
  Evaluate 01170a2f8d049c9711f3ac88488f4e3c
  Get 7b59a85b1a4e431f5adaaeb5925cf853
  Message 888907b4f3ed1a404f3bc6b7633cd303
  NoResult c6f2a4de505b7ec7826cee77a66cbd4e
  PayloadC 639fd24f07e968aafea171dd980523ab
  PayloadCL ca44a67fcb695dd79358b678ec60bdb1
  PayloadCommit a9c7859d9aacaabe4eb962967f68ea7c
  PayloadLL 6907ef2a2b8c31ea3fe9dcf9c6ca37c7
  PayloadN 14977fdcb1d716a5748d37d5a6947bb0
  PayloadTags f747410502cfe879735b9a412875aa6b
  RemoveTags 8e4ef6376c4094cfe3e6bfc29a3f5f3c
  ServerState 477485a4e0e1ff3b46e417ac98fb413b
  State e7ecaac47e838d7c88819e9e12dff8ad
  StreamTag 0fce04478b58589eb0bf04481975f83a
  Success 4d1adaf7d7524420fa0c68ae24acff20
  Undo 6243c54de48bb065f7a66608936b9809
  Update 2a67b8c00d1f813cb1f4e54964901fa0
  User 60d4d9e62ddcb2d616504ca54fd0fa27
  after 4a633a0eff3a873eebd6a38515163b15
  before 9bd72b304b55382b71025da7bd49d56c
  commitUserId e16c25779d53208cb85e6278fb1c9771
  failureMessage 95a7c2820eeccf85715a7de4564f70b0
  messageUserId 1882ad8e13531fe7142edfe9dbf3fc74
  time 92cba92bdd98faf14a5a446a287cfcd8
  userConn f7357fe77c39f0658e5486a57e8cae0d
  userId 0c74eef06f39f22605552fc790a62bd3
  userWindows 85c34f74f9b39d311a196cbe05a55d24
import  -/  AS.Util 0185a4712dd060392a6127df94835923
  exports: 1789dbf7c4876b860373b2ba851fc3ac
  intersectViewingWindows 69aede976e2d4300f85b37bedb31dd48
  updateMessageUser 101f1b9e92f56320d5ff86710909ed59
import  -/  base:Control.Concurrent 1be25cd1e2ac314074fafb26df0ff06b
import  -/  base:Control.Monad 483e787e07c2e49f1fb1c1b88665cb92
import  -/  base:Data.List 0908c8f6208710e0f918cb6f09e882cc
import  -/  base:Data.Maybe 5034d40e23c3a7110309f188001df4ca
import  -/  base:Data.Tuple cac4e06c48274e85317bd3e59867ef5b
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:GHC.List 4cff382327e59a5787355ca0a4174450
import  -/  base:GHC.MVar 2c9d76ed3707c435c49b694504d09491
import  -/  base:GHC.Show cf1a7ff9edb0f41528085aad04d33753
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  base:System.IO cadd0efb01c47ddd8f52d750739fdbdf
import  -/  ghc-prim:GHC.Types dcba736fa3dfba12d307ab18354845d2
import  -/  text-1.2.1.1:Data.Text b3c4fa3023eabdced6a311d2fdbd8c54
import  -/  text-1.2.1.1:Data.Text.Internal 5c7132affaaf11c5fb226a9fff83be01
import  -/  transformers-0.4.3.0:Control.Monad.IO.Class 1fe01dea961eadb0b037d705f6cb22bb
import  -/  websockets-0.9.5.0:Network.WebSockets c11cd6465abe4dc4c3ad51897e46aaa0
import  -/  websockets-0.9.5.0:Network.WebSockets.Connection c61c2e729312f1454ad297f2f5f52374
1eae0378eb902960fde667b325a9126a
  $wa :: Data.Text.Internal.Text
         -> [(AS.Types.ASUser, [AS.Types.ASDaemon])]
         -> GHC.Prim.State# GHC.Prim.RealWorld
         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3, Strictness: <L,U><S,1*U><L,U>,
       Unfolding: (\ w :: Data.Text.Internal.Text
                     ww :: [(AS.Types.ASUser, [AS.Types.ASDaemon])]
                     w1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   let {
                     a :: Data.ByteString.Lazy.Internal.ByteString
                     = Data.Text.Lazy.Encoding.encodeUtf8
                         (Data.Text.Lazy.fromChunks_go
                            (GHC.Base.$fMonad[]_$creturn @ Data.Text.Internal.Text w))
                   } in
                   let {
                     a1 :: Network.WebSockets.Types.DataMessage
                     = Network.WebSockets.Types.Text a
                   } in
                   let {
                     lvl1 :: Network.WebSockets.Types.Message
                     = Network.WebSockets.Types.DataMessage a1
                   } in
                   letrec {
                     a2 :: [(AS.Types.ASUser, [AS.Types.ASDaemon])]
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                       {- Arity: 2, Strictness: <S,1*U><L,U> -}
                     = \ ds :: [(AS.Types.ASUser, [AS.Types.ASDaemon])]
                         eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case ds of wild {
                         [] -> (# eta, GHC.Tuple.() #)
                         : y ys
                         -> case y of wild1 { (,) x ds1 ->
                            case x of wild2 { AS.Types.User ds2 conn ds3 ->
                            case conn of wild3 { Network.WebSockets.Connection.Connection dt ds4 ds5 ds6 dt1 ->
                            case (ds6 lvl1) `cast` (GHC.Types.NTCo:IO[0] <()>_R)
                                   eta of ds7 { (#,#) ipv ipv1 ->
                            a2 ys ipv } } } } }
                   } in
                   a2 ww w1) -}
8bc9cf929ed10eb35a03a6c0e8e1a37d
  $wa1 :: AS.Types.ASUserId
          -> AS.Types.ASPayload
          -> [AS.Types.ASUser]
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4, Strictness: <L,U(U,U,U)><S,1*U><S,1*U><L,U> -}
246d18598422be2add415fa7df135a17
  $wa2 :: AS.Types.ASUser
          -> GHC.MVar.MVar AS.Types.ServerState
          -> AS.Types.ASUserId
          -> AS.Types.ASPayload
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 5,
       Strictness: <L,1*U(1*U,1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A),A)><L,U(U)><L,U(U,U,U)><S,1*U><L,U>,
       Unfolding: (\ w :: AS.Types.ASUser
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     ww :: AS.Types.ASUserId
                     ww1 :: AS.Types.ASPayload
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ww1 of wild {
                     DEFAULT
                     -> case AS.Handler.handleAddTags5
                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        of {}
                     AS.Types.PayloadTags ts loc
                     -> let {
                          wild1 :: AS.Types.ASMessage
                          = AS.Types.Message
                              ww
                              AS.Handler.handleAddTags4
                              AS.Handler.handleAddTags3
                              wild
                        } in
                        letrec {
                          a :: [AS.Types.ASCellTag]
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                            {- Arity: 2, Strictness: <S,1*U><L,U> -}
                          = \ ds :: [AS.Types.ASCellTag]
                              eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                            case ds of wild2 {
                              [] -> (# eta, GHC.Tuple.() #)
                              : y ys
                              -> case AS.Handler.$wa3
                                        w1
                                        loc
                                        wild1
                                        y
                                        eta of ds1 { (#,#) ipv ipv1 ->
                                 a ys ipv } }
                        } in
                        case a ts w2 of ds1 { (#,#) ipv ipv1 ->
                        case w of ww2 { AS.Types.User ww3 ww4 ww5 ->
                        case ww4 of ww6 { Network.WebSockets.Connection.Connection ww7 ww8 ww9 ww10 ww11 ->
                        (ww10
                           (Network.WebSockets.Types.DataMessage
                              (Network.WebSockets.Types.Text
                                 (Data.ByteString.Builder.toLazyByteString
                                    (case AS.Types.$w$ctoJSON4
                                            ww3
                                            AS.Types.AddTags
                                            AS.Types.Success
                                            AS.Handler.handleAddTags2 of ww12 { (##) ww13 ->
                                     Data.Aeson.Encode.ByteString.encodeToByteStringBuilder
                                       (Data.Aeson.Types.Internal.Object ww13) })))))
                          `cast`
                        (GHC.Types.NTCo:IO[0] <()>_R)
                          ipv } } } }) -}
4af4805b0c82cf8095c17609d20f11fb
  $wa3 :: GHC.MVar.MVar AS.Types.ServerState
          -> AS.Types.ASLocation
          -> AS.Types.ASMessage
          -> AS.Types.ASCellTag
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 5,
       Strictness: <L,1*U(U)><L,U><L,1*U(1*U(U,U,U),A,A,A)><L,U><L,U>,
       Unfolding: (\ w :: GHC.MVar.MVar AS.Types.ServerState
                     w1 :: AS.Types.ASLocation
                     w2 :: AS.Types.ASMessage
                     w3 :: AS.Types.ASCellTag
                     w4 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case AS.DB.chunkM1
                          @ AS.Types.ASLocation
                          @ (Data.Maybe.Maybe AS.Types.ASCell)
                          AS.DB.getChunkCells
                          AS.DB.cellChunkSize
                          (GHC.Types.:
                             @ AS.Types.ASLocation
                             w1
                             (GHC.Types.[] @ AS.Types.ASLocation))
                          w4 of ds1 { (#,#) ipv ipv1 ->
                   case ipv1 of wild {
                     []
                     -> case GHC.List.badHead
                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        of {}
                     : x ds2
                     -> let {
                          $w$j :: GHC.Prim.State# GHC.Prim.RealWorld
                                  -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                            {- Arity: 1, Strictness: <L,U> -}
                          = \ w5 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                            case w3 of wild1 {
                              DEFAULT -> (# w5, GHC.Tuple.() #)
                              AS.Types.StreamTag s
                              -> case AS.DB.chunkM1
                                        @ AS.Types.ASLocation
                                        @ (Data.Maybe.Maybe AS.Types.ASCell)
                                        AS.DB.getChunkCells
                                        AS.DB.cellChunkSize
                                        (GHC.Types.:
                                           @ AS.Types.ASLocation
                                           w1
                                           (GHC.Types.[] @ AS.Types.ASLocation))
                                        w5 of ds3 { (#,#) ipv2 ipv3 ->
                                 case ipv3 of wild2 {
                                   []
                                   -> case GHC.List.badHead
                                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                      of {}
                                   : x1 ds4
                                   -> case x1 of wild3 {
                                        Data.Maybe.Nothing -> (# ipv2, GHC.Tuple.() #)
                                        Data.Maybe.Just cell
                                        -> case AS.Daemon.modifyDaemon2
                                                  w1
                                                  w
                                                  ipv2 of ds5 { (#,#) ipv4 ipv5 ->
                                           AS.Daemon.$wa
                                             s
                                             w1
                                             (AS.Types.Message
                                                (AS.Types.messageUserId w2)
                                                AS.Types.Evaluate
                                                AS.Types.NoResult
                                                (AS.Types.PayloadC cell))
                                             ipv4 } } } } }
                        } in
                        case x of wild1 {
                          Data.Maybe.Nothing -> $w$j ipv
                          Data.Maybe.Just c
                          -> case c of wild2 { AS.Types.Cell l e v ts ->
                             case GHC.List.elem
                                    @ AS.Types.ASCellTag
                                    AS.Types.$fEqASCellTag
                                    w3
                                    ts of wild3 {
                               GHC.Types.False
                               -> case AS.DB.setCell2
                                         (GHC.Types.:
                                            @ AS.Types.ASCell
                                            (AS.Types.Cell
                                               l
                                               e
                                               v
                                               (GHC.Types.: @ AS.Types.ASCellTag w3 ts))
                                            (GHC.Types.[] @ AS.Types.ASCell))
                                         ipv of ds3 { (#,#) ipv2 ipv3 ->
                                  $w$j ipv2 }
                               GHC.Types.True -> $w$j ipv } } } } }) -}
850c2249c6c50b82b98196c93aff2366
  $wa4 :: AS.Types.ASUser
          -> GHC.Prim.MVar# GHC.Prim.RealWorld AS.Types.ServerState
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3, Strictness: <L,1*U(1*U(U,U,U),A,A)><L,U><L,U>,
       Unfolding: (\ w :: AS.Types.ASUser
                     ww :: GHC.Prim.MVar# GHC.Prim.RealWorld AS.Types.ServerState
                     w1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case GHC.Prim.readMVar#
                          @ GHC.Prim.RealWorld
                          @ AS.Types.ServerState
                          ww
                          w1 of ds1 { (#,#) ipv ipv1 ->
                   case ipv1 of wild { AS.Types.State allUsers ->
                   AS.Handler.$wa1
                     (AS.Types.userId w)
                     AS.Types.failureMessage1
                     (GHC.Base.map
                        @ (AS.Types.ASUser, [AS.Types.ASDaemon])
                        @ AS.Types.ASUser
                        (Data.Tuple.fst @ AS.Types.ASUser @ [AS.Types.ASDaemon])
                        allUsers)
                     ipv } }) -}
8815f30690262717e444fd9907d693a8
  $wa5 :: AS.Types.ASUser
          -> GHC.Prim.MVar# GHC.Prim.RealWorld AS.Types.ServerState
          -> AS.Types.ASPayload
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4, Strictness: <L,1*U(1*U(U,U,U),A,A)><L,U><S,1*U><L,U>,
       Unfolding: (\ w :: AS.Types.ASUser
                     ww :: GHC.Prim.MVar# GHC.Prim.RealWorld AS.Types.ServerState
                     w1 :: AS.Types.ASPayload
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w1 of wild {
                     DEFAULT
                     -> case AS.Handler.handleDelete2
                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        of {}
                     AS.Types.PayloadLL locs
                     -> case GHC.Prim.readMVar#
                               @ GHC.Prim.RealWorld
                               @ AS.Types.ServerState
                               ww
                               w2 of ds1 { (#,#) ipv ipv1 ->
                        case ipv1 of wild1 { AS.Types.State allUsers ->
                        AS.Handler.$wa1
                          (AS.Types.userId w)
                          wild
                          (GHC.Base.map
                             @ (AS.Types.ASUser, [AS.Types.ASDaemon])
                             @ AS.Types.ASUser
                             (Data.Tuple.fst @ AS.Types.ASUser @ [AS.Types.ASDaemon])
                             allUsers)
                          ipv } } }) -}
83541cf823a4c64902f03000f8f0514c
  $wa6 :: AS.Types.ASUser
          -> GHC.Prim.MVar# GHC.Prim.RealWorld AS.Types.ServerState
          -> AS.Types.ASMessage
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4,
       Strictness: <L,1*U(1*U(U,U,U),A,A)><L,U><L,1*U(A,A,A,1*U)><L,U>,
       Unfolding: (\ w :: AS.Types.ASUser
                     ww :: GHC.Prim.MVar# GHC.Prim.RealWorld AS.Types.ServerState
                     w1 :: AS.Types.ASMessage
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case GHC.Prim.readMVar#
                          @ GHC.Prim.RealWorld
                          @ AS.Types.ServerState
                          ww
                          w2 of ds1 { (#,#) ipv ipv1 ->
                   case ipv1 of wild { AS.Types.State allUsers ->
                   case w1 of wild1 { AS.Types.Message ds2 a r p ->
                   AS.Handler.$wa1
                     (AS.Types.userId w)
                     p
                     (GHC.Base.map
                        @ (AS.Types.ASUser, [AS.Types.ASDaemon])
                        @ AS.Types.ASUser
                        (Data.Tuple.fst @ AS.Types.ASUser @ [AS.Types.ASDaemon])
                        allUsers)
                     ipv } } }) -}
adf938543de60b84122685faf68e7c19
  $wa7 :: AS.Types.ASUser
          -> GHC.MVar.MVar AS.Types.ServerState
          -> AS.Types.ASPayload
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4,
       Strictness: <L,1*U(1*U,1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A),A)><L,U(U)><S,1*U><L,U>,
       Unfolding: (\ w :: AS.Types.ASUser
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     ww :: AS.Types.ASPayload
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ww of wild {
                     DEFAULT
                     -> case AS.Handler.handleRemoveTags3
                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        of {}
                     AS.Types.PayloadTags ts loc
                     -> letrec {
                          a :: [AS.Types.ASCellTag]
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                            {- Arity: 2, Strictness: <S,1*U><L,U> -}
                          = \ ds :: [AS.Types.ASCellTag]
                              eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                            case ds of wild1 {
                              [] -> (# eta, GHC.Tuple.() #)
                              : y ys
                              -> case AS.Handler.handleRemoveTags2
                                        loc
                                        w1
                                        y
                                        eta of ds1 { (#,#) ipv ipv1 ->
                                 a ys ipv } }
                        } in
                        case a ts w2 of ds1 { (#,#) ipv ipv1 ->
                        case w of ww1 { AS.Types.User ww2 ww3 ww4 ->
                        case ww3 of ww5 { Network.WebSockets.Connection.Connection ww6 ww7 ww8 ww9 ww10 ->
                        (ww9
                           (Network.WebSockets.Types.DataMessage
                              (Network.WebSockets.Types.Text
                                 (Data.ByteString.Builder.toLazyByteString
                                    (case AS.Types.$w$ctoJSON4
                                            ww2
                                            AS.Types.RemoveTags
                                            AS.Types.Success
                                            AS.Handler.handleAddTags2 of ww11 { (##) ww12 ->
                                     Data.Aeson.Encode.ByteString.encodeToByteStringBuilder
                                       (Data.Aeson.Types.Internal.Object ww12) })))))
                          `cast`
                        (GHC.Types.NTCo:IO[0] <()>_R)
                          ipv } } } }) -}
f04405e96b1ef98fe1052e218e666455
  broadcast :: Data.Text.Internal.Text
               -> AS.Types.ServerState
               -> GHC.Types.IO ()
    {- Arity: 3, Strictness: <L,U><S(S),1*U(1*U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Handler.broadcast1
                    `cast`
                  (<Data.Text.Internal.Text>_R
                   ->_R <AS.Types.ServerState>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
235421690bd71f5bf8b0a199d02c93be
  broadcast1 :: Data.Text.Internal.Text
                -> AS.Types.ServerState
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3, Strictness: <L,U><S(S),1*U(1*U)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ w :: Data.Text.Internal.Text
                     w1 :: AS.Types.ServerState
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w1 of ww { AS.Types.State ww1 -> AS.Handler.$wa w ww1 w2 }) -}
b564cea4160fe4771901a19d7532c8fe
  broadcastFiltered :: AS.Types.ASMessage
                       -> [AS.Types.ASUser]
                       -> GHC.Types.IO ()
    {- Arity: 3,
       Strictness: <S(LLLS),1*U(U(U,U,U),A,A,1*U)><S,1*U><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Handler.broadcastFiltered1
                    `cast`
                  (<AS.Types.ASMessage>_R
                   ->_R <[AS.Types.ASUser]>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
b85bef72435f44d35a4587636a715c66
  broadcastFiltered1 :: AS.Types.ASMessage
                        -> [AS.Types.ASUser]
                        -> GHC.Prim.State# GHC.Prim.RealWorld
                        -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3,
       Strictness: <S(LLLS),1*U(U(U,U,U),A,A,1*U)><S,1*U><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ w :: AS.Types.ASMessage
                     w1 :: [AS.Types.ASUser]
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w of ww { AS.Types.Message ww1 ww2 ww3 ww4 ->
                   AS.Handler.$wa1 ww1 ww4 w1 w2 }) -}
6da635e4b83023e87869c1ed502368bf
  handleAddTags :: AS.Types.ASUser
                   -> GHC.MVar.MVar AS.Types.ServerState
                   -> AS.Types.ASMessage
                   -> GHC.Types.IO ()
    {- Arity: 4,
       Strictness: <L,1*U(1*U,1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A),A)><L,U(U)><S(LLLS),1*U(U(U,U,U),A,A,1*U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Handler.handleAddTags1
                    `cast`
                  (<AS.Types.ASUser>_R
                   ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R <AS.Types.ASMessage>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
ba3cd1330335c25c749fa343cc1748e8
  handleAddTags1 :: AS.Types.ASUser
                    -> GHC.MVar.MVar AS.Types.ServerState
                    -> AS.Types.ASMessage
                    -> GHC.Prim.State# GHC.Prim.RealWorld
                    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4,
       Strictness: <L,1*U(1*U,1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A),A)><L,U(U)><S(LLLS),1*U(U(U,U,U),A,A,1*U)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (4, True, False)
                  (\ w :: AS.Types.ASUser
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     w2 :: AS.Types.ASMessage
                     w3 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w2 of ww { AS.Types.Message ww1 ww2 ww3 ww4 ->
                   AS.Handler.$wa2 w w1 ww1 ww4 w3 }) -}
439f6cf9df60097238a5351214ebcbfc
  handleAddTags2 :: AS.Types.ASPayload
    {- HasNoCafRefs, Strictness: m1,
       Unfolding: (AS.Types.PayloadN GHC.Tuple.()) -}
e59136e52df60061d473b6038de06a39
  handleAddTags3 :: AS.Types.ASResult {- Strictness: b -}
7c6faba096a8d0d60e8a2ce423463845
  handleAddTags4 :: AS.Types.ASAction {- Strictness: b -}
2ac15358001aa37bf9c16981b8be02bc
  handleAddTags5 :: GHC.Types.IO () {- Strictness: b -}
d25a2ecac172dd20f281cbc7ba8e890e
  handleClear :: AS.Types.ASUser
                 -> GHC.MVar.MVar AS.Types.ServerState
                 -> GHC.Types.IO ()
    {- Arity: 3, Strictness: <L,1*U(1*U(U,U,U),A,A)><S,1*U(U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Handler.handleClear1
                    `cast`
                  (<AS.Types.ASUser>_R
                   ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
138d80ee68d73601b133266ea1607232
  handleClear1 :: AS.Types.ASUser
                  -> GHC.MVar.MVar AS.Types.ServerState
                  -> GHC.Prim.State# GHC.Prim.RealWorld
                  -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3, Strictness: <L,1*U(1*U(U,U,U),A,A)><S,1*U(U)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ w :: AS.Types.ASUser
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w1 of ww { GHC.MVar.MVar ww1 -> AS.Handler.$wa4 w ww1 w2 }) -}
b0cde3e973ffe1923665a3220596a21c
  handleDelete :: AS.Types.ASUser
                  -> GHC.MVar.MVar AS.Types.ServerState
                  -> AS.Types.ASPayload
                  -> GHC.Types.IO ()
    {- Arity: 4,
       Strictness: <L,1*U(1*U(U,U,U),A,A)><S,1*U(U)><S,1*U><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Handler.handleDelete1
                    `cast`
                  (<AS.Types.ASUser>_R
                   ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R <AS.Types.ASPayload>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
8bc91d29c8f5d1bc0007c120a7fd1477
  handleDelete1 :: AS.Types.ASUser
                   -> GHC.MVar.MVar AS.Types.ServerState
                   -> AS.Types.ASPayload
                   -> GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4,
       Strictness: <L,1*U(1*U(U,U,U),A,A)><S,1*U(U)><S,1*U><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (4, True, False)
                  (\ w :: AS.Types.ASUser
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     w2 :: AS.Types.ASPayload
                     w3 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w1 of ww { GHC.MVar.MVar ww1 ->
                   AS.Handler.$wa5 w ww1 w2 w3 }) -}
512d7af2993facf0709a42a7da4764ef
  handleDelete2 :: GHC.Types.IO () {- Strictness: b -}
c36557c6242b22044277e4e4a883ac33
  handleEval :: AS.Types.ASUser
                -> GHC.MVar.MVar AS.Types.ServerState
                -> AS.Types.ASMessage
                -> GHC.Types.IO ()
    {- Arity: 4,
       Strictness: <L,U(U(U,U,U),A,A)><L,1*U(U)><L,1*U(U(U,U,U),U,U,1*U)><L,U>,
       Unfolding: (AS.Handler.handleEval1
                     `cast`
                   (<AS.Types.ASUser>_R
                    ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                    ->_R <AS.Types.ASMessage>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
a6067204cf81a2cb3347cf92b3d2a748
  handleEval1 :: AS.Types.ASUser
                 -> GHC.MVar.MVar AS.Types.ServerState
                 -> AS.Types.ASMessage
                 -> GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4,
       Strictness: <L,U(U(U,U,U),A,A)><L,1*U(U)><L,1*U(U(U,U,U),U,U,1*U)><L,U>,
       Unfolding: (\ user :: AS.Types.ASUser
                     state :: GHC.MVar.MVar AS.Types.ServerState
                     msg :: AS.Types.ASMessage
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case GHC.IO.Handle.Text.hPutStr2
                          GHC.IO.Handle.FD.stdout
                          AS.Handler.handleEval3
                          GHC.Types.True
                          s of ds1 { (#,#) ipv ipv1 ->
                   case msg of ww { AS.Types.Message ww1 ww2 ww3 ww4 ->
                   case AS.Dispatch.$wa
                          user
                          ww1
                          ww2
                          ww3
                          ww4
                          ipv of ds2 { (#,#) ipv2 ipv3 ->
                   AS.Handler.handleEval2 user state ipv3 ipv2 } } }) -}
478fb3d0bb118dcb130032c4da748554
  handleEval2 :: AS.Types.ASUser
                 -> GHC.MVar.MVar AS.Types.ServerState
                 -> AS.Types.ASMessage
                 -> GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4,
       Strictness: <L,1*U(1*U(U,U,U),A,A)><S,1*U(U)><L,1*U(A,A,A,1*U)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (4, True, False)
                  (\ w :: AS.Types.ASUser
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     w2 :: AS.Types.ASMessage
                     w3 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w1 of ww { GHC.MVar.MVar ww1 ->
                   AS.Handler.$wa6 w ww1 w2 w3 }) -}
2980630f20c2449087aef10bd9a70769
  handleEval3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "IN EVAL HANDLER"#) -}
6a25991177e8347c1d6324f88b583185
  handleGet :: AS.Types.ASUser
               -> GHC.MVar.MVar AS.Types.ServerState
               -> AS.Types.ASPayload
               -> GHC.Types.IO ()
    {- Arity: 4,
       Strictness: <S(LS(SSSC(C(S))L)L),1*U(1*U,1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A),A)><L,A><S,1*U><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Handler.handleGet1
                    `cast`
                  (<AS.Types.ASUser>_R
                   ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R <AS.Types.ASPayload>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
65662dcf14c8fda4754115b3b5c5fc44
  handleGet1 :: AS.Types.ASUser
                -> GHC.MVar.MVar AS.Types.ServerState
                -> AS.Types.ASPayload
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4,
       Strictness: <S(LS(SSSC(C(S))L)L),1*U(1*U,1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A),A)><L,A><S,1*U><L,U>,
       Unfolding: InlineRule (4, True, False)
                  (\ user :: AS.Types.ASUser
                     state :: GHC.MVar.MVar AS.Types.ServerState
                     ds :: AS.Types.ASPayload
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ds of wild {
                     DEFAULT
                     -> case AS.Handler.handleGet4
                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        of {}
                     AS.Types.PayloadLL locs
                     -> AS.Handler.handleGet3
                          user
                          (AS.Types.Message
                             (AS.Types.userId user)
                             AS.Types.Get
                             AS.Types.Success
                             AS.Handler.handleGet2)
                          eta }) -}
0a09029472c467404a3840d736ecad8a
  handleGet2 :: AS.Types.ASPayload
    {- HasNoCafRefs, Strictness: m5,
       Unfolding: (AS.Types.PayloadCL (GHC.Types.[] @ AS.Types.ASCell)) -}
ed03abf0ac5b1d40eaa5cb804625b59d
  handleGet3 :: AS.Types.ASUser
                -> AS.Types.ASMessage
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3,
       Strictness: <S(LS(SSSC(C(S))L)L),1*U(1*U,1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A),A)><L,1*U(A,1*U,1*U,1*U)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ w :: AS.Types.ASUser
                     w1 :: AS.Types.ASMessage
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w of ww { AS.Types.User ww1 ww2 ww3 ->
                   case ww2 of ww4 { Network.WebSockets.Connection.Connection ww5 ww6 ww7 ww8 ww9 ->
                   (ww8
                      (Network.WebSockets.Types.DataMessage
                         (Network.WebSockets.Types.Text
                            (Data.ByteString.Builder.toLazyByteString
                               (case w1 of wild { AS.Types.Message ds1 a r p ->
                                case AS.Types.$w$ctoJSON4 ww1 a r p of ww10 { (##) ww11 ->
                                Data.Aeson.Encode.ByteString.encodeToByteStringBuilder
                                  (Data.Aeson.Types.Internal.Object ww11) } })))))
                     `cast`
                   (GHC.Types.NTCo:IO[0] <()>_R)
                     w2 } }) -}
a02bcebe9bf4b81c8a704575a4137610
  handleGet4 :: GHC.Types.IO () {- Strictness: b -}
eea700cd89b4e2303f1c4e8e52599ad8
  handleRedo :: AS.Types.ASUser
                -> GHC.MVar.MVar AS.Types.ServerState
                -> GHC.Types.IO ()
    {- Arity: 3, Strictness: <L,1*U(1*U(U,U,U),A,A)><L,1*U(U)><L,U>,
       Unfolding: (AS.Handler.handleRedo1
                     `cast`
                   (<AS.Types.ASUser>_R
                    ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
01bb43ecb9e4a1207c9d40a88ef989ac
  handleRedo1 :: AS.Types.ASUser
                 -> GHC.MVar.MVar AS.Types.ServerState
                 -> GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3, Strictness: <L,1*U(1*U(U,U,U),A,A)><L,1*U(U)><L,U>,
       Unfolding: (\ user :: AS.Types.ASUser
                     state :: GHC.MVar.MVar AS.Types.ServerState
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case AS.DB.redo1 eta of ds1 { (#,#) ipv ipv1 ->
                   case ipv1 of wild {
                     Data.Maybe.Nothing
                     -> case state of wild1 { GHC.MVar.MVar mvar# ->
                        case GHC.Prim.readMVar#
                               @ GHC.Prim.RealWorld
                               @ AS.Types.ServerState
                               mvar#
                               ipv of ds2 { (#,#) ipv2 ipv3 ->
                        case ipv3 of wild2 { AS.Types.State allUsers ->
                        AS.Handler.$wa1
                          (AS.Types.userId user)
                          AS.Types.failureMessage1
                          (GHC.Base.map
                             @ (AS.Types.ASUser, [AS.Types.ASDaemon])
                             @ AS.Types.ASUser
                             (Data.Tuple.fst @ AS.Types.ASUser @ [AS.Types.ASDaemon])
                             allUsers)
                          ipv2 } } }
                     Data.Maybe.Just c
                     -> case state of wild1 { GHC.MVar.MVar mvar# ->
                        case GHC.Prim.readMVar#
                               @ GHC.Prim.RealWorld
                               @ AS.Types.ServerState
                               mvar#
                               ipv of ds2 { (#,#) ipv2 ipv3 ->
                        case ipv3 of wild2 { AS.Types.State allUsers ->
                        AS.Handler.$wa1
                          (AS.Types.userId user)
                          (AS.Types.PayloadCommit c)
                          (GHC.Base.map
                             @ (AS.Types.ASUser, [AS.Types.ASDaemon])
                             @ AS.Types.ASUser
                             (Data.Tuple.fst @ AS.Types.ASUser @ [AS.Types.ASDaemon])
                             allUsers)
                          ipv2 } } } } }) -}
22c82f1eecb3c25292911975e94f0b68
  handleRemoveTags :: AS.Types.ASUser
                      -> GHC.MVar.MVar AS.Types.ServerState
                      -> AS.Types.ASMessage
                      -> GHC.Types.IO ()
    {- Arity: 4,
       Strictness: <L,1*U(1*U,1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A),A)><L,U(U)><S(LLLS),1*U(A,A,A,1*U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Handler.handleRemoveTags1
                    `cast`
                  (<AS.Types.ASUser>_R
                   ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R <AS.Types.ASMessage>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
f6be891c4849937caf698bbaaff2c699
  handleRemoveTags1 :: AS.Types.ASUser
                       -> GHC.MVar.MVar AS.Types.ServerState
                       -> AS.Types.ASMessage
                       -> GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4,
       Strictness: <L,1*U(1*U,1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A),A)><L,U(U)><S(LLLS),1*U(A,A,A,1*U)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (4, True, False)
                  (\ w :: AS.Types.ASUser
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     w2 :: AS.Types.ASMessage
                     w3 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w2 of ww { AS.Types.Message ww1 ww2 ww3 ww4 ->
                   AS.Handler.$wa7 w w1 ww4 w3 }) -}
b236f8af3b97e09189b86065898ae7a7
  handleRemoveTags2 :: AS.Types.ASLocation
                       -> GHC.MVar.MVar AS.Types.ServerState
                       -> AS.Types.ASCellTag
                       -> GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4, Strictness: <L,U><L,1*U(U)><L,U><L,U>,
       Unfolding: (\ loc :: AS.Types.ASLocation
                     state :: GHC.MVar.MVar AS.Types.ServerState
                     t :: AS.Types.ASCellTag
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case AS.DB.chunkM1
                          @ AS.Types.ASLocation
                          @ (Data.Maybe.Maybe AS.Types.ASCell)
                          AS.DB.getChunkCells
                          AS.DB.cellChunkSize
                          (GHC.Types.:
                             @ AS.Types.ASLocation
                             loc
                             (GHC.Types.[] @ AS.Types.ASLocation))
                          eta of ds1 { (#,#) ipv ipv1 ->
                   case ipv1 of wild {
                     []
                     -> case GHC.List.badHead
                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        of {}
                     : x ds2
                     -> case x of wild1 {
                          Data.Maybe.Nothing
                          -> case t of wild2 {
                               DEFAULT -> (# ipv, GHC.Tuple.() #)
                               AS.Types.StreamTag s -> AS.Daemon.modifyDaemon2 loc state ipv }
                          Data.Maybe.Just c
                          -> case c of wild2 { AS.Types.Cell l e v ts ->
                             case AS.DB.setCell2
                                    (GHC.Types.:
                                       @ AS.Types.ASCell
                                       (AS.Types.Cell
                                          l
                                          e
                                          v
                                          (Data.List.deleteBy
                                             @ AS.Types.ASCellTag
                                             AS.Types.$fEqASCellTag_$c==
                                             t
                                             ts))
                                       (GHC.Types.[] @ AS.Types.ASCell))
                                    ipv of ds3 { (#,#) ipv2 ipv3 ->
                             case t of wild3 {
                               DEFAULT -> (# ipv2, GHC.Tuple.() #)
                               AS.Types.StreamTag s
                               -> AS.Daemon.modifyDaemon2 loc state ipv2 } } } } } }) -}
d4ba10f173e6759cd28b8fbdc141f482
  handleRemoveTags3 :: GHC.Types.IO () {- Strictness: b -}
58d5373bb1d4b763080432c63d8c59b5
  handleUndo :: AS.Types.ASUser
                -> GHC.MVar.MVar AS.Types.ServerState
                -> GHC.Types.IO ()
    {- Arity: 3, Strictness: <L,1*U(1*U(U,U,U),A,A)><L,1*U(U)><L,U>,
       Unfolding: (AS.Handler.handleUndo1
                     `cast`
                   (<AS.Types.ASUser>_R
                    ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
513e534c262917119da1567d1e3cc29a
  handleUndo1 :: AS.Types.ASUser
                 -> GHC.MVar.MVar AS.Types.ServerState
                 -> GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3, Strictness: <L,1*U(1*U(U,U,U),A,A)><L,1*U(U)><L,U>,
       Unfolding: (\ user :: AS.Types.ASUser
                     state :: GHC.MVar.MVar AS.Types.ServerState
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case AS.DB.undo1 eta of ds1 { (#,#) ipv ipv1 ->
                   case ipv1 of wild {
                     Data.Maybe.Nothing
                     -> case state of wild1 { GHC.MVar.MVar mvar# ->
                        case GHC.Prim.readMVar#
                               @ GHC.Prim.RealWorld
                               @ AS.Types.ServerState
                               mvar#
                               ipv of ds2 { (#,#) ipv2 ipv3 ->
                        case ipv3 of wild2 { AS.Types.State allUsers ->
                        AS.Handler.$wa1
                          (AS.Types.userId user)
                          AS.Types.failureMessage1
                          (GHC.Base.map
                             @ (AS.Types.ASUser, [AS.Types.ASDaemon])
                             @ AS.Types.ASUser
                             (Data.Tuple.fst @ AS.Types.ASUser @ [AS.Types.ASDaemon])
                             allUsers)
                          ipv2 } } }
                     Data.Maybe.Just c
                     -> case state of wild1 { GHC.MVar.MVar mvar# ->
                        case GHC.Prim.readMVar#
                               @ GHC.Prim.RealWorld
                               @ AS.Types.ServerState
                               mvar#
                               ipv of ds2 { (#,#) ipv2 ipv3 ->
                        case ipv3 of wild2 { AS.Types.State allUsers ->
                        AS.Handler.$wa1
                          (AS.Types.userId user)
                          (AS.Types.PayloadCommit c)
                          (GHC.Base.map
                             @ (AS.Types.ASUser, [AS.Types.ASDaemon])
                             @ AS.Types.ASUser
                             (Data.Tuple.fst @ AS.Types.ASUser @ [AS.Types.ASDaemon])
                             allUsers)
                          ipv2 } } } } }) -}
9c6b0ec2f85281ad776c0087afcfa81b
  processAddTag :: AS.Types.ASUser
                   -> GHC.MVar.MVar AS.Types.ServerState
                   -> AS.Types.ASLocation
                   -> AS.Types.ASMessage
                   -> AS.Types.ASCellTag
                   -> GHC.Types.IO ()
    {- Arity: 6,
       Strictness: <L,A><L,1*U(U)><L,U><L,1*U(1*U(U,U,U),A,A,A)><L,U><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Handler.processAddTag1
                    `cast`
                  (<AS.Types.ASUser>_R
                   ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R <AS.Types.ASLocation>_R
                   ->_R <AS.Types.ASMessage>_R
                   ->_R <AS.Types.ASCellTag>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
12a26019e0e70de1b13029f9705981ff
  processAddTag1 :: AS.Types.ASUser
                    -> GHC.MVar.MVar AS.Types.ServerState
                    -> AS.Types.ASLocation
                    -> AS.Types.ASMessage
                    -> AS.Types.ASCellTag
                    -> GHC.Prim.State# GHC.Prim.RealWorld
                    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 6,
       Strictness: <L,A><L,1*U(U)><L,U><L,1*U(1*U(U,U,U),A,A,A)><L,U><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (6, True, True)
                  (\ w :: AS.Types.ASUser
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     w2 :: AS.Types.ASLocation
                     w3 :: AS.Types.ASMessage
                     w4 :: AS.Types.ASCellTag
                     w5 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   AS.Handler.$wa3 w1 w2 w3 w4 w5) -}
08cbe25fa379569f724bd844a0a64ef8
  processRemoveTag :: AS.Types.ASLocation
                      -> GHC.MVar.MVar AS.Types.ServerState
                      -> AS.Types.ASCellTag
                      -> GHC.Types.IO ()
    {- Arity: 4, Strictness: <L,U><L,1*U(U)><L,U><L,U>,
       Unfolding: (AS.Handler.handleRemoveTags2
                     `cast`
                   (<AS.Types.ASLocation>_R
                    ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                    ->_R <AS.Types.ASCellTag>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
ded31b7251036ab353ca57152aece186
  sendBroadcastFiltered :: AS.Types.ASUser
                           -> GHC.MVar.MVar AS.Types.ServerState
                           -> AS.Types.ASMessage
                           -> GHC.Types.IO ()
    {- Arity: 4,
       Strictness: <L,1*U(1*U(U,U,U),A,A)><S,1*U(U)><L,1*U(A,A,A,1*U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Handler.handleEval2
                    `cast`
                  (<AS.Types.ASUser>_R
                   ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R <AS.Types.ASMessage>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
a0e71ca2558ffebe8300cd87f388b8d9
  sendToOriginalUser :: AS.Types.ASUser
                        -> AS.Types.ASMessage
                        -> GHC.Types.IO ()
    {- Arity: 3,
       Strictness: <S(LS(SSSC(C(S))L)L),1*U(1*U,1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A),A)><L,1*U(A,1*U,1*U,1*U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Handler.handleGet3
                    `cast`
                  (<AS.Types.ASUser>_R
                   ->_R <AS.Types.ASMessage>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

