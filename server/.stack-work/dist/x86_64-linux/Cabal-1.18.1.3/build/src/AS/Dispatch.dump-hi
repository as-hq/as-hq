
==================== FINAL INTERFACE ====================
2015-09-01 19:51:27.661769 UTC

interface alphasheets-0.1.0.0:AS.Dispatch [orphan module] 7083
  interface hash: 02e8278696720f3ac4fb8837aaa9eeb6
  ABI hash: fc6c449c26eb6e5b9462549c9989c07a
  export-list hash: 41c4e8d5d8ba30e8785b0561e855e78d
  orphan hash: 3fadc7471286e1c42e5c9f42274d5b2a
  flag hash: 5316f95d5f7b98addcee99ed907c3931
  used TH splices: False
  where
exports:
  AS.Dispatch.createListCells
  AS.Dispatch.evalChain
  AS.Dispatch.getDescendants
  AS.Dispatch.reEvalCell
  AS.Dispatch.runDispatchCycle
  AS.Dispatch.updateCell
module dependencies: AS.Config.Paths AS.Config.Settings AS.DAG
                     AS.DB AS.Daemon AS.Eval AS.Eval.Endware AS.Eval.Lang
                     AS.Eval.Middleware AS.Parsing.Common AS.Parsing.In AS.Parsing.Out
                     AS.Types AS.Util
package dependencies: BoundedChan-1.0.3.0 SHA-1.6.4.2 aeson-0.8.1.1
                      array-0.5.0.0 attoparsec-0.13.0.1 base base64-bytestring-1.0.0.1
                      binary-0.7.1.0 blaze-builder-0.4.0.1 bytestring-0.10.4.0
                      bytestring-lexing-0.5.0.2 case-insensitive-1.2.0.4 cereal-0.4.1.1
                      containers-0.5.5.1 crypto-api-0.13.2 daemons-0.2.1
                      data-default-0.5.3 data-default-class-0.0.1
                      data-default-instances-base-0.0.1
                      data-default-instances-containers-0.0.1
                      data-default-instances-dlist-0.0.1
                      data-default-instances-old-locale-0.0.1 deepseq-1.3.0.2
                      directory-1.2.2.1 dlist-0.7.1.1 entropy-0.3.7 filepath-1.3.0.2
                      ghc-prim hashable-1.2.3.3 hedis-0.6.8 integer-gmp
                      monad-control-1.0.0.4 monad-loops-0.4.3 mtl-2.2.1 network-2.6.2.1
                      old-locale-1.0.0.6 parsec-3.1.9 pretty-1.1.1.1 primitive-0.5.2.1
                      process-1.2.3.0 pureMD5-2.1.2.1 pyfi-0.4.0.4 random-1.1
                      regex-base-0.93.2 regex-posix-0.95.2 resource-pool-0.2.3.2
                      scientific-0.3.3.8 split-0.2.2 stm-2.4.2 strict-0.3.2 tagged-0.8.1
                      template-haskell text-1.2.1.1 time-1.5.0.1 transformers-0.4.3.0
                      transformers-base-0.4.4 unix-2.7.1.0 unordered-containers-0.2.5.1
                      uuid-1.3.10 uuid-types-1.0.1 vector-0.10.9.1 websockets-0.9.5.0
orphans: aeson-0.8.1.1:Data.Aeson.Types.Generic
         aeson-0.8.1.1:Data.Aeson.Types.Instances
         aeson-0.8.1.1:Data.Aeson.Types.Internal alphasheets-0.1.0.0:AS.DAG
         alphasheets-0.1.0.0:AS.Eval.Lang alphasheets-0.1.0.0:AS.Parsing.In
         attoparsec-0.13.0.1:Data.Attoparsec.ByteString.Char8 base:GHC.Base
         base:GHC.Float base:GHC.Real binary-0.7.1.0:Data.Binary.Generic
         bytestring-0.10.4.0:Data.ByteString.Builder
         bytestring-lexing-0.5.0.2:Data.ByteString.Lex.Fractional
         crypto-api-0.13.2:Crypto.Classes crypto-api-0.13.2:Crypto.Random
         data-default-instances-base-0.0.1:Data.Default.Instances.Base
         data-default-instances-containers-0.0.1:Data.Default.Instances.Containers
         data-default-instances-dlist-0.0.1:Data.Default.Instances.DList
         data-default-instances-old-locale-0.0.1:Data.Default.Instances.OldLocale
         hashable-1.2.3.3:Data.Hashable.Generic
         network-2.6.2.1:Network.Socket network-2.6.2.1:Network.Socket.Types
         pyfi-0.4.0.4:Python random-1.1:System.Random
         regex-base-0.93.2:Text.Regex.Base.Context
         regex-posix-0.95.2:Text.Regex.Posix.ByteString
         regex-posix-0.95.2:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2:Text.Regex.Posix.Sequence
         regex-posix-0.95.2:Text.Regex.Posix.String
         resource-pool-0.2.3.2:Data.Pool stm-2.4.2:Control.Monad.STM
         template-haskell:Language.Haskell.TH.PprLib text-1.2.1.1:Data.Text
         text-1.2.1.1:Data.Text.Lazy text-1.2.1.1:Data.Text.Show
         time-1.5.0.1:Data.Time.Calendar.Gregorian
         time-1.5.0.1:Data.Time.Format.Parse
         time-1.5.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.4.3.0:Control.Monad.Trans.Error
         vector-0.10.9.1:Data.Vector.Fusion.Stream
         vector-0.10.9.1:Data.Vector.Unboxed
family instance modules: alphasheets-0.1.0.0:AS.Types
                         attoparsec-0.13.0.1:Data.Attoparsec.Internal.Types
                         base:Control.Applicative base:Data.Either base:Data.Monoid
                         base:Data.Type.Equality base:GHC.Exts base:GHC.Generics
                         dlist-0.7.1.1:Data.DList
                         monad-control-1.0.0.4:Control.Monad.Trans.Control
                         primitive-0.5.2.1:Control.Monad.Primitive tagged-0.8.1:Data.Tagged
                         text-1.2.1.1:Data.Text text-1.2.1.1:Data.Text.Lazy
                         unordered-containers-0.2.5.1:Data.HashMap.Base
                         unordered-containers-0.2.5.1:Data.HashSet
                         uuid-types-1.0.1:Data.UUID.Types.Internal
                         uuid-types-1.0.1:Data.UUID.Types.Internal.Builder
                         vector-0.10.9.1:Data.Vector vector-0.10.9.1:Data.Vector.Primitive
                         vector-0.10.9.1:Data.Vector.Storable
                         vector-0.10.9.1:Data.Vector.Unboxed.Base
import  -/  aeson-0.8.1.1:Data.Aeson 2bcee634dc715d12e7154aed92c42567
import  -/  AS.DAG 5cd37df77ee304f970098ce369d5ef6c
  exports: 6d64e9f66985766f6e87a64a883728be
  descendants 6ea32f366b32f8934a82420e376be8fe
import  -/  AS.DB d1da9735084f4def655f259d6291ea4a
  exports: b8d3e216c017511efcdf8107eca94954
  getCells 93a606f1b4216007217600460caca167
  getDAG f5691fadd7a4f3020a8cefa211227ac8
  getVolatileLocs 8421a0523dc85b418fe546b8739577c3
  setCells 9e8e39f93e35297ded23b1e596fdf465
  updateAfterEval 66fe85fd6c00f5ef98773e091f376cbe
  updateDAG 177a63f5a8721af58d29cf54eb37414c
import  -/  AS.Eval 0e4f2c408eab6fbd1102727b9d5ebfb1
  exports: c2aa05e06b66a92afb25f820cb2eeeae
  evalExpression 424491433e4fd204b319b74dc4f929d2
import  -/  AS.Eval.Endware cc5012d95f33e66247558fc2b6ec52d2
  exports: fe0c9afb2cf6a619a72e7a32759f9c31
  evalEndware c6cc410b1bf00e58dfa83282a010a811
import  -/  AS.Eval.Middleware a458e6e44f1e7afa65a2040dd1c3bc6b
  exports: 8383d71cb651310641b38101c7f33441
  evalMiddleware 792d46b85d1cc846fc3284952ffd2b91
import  -/  AS.Parsing.Common 1e559d9fa6be58496d3932deb847a914
  exports: 855ca2332aab91a7acb18022ee906c28
  getOffsets c2e46fda1fccdf9f264f73cf501fffee
import  -/  AS.Parsing.In 595326c81f8d49e376bdee21b6d55e03
  exports: 9ff090348927269679ac35c6a6d6af97
import  -/  AS.Parsing.Out ab4556f4530731168addfd60447b5b4b
  exports: 6475d1208915e3a1b1f14fba3d0ebf61
  getDependenciesAndExpressions aa64193d3842e38e1f517aa42833dd70
import  -/  AS.Types 57177fd753daf2295937f583773f48c2
  exports: 6e42e59e48c9bd8a9ec1e6c5c6514bc2
  ASCell 8aaaba72e62199ec29d193feeafd5149
  ASExecError 2d03b7bef3df3ab1ffbbdf6ce6998a63
  ASLocation a0a8734170556a1370de82a1630a4c6d
  ASMessage 4c981fc92afa9b0d3d0f889c5a8d7a7a
  ASUser 4187706b5feca3cee412cd2a03a405bc
  ASValue 9fbe83609efa13c71e95a441f7e5b8bf
  Cell a71eaf14eaf14807100ece3dda35b9c0
  DBNothingException b50648d0cf93e42785396dcf3d676d85
  Index 30250568e0b81fb3ccdcef5f5512c98a
  Message abb1a691675f78c4a5f27701b161e038
  NoValue 4b2524f7014ae28717a64c00f16c6291
  PayloadC 262ab299cea24e7cd35ffdd0e30144bc
  Reference 1e3eabb37bc8fab060ae4afa4a2ae8cd
  ServerState 1b54447c73ee7cfaadd458565aeffd2c
  ValueL a57562754856c3bece86f880225b9979
  cellLocation f1401190ff92781469bd41791b16d46d
  cellValue a18d8335515fc012356e88d140248afb
  lst 3e64010d39133ab48e3fb82e59d19f09
import  -/  AS.Util fcc8b95dc3c2bad9df28c51cf1f39293
  exports: 47ea528d752de70f9f7cc438ef23ed30
  decomposeLocs 66ef07bc6ac89ed196e5675f5fe3a6eb
  getCellMessage ef3d208f26ad50d0efd0a9da07c3f1be
  printTimed 3682e84402d9478054babec32de0c1fc
import  -/  base:Control.Applicative 30b769206cb5c020684e1bda0d7e7dd3
import  -/  base:Control.Concurrent 1be25cd1e2ac314074fafb26df0ff06b
import  -/  base:Control.Monad 483e787e07c2e49f1fb1c1b88665cb92
import  -/  base:Data.Either d1c890129a7c6a9ec02a642c6c2f4ed3
import  -/  base:Data.List 0908c8f6208710e0f918cb6f09e882cc
import  -/  base:Data.Maybe 5034d40e23c3a7110309f188001df4ca
import  -/  base:Data.Tuple cac4e06c48274e85317bd3e59867ef5b
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:GHC.List 4cff382327e59a5787355ca0a4174450
import  -/  base:GHC.MVar 2c9d76ed3707c435c49b694504d09491
import  -/  base:GHC.Num 5e7786970581cacc802bf850d458a30b
import  -/  base:GHC.Show cf1a7ff9edb0f41528085aad04d33753
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  base:System.IO cadd0efb01c47ddd8f52d750739fdbdf
import  -/  bytestring-0.10.4.0:Data.ByteString.Char8 6ba74203c82670d222b910afbd6fa1a4
import  -/  bytestring-0.10.4.0:Data.ByteString.Lazy.Char8 a118adac239daed5c4f03b800d5d3693
import  -/  containers-0.5.5.1:Data.Map bee9dbf2f41b2d615c4b071cbb93a29d
import  -/  containers-0.5.5.1:Data.Map.Base a053961b2088634e2a136c15179d3a00
import  -/  ghc-prim:GHC.Classes 3e6cbe1e7e80480408cfa8d5450726a0
import  -/  ghc-prim:GHC.Types dcba736fa3dfba12d307ab18354845d2
import  -/  parsec-3.1.9:Text.ParserCombinators.Parsec 97ee74e913b9eff80cc5ace4d023a967
import  -/  text-1.2.1.1:Data.Text b3c4fa3023eabdced6a311d2fdbd8c54
import  -/  text-1.2.1.1:Data.Text.IO 4fed59515c6adf3b8e249dd22b5b5fda
import  -/  time-1.5.0.1:Data.Time.Clock ef66967f0ebbfbce98a3ae1dbfea3a8c
import  -/  transformers-0.4.3.0:Control.Monad.IO.Class 1fe01dea961eadb0b037d705f6cb22bb
import  -/  websockets-0.9.5.0:Network.WebSockets c11cd6465abe4dc4c3ad51897e46aaa0
f54847118a661be72882b1070e4e1484
  $sfromList :: [(AS.Types.ASLocation, a)]
                -> Data.Map.Base.Map AS.Types.ASLocation a
    {- Arity: 1, Strictness: <S,1*U>,
       Unfolding: (\ @ a ds :: [(AS.Types.ASLocation, a)] ->
                   case ds of wild {
                     [] -> Data.Map.Base.Tip @ AS.Types.ASLocation @ a
                     : ds1 ds2
                     -> case ds1 of wild1 { (,) kx x ->
                        case ds2 of wild2 {
                          []
                          -> case kx of dt { DEFAULT ->
                             Data.Map.Base.Bin
                               @ AS.Types.ASLocation
                               @ a
                               1
                               dt
                               x
                               (Data.Map.Base.Tip @ AS.Types.ASLocation @ a)
                               (Data.Map.Base.Tip @ AS.Types.ASLocation @ a) }
                          : ipv ipv1
                          -> case ipv of wild3 { (,) ky ds3 ->
                             case AS.Types.$fOrdASLocation_$c>= kx ky of wild4 {
                               GHC.Types.False
                               -> case kx of dt { DEFAULT ->
                                  AS.Dispatch.$wpoly_go10
                                    @ a
                                    1
                                    (Data.Map.Base.Bin
                                       @ AS.Types.ASLocation
                                       @ a
                                       1
                                       dt
                                       x
                                       (Data.Map.Base.Tip @ AS.Types.ASLocation @ a)
                                       (Data.Map.Base.Tip @ AS.Types.ASLocation @ a))
                                    wild2 }
                               GHC.Types.True
                               -> case kx of dt { DEFAULT ->
                                  AS.Dispatch.$sfromList1
                                    @ a
                                    (Data.Map.Base.Bin
                                       @ AS.Types.ASLocation
                                       @ a
                                       1
                                       dt
                                       x
                                       (Data.Map.Base.Tip @ AS.Types.ASLocation @ a)
                                       (Data.Map.Base.Tip @ AS.Types.ASLocation @ a))
                                    wild2 } } } } } }) -}
1dde20fb19860488d4d514751383f14a
  $sfromList1 :: Data.Map.Base.Map AS.Types.ASLocation a1
                 -> [(AS.Types.ASLocation, a1)]
                 -> Data.Map.Base.Map AS.Types.ASLocation a1
    {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
df574f7ef17bb67182e85c81d85fd3e9
  $sinsert :: AS.Types.ASLocation
              -> a
              -> Data.Map.Base.Map AS.Types.ASLocation a
              -> Data.Map.Base.Map AS.Types.ASLocation a
    {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U>,
       Unfolding: (\ @ a
                     eta :: AS.Types.ASLocation
                     eta1 :: a
                     eta2 :: Data.Map.Base.Map AS.Types.ASLocation a ->
                   AS.Dispatch.$sinsert_$sgo10 @ a eta eta1 eta2) -}
ff1a464efd30c5f73d88a982a26efbcb
  $sinsert_$sgo10 :: AS.Types.ASLocation
                     -> a1
                     -> Data.Map.Base.Map AS.Types.ASLocation a1
                     -> Data.Map.Base.Map AS.Types.ASLocation a1
    {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U> -}
a902977ff3326d579974074c3a61493b
  $wa :: AS.Types.ASUser
         -> AS.Types.ASUserId
         -> AS.Types.ASAction
         -> AS.Types.ASResult
         -> AS.Types.ASPayload
         -> GHC.Prim.State# GHC.Prim.RealWorld
         -> (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ASMessage #)
    {- Arity: 6,
       Strictness: <L,U(U(U,U,U),A,A)><L,U(U,U,U)><L,U><L,U><S,1*U><L,U> -}
98ddc88f35a6fb791183d525ad415f04
  $wa1 :: AS.Types.ASLocation
          -> AS.Types.ASExpression
          -> [AS.Types.ASCellTag]
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                Data.Either.Either AS.Types.ASExecError [AS.Types.ASCell] #)
    {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>,
       Unfolding: (\ ww :: AS.Types.ASLocation
                     ww1 :: AS.Types.ASExpression
                     ww2 :: [AS.Types.ASCellTag]
                     w :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case AS.Parsing.Out.$wgetDependenciesAndExpressions
                          ww
                          ww1
                          (AS.Parsing.Common.getOffsets ww) of ww3 { (#,#) ww4 ww5 ->
                   let {
                     $j :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> [Data.Maybe.Maybe AS.Types.ASCell]
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 Data.Either.Either AS.Types.ASExecError [AS.Types.ASCell] #)
                       {- Arity: 2, Strictness: <L,U><L,U> -}
                     = \ ipv :: GHC.Prim.State# GHC.Prim.RealWorld
                         ipv1 :: [Data.Maybe.Maybe AS.Types.ASCell] ->
                       case AS.Util.printTimed1
                              AS.Dispatch.updateCell3
                              ipv of ds1 { (#,#) ipv2 ipv3 ->
                       case GHC.List.any
                              @ (Data.Maybe.Maybe AS.Types.ASCell)
                              (Data.Maybe.isNothing @ AS.Types.ASCell)
                              ipv1 of wild {
                         GHC.Types.False
                         -> let {
                              locs :: [AS.Types.ASLocation] = AS.Util.decomposeLocs ww
                            } in
                            let {
                              $w$j :: GHC.Prim.State# GHC.Prim.RealWorld
                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                            Data.Either.Either
                                                AS.Types.ASExecError [AS.Types.ASCell] #)
                                {- Arity: 1, Strictness: <L,U> -}
                              = \ w1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                case AS.DB.setCell2
                                       (GHC.Base.map
                                          @ (AS.Types.ASLocation,
                                             AS.Types.ASExpression,
                                             AS.Types.ASValue)
                                          @ AS.Types.ASCell
                                          (\ ds :: (AS.Types.ASLocation,
                                                    AS.Types.ASExpression,
                                                    AS.Types.ASValue) ->
                                           case ds of wild1 { (,,) l e v ->
                                           AS.Types.Cell l e v ww2 })
                                          (GHC.List.zip3
                                             @ AS.Types.ASLocation
                                             @ AS.Types.ASExpression
                                             @ AS.Types.ASValue
                                             locs
                                             ww5
                                             AS.Dispatch.updateCell_xs))
                                       w1 of ds2 { (#,#) ipv4 ipv5 ->
                                case AS.Util.printTimed1
                                       AS.Dispatch.updateCell2
                                       ipv4 of ds3 { (#,#) ipv6 ipv7 ->
                                (# ipv6,
                                   Data.Either.Right
                                     @ AS.Types.ASExecError
                                     @ [AS.Types.ASCell]
                                     (GHC.Base.map
                                        @ (Data.Maybe.Maybe AS.Types.ASCell)
                                        @ AS.Types.ASCell
                                        (Data.Maybe.fromJust @ AS.Types.ASCell)
                                        ipv1) #) } }
                            } in
                            case GHC.List.zip
                                   @ [AS.Types.ASLocation]
                                   @ AS.Types.ASLocation
                                   ww4
                                   locs of wild1 {
                              [] -> $w$j ipv2
                              : ipv4 ipv5
                              -> case AS.DB.chunkM_1
                                        @ ([AS.Types.ASLocation], AS.Types.ASLocation)
                                        AS.DB.updateChunkDAG
                                        AS.DB.cellChunkSize
                                        wild1
                                        ipv2 of ds2 { (#,#) ipv6 ipv7 ->
                                 $w$j ipv6 } }
                         GHC.Types.True
                         -> (# ipv2,
                               Data.Either.Left
                                 @ AS.Types.ASExecError
                                 @ [AS.Types.ASCell]
                                 (AS.Types.DBNothingException
                                    (AS.Dispatch.updateCell_go1 ww4 ipv1)) #) } }
                   } in
                   case AS.Dispatch.updateCell_go ww4 of wild {
                     [] -> $j w (GHC.Types.[] @ (Data.Maybe.Maybe AS.Types.ASCell))
                     : ipv ipv1
                     -> case AS.DB.chunkM1
                               @ AS.Types.ASLocation
                               @ (Data.Maybe.Maybe AS.Types.ASCell)
                               AS.DB.getChunkCells
                               AS.DB.cellChunkSize
                               wild
                               w of ds1 { (#,#) ipv2 ipv3 ->
                        $j ipv2 ipv3 } } }) -}
b137c1e83f23ef63c0664cce81fdc7f8
  $wpoly_go10 :: GHC.Prim.Int#
                 -> Data.Map.Base.Map AS.Types.ASLocation a
                 -> [(AS.Types.ASLocation, a)]
                 -> Data.Map.Base.Map AS.Types.ASLocation a
    {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U> -}
fb80cf673d426b380439eda3bad0b23b
  createListCells :: AS.Types.ASLocation
                     -> [AS.Types.ASValue]
                     -> GHC.Types.IO [AS.Types.ASCell]
    {- Arity: 3, Strictness: <S,1*U><S,1*U><L,U>,
       Unfolding: (AS.Dispatch.createListCells1
                     `cast`
                   (<AS.Types.ASLocation>_R
                    ->_R <[AS.Types.ASValue]>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <[AS.Types.ASCell]>_R))) -}
24d7ad1b24e4b886d5c0a1fb84d5a351
  createListCells1 :: AS.Types.ASLocation
                      -> [AS.Types.ASValue]
                      -> GHC.Prim.State# GHC.Prim.RealWorld
                      -> (# GHC.Prim.State# GHC.Prim.RealWorld, [AS.Types.ASCell] #)
    {- Arity: 3, Strictness: <S,1*U><S,1*U><L,U> -}
1807dbee35003e550476ed9ec3d80bde
  evalChain :: Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue
               -> [AS.Types.ASCell]
               -> GHC.Types.IO [AS.Types.ASCell]
    {- Arity: 3, Strictness: <L,U><S,1*U><L,U>,
       Unfolding: (AS.Dispatch.evalChain1
                     `cast`
                   (<Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue>_R
                    ->_R <[AS.Types.ASCell]>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <[AS.Types.ASCell]>_R))) -}
4721b696b9745f44358433a3293363e4
  evalChain1 :: Data.Map.Base.Map
                    AS.Types.ASLocation AS.Types.ASValue
                -> [AS.Types.ASCell]
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, [AS.Types.ASCell] #)
    {- Arity: 3, Strictness: <L,U><S,1*U><L,U> -}
6e62d87d5b59900df96018dbecd85787
  getDescendants :: AS.Types.ASCell
                    -> GHC.Types.IO
                           (Data.Either.Either AS.Types.ASExecError [AS.Types.ASCell])
    {- Arity: 2, Strictness: <L,1*U(1*U,A,A,A)><L,U>,
       Unfolding: (AS.Dispatch.getDescendants1
                     `cast`
                   (<AS.Types.ASCell>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0]
                                  <Data.Either.Either
                                       AS.Types.ASExecError [AS.Types.ASCell]>_R))) -}
f7dfbff534b0e2a048e757c63c783a22
  getDescendants1 :: AS.Types.ASCell
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                           Data.Either.Either AS.Types.ASExecError [AS.Types.ASCell] #)
    {- Arity: 2, Strictness: <L,1*U(1*U,A,A,A)><L,U>,
       Unfolding: (\ cell :: AS.Types.ASCell
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case Database.Redis.Core.$wa
                          AS.DB.cInfo6
                          AS.DB.cInfo4
                          (Data.Maybe.Nothing @ Data.ByteString.Internal.ByteString)
                          AS.DB.cInfo3
                          100
                          AS.DB.cInfo1
                            `cast`
                          (Trans
                               (Sym (Data.Fixed.NTCo:Fixed[0] <Data.Fixed.E12>_P))
                               (Sym (Data.Time.Clock.UTC.NTCo:NominalDiffTime[0])))
                          eta of ds1 { (#,#) ipv ipv1 ->
                   case (Data.Pool.withResource_$swithResource
                           @ (Database.Redis.ProtocolPipelining.Connection
                                  Database.Redis.Protocol.Reply)
                           @ [(AS.Types.ASLocation, AS.Types.ASLocation)]
                           ipv1 `cast` (Database.Redis.Core.NTCo:Connection[0])
                           AS.DB.getDAG2
                             `cast`
                           (<Database.Redis.ProtocolPipelining.Connection
                                 Database.Redis.Protocol.Reply>_R
                            ->_R Sym (GHC.Types.NTCo:IO[0]
                                          <[(AS.Types.ASLocation, AS.Types.ASLocation)]>_R)))
                          `cast`
                        (GHC.Types.NTCo:IO[0]
                             <[(AS.Types.ASLocation, AS.Types.ASLocation)]>_R)
                          ipv of ds2 { (#,#) ipv2 ipv3 ->
                   case Database.Redis.Core.$wa
                          AS.DB.cInfo6
                          AS.DB.cInfo4
                          (Data.Maybe.Nothing @ Data.ByteString.Internal.ByteString)
                          AS.DB.cInfo3
                          100
                          AS.DB.cInfo1
                            `cast`
                          (Trans
                               (Sym (Data.Fixed.NTCo:Fixed[0] <Data.Fixed.E12>_P))
                               (Sym (Data.Time.Clock.UTC.NTCo:NominalDiffTime[0])))
                          ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                   case (Data.Pool.withResource_$swithResource
                           @ (Database.Redis.ProtocolPipelining.Connection
                                  Database.Redis.Protocol.Reply)
                           @ [AS.Types.ASLocation]
                           ipv5 `cast` (Database.Redis.Core.NTCo:Connection[0])
                           AS.DB.getVolatileLocs2
                             `cast`
                           (<Database.Redis.ProtocolPipelining.Connection
                                 Database.Redis.Protocol.Reply>_R
                            ->_R Sym (GHC.Types.NTCo:IO[0] <[AS.Types.ASLocation]>_R)))
                          `cast`
                        (GHC.Types.NTCo:IO[0] <[AS.Types.ASLocation]>_R)
                          ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                   case AS.DAG.descendants_$sdescendants
                          (case cell of wild { AS.Types.Cell ds5 ds6 ds7 ds8 ->
                           GHC.Base.++
                             @ AS.Types.ASLocation
                             (AS.Util.decomposeLocs ds5)
                             ipv7 })
                          ipv3 of wild {
                     []
                     -> case AS.Util.printTimed1
                               AS.Dispatch.getDescendants4
                               ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                        (# ipv8, AS.Dispatch.getDescendants2 #) }
                     : ipv8 ipv9
                     -> case AS.DB.chunkM1
                               @ AS.Types.ASLocation
                               @ (Data.Maybe.Maybe AS.Types.ASCell)
                               AS.DB.getChunkCells
                               AS.DB.cellChunkSize
                               wild
                               ipv6 of ds5 { (#,#) ipv10 ipv11 ->
                        case AS.Util.printTimed1
                               AS.Dispatch.getDescendants4
                               ipv10 of ds6 { (#,#) ipv12 ipv13 ->
                        (# ipv12,
                           Data.Either.Right
                             @ AS.Types.ASExecError
                             @ [AS.Types.ASCell]
                             (GHC.Base.map
                                @ (Data.Maybe.Maybe AS.Types.ASCell)
                                @ AS.Types.ASCell
                                (Data.Maybe.fromJust @ AS.Types.ASCell)
                                ipv11) #) } } } } } } }) -}
6b7a14adb16b9ab67440faa81f624560
  getDescendants2 :: Data.Either.Either
                         AS.Types.ASExecError [AS.Types.ASCell]
    {- Unfolding: (Data.Either.Right
                     @ AS.Types.ASExecError
                     @ [AS.Types.ASCell]
                     AS.Dispatch.getDescendants3) -}
611dc3f30f09cee6d1c05e1c4d4c1967
  getDescendants3 :: [AS.Types.ASCell]
    {- Unfolding: (GHC.Base.map
                     @ (Data.Maybe.Maybe AS.Types.ASCell)
                     @ AS.Types.ASCell
                     (Data.Maybe.fromJust @ AS.Types.ASCell)
                     (GHC.Types.[] @ (Data.Maybe.Maybe AS.Types.ASCell))) -}
44ef367dcb02a93c489ea19b0ce911a9
  getDescendants4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "got descendant cells"#) -}
97b96ca1bcd3a8f4036148638a610d6d
  reEvalCell :: [AS.Types.ASCell]
                -> [AS.Types.ASCell]
                -> GHC.Types.IO
                       (Data.Either.Either AS.Types.ASExecError [AS.Types.ASCell])
    {- Arity: 3, Strictness: <L,1*U><S,1*U><L,U>,
       Unfolding: (AS.Dispatch.reEvalCell1
                     `cast`
                   (<[AS.Types.ASCell]>_R
                    ->_R <[AS.Types.ASCell]>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0]
                                  <Data.Either.Either
                                       AS.Types.ASExecError [AS.Types.ASCell]>_R))) -}
fe3e25308e1f212923a938dbf86add3e
  reEvalCell1 :: [AS.Types.ASCell]
                 -> [AS.Types.ASCell]
                 -> GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                       Data.Either.Either AS.Types.ASExecError [AS.Types.ASCell] #)
    {- Arity: 3, Strictness: <L,1*U><S,1*U><L,U>,
       Unfolding: (\ anc :: [AS.Types.ASCell]
                     dec :: [AS.Types.ASCell]
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case AS.Dispatch.evalChain1
                          (AS.Dispatch.$sfromList
                             @ AS.Types.ASValue
                             (GHC.Base.map
                                @ AS.Types.ASCell
                                @ (AS.Types.ASLocation, AS.Types.ASValue)
                                AS.Dispatch.reEvalCell2
                                anc))
                          dec
                          s of ds1 { (#,#) ipv ipv1 ->
                   (# ipv,
                      Data.Either.Right
                        @ AS.Types.ASExecError
                        @ [AS.Types.ASCell]
                        ipv1 #) }) -}
0e943fa3a894e887f3272a32d6724878
  reEvalCell2 :: AS.Types.ASCell
                 -> (AS.Types.ASLocation, AS.Types.ASValue)
    {- Arity: 1, HasNoCafRefs, Strictness: <L,U(1*U,A,1*U,A)>m,
       Unfolding: InlineRule (1, True, False)
                  (\ c :: AS.Types.ASCell ->
                   (AS.Types.cellLocation c, AS.Types.cellValue c)) -}
f7e00890d40b5af5aead13a917da4b9c
  runDispatchCycle :: AS.Types.ASUser
                      -> GHC.MVar.MVar AS.Types.ServerState
                      -> AS.Types.ASMessage
                      -> GHC.Types.IO AS.Types.ASMessage
    {- Arity: 4,
       Strictness: <L,U(U(U,U,U),A,A)><L,A><S(LLLS),1*U(U(U,U,U),U,U,1*U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Dispatch.runDispatchCycle1
                    `cast`
                  (<AS.Types.ASUser>_R
                   ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R <AS.Types.ASMessage>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <AS.Types.ASMessage>_R)) -}
b583fd27e9512c721b065c1950c1217f
  runDispatchCycle1 :: AS.Types.ASUser
                       -> GHC.MVar.MVar AS.Types.ServerState
                       -> AS.Types.ASMessage
                       -> GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ASMessage #)
    {- Arity: 4,
       Strictness: <L,U(U(U,U,U),A,A)><L,A><S(LLLS),1*U(U(U,U,U),U,U,1*U)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (4, True, False)
                  (\ w :: AS.Types.ASUser
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     w2 :: AS.Types.ASMessage
                     w3 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w2 of ww { AS.Types.Message ww1 ww2 ww3 ww4 ->
                   AS.Dispatch.$wa w ww1 ww2 ww3 ww4 w3 }) -}
946467f30a806e4f6a829144c08cb3cd
  updateCell :: AS.Types.ASCell
                -> GHC.Types.IO
                       (Data.Either.Either AS.Types.ASExecError [AS.Types.ASCell])
    {- Arity: 2, Strictness: <S,1*U(U,U,A,U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Dispatch.updateCell1
                    `cast`
                  (<AS.Types.ASCell>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0]
                                 <Data.Either.Either AS.Types.ASExecError [AS.Types.ASCell]>_R)) -}
b8bd8f7148387f59d24a22004dd20947
  updateCell1 :: AS.Types.ASCell
                 -> GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                       Data.Either.Either AS.Types.ASExecError [AS.Types.ASCell] #)
    {- Arity: 2, Strictness: <S,1*U(U,U,A,U)><L,U>, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: AS.Types.ASCell w1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w of ww { AS.Types.Cell ww1 ww2 ww3 ww4 ->
                   AS.Dispatch.$wa1 ww1 ww2 ww4 w1 }) -}
f9c7740675cb580e52002afb71df4ae7
  updateCell2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "set init cells"#) -}
254bf22d6129c2ad59c3c20c0e8a67d9
  updateCell3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "got cells"#) -}
a0e5c43d8961b8417bf4e847efba077a
  updateCell_go :: [[AS.Types.ASLocation]] -> [AS.Types.ASLocation]
    {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
862db23a4bb4abf53377a34355629ca2
  updateCell_go1 :: [[AS.Types.ASLocation]]
                    -> [Data.Maybe.Maybe AS.Types.ASCell]
                    -> [AS.Types.ASLocation]
    {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
debb3d986471557c3f90b8dcd14f857b
  updateCell_xs :: [AS.Types.ASValue]
    {- HasNoCafRefs, Strictness: m2 -}
"SPEC Data.Map.Base.fromList [AS.Types.ASLocation]" [ALWAYS] forall @ a
                                                                    $dOrd :: GHC.Classes.Ord
                                                                                 AS.Types.ASLocation
  Data.Map.Base.fromList @ AS.Types.ASLocation @ a $dOrd
  = AS.Dispatch.$sfromList @ a
"SPEC Data.Map.Base.insert [AS.Types.ASLocation]" [ALWAYS] forall @ a
                                                                  $dOrd :: GHC.Classes.Ord
                                                                               AS.Types.ASLocation
  Data.Map.Base.insert @ AS.Types.ASLocation @ a $dOrd
  = AS.Dispatch.$sinsert @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

