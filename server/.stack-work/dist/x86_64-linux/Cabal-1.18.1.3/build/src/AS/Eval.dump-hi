
==================== FINAL INTERFACE ====================
2015-09-01 19:51:27.14064 UTC

interface alphasheets-0.1.0.0:AS.Eval 7083
  interface hash: d363b0c1235917ee42987f783c0eef91
  ABI hash: 0e4f2c408eab6fbd1102727b9d5ebfb1
  export-list hash: c2aa05e06b66a92afb25f820cb2eeeae
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 5316f95d5f7b98addcee99ed907c3931
  used TH splices: True
  where
exports:
  AS.Eval.clearReplRecord
  AS.Eval.doEval
  AS.Eval.eval
  AS.Eval.evalCode
  AS.Eval.evalCodeRepl
  AS.Eval.evalExcel
  AS.Eval.evalExpression
  AS.Eval.evalRef
  AS.Eval.evalString
  AS.Eval.pyString
  AS.Eval.pyfiString
  AS.Eval.readOutput
  AS.Eval.runFile
  AS.Eval.runReplFile
  AS.Eval.writeExecFile
  AS.Eval.writeReplFile
  AS.Eval.writeReplRecord
module dependencies: AS.Config.Paths AS.DB AS.Eval.Lang
                     AS.Parsing.Common AS.Parsing.In AS.Parsing.Out AS.Types AS.Util
package dependencies: BoundedChan-1.0.3.0 SHA-1.6.4.2 aeson-0.8.1.1
                      array-0.5.0.0 attoparsec-0.13.0.1 base base64-bytestring-1.0.0.1
                      binary-0.7.1.0 blaze-builder-0.4.0.1 bytestring-0.10.4.0
                      bytestring-lexing-0.5.0.2 case-insensitive-1.2.0.4 cereal-0.4.1.1
                      containers-0.5.5.1 crypto-api-0.13.2 deepseq-1.3.0.2
                      directory-1.2.2.1 dlist-0.7.1.1 entropy-0.3.7 filepath-1.3.0.2
                      ghc-prim hashable-1.2.3.3 hedis-0.6.8 integer-gmp
                      monad-control-1.0.0.4 mtl-2.2.1 network-2.6.2.1 parsec-3.1.9
                      pretty-1.1.1.1 primitive-0.5.2.1 process-1.2.3.0 pureMD5-2.1.2.1
                      pyfi-0.4.0.4 random-1.1 regex-base-0.93.2 regex-posix-0.95.2
                      resource-pool-0.2.3.2 scientific-0.3.3.8 split-0.2.2 stm-2.4.2
                      strict-0.3.2 tagged-0.8.1 template-haskell text-1.2.1.1
                      time-1.5.0.1 transformers-0.4.3.0 transformers-base-0.4.4
                      unix-2.7.1.0 unordered-containers-0.2.5.1 uuid-1.3.10
                      uuid-types-1.0.1 vector-0.10.9.1 websockets-0.9.5.0
orphans: aeson-0.8.1.1:Data.Aeson.Types.Generic
         aeson-0.8.1.1:Data.Aeson.Types.Instances
         aeson-0.8.1.1:Data.Aeson.Types.Internal
         alphasheets-0.1.0.0:AS.Eval.Lang alphasheets-0.1.0.0:AS.Parsing.In
         attoparsec-0.13.0.1:Data.Attoparsec.ByteString.Char8 base:GHC.Base
         base:GHC.Float base:GHC.Real binary-0.7.1.0:Data.Binary.Generic
         bytestring-0.10.4.0:Data.ByteString.Builder
         bytestring-lexing-0.5.0.2:Data.ByteString.Lex.Fractional
         crypto-api-0.13.2:Crypto.Classes crypto-api-0.13.2:Crypto.Random
         hashable-1.2.3.3:Data.Hashable.Generic
         network-2.6.2.1:Network.Socket network-2.6.2.1:Network.Socket.Types
         pyfi-0.4.0.4:Python random-1.1:System.Random
         regex-base-0.93.2:Text.Regex.Base.Context
         regex-posix-0.95.2:Text.Regex.Posix.ByteString
         regex-posix-0.95.2:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2:Text.Regex.Posix.Sequence
         regex-posix-0.95.2:Text.Regex.Posix.String
         resource-pool-0.2.3.2:Data.Pool stm-2.4.2:Control.Monad.STM
         template-haskell:Language.Haskell.TH.PprLib text-1.2.1.1:Data.Text
         text-1.2.1.1:Data.Text.Lazy text-1.2.1.1:Data.Text.Show
         time-1.5.0.1:Data.Time.Calendar.Gregorian
         time-1.5.0.1:Data.Time.Format.Parse
         time-1.5.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.4.3.0:Control.Monad.Trans.Error
         vector-0.10.9.1:Data.Vector.Fusion.Stream
         vector-0.10.9.1:Data.Vector.Unboxed
family instance modules: alphasheets-0.1.0.0:AS.Types
                         attoparsec-0.13.0.1:Data.Attoparsec.Internal.Types
                         base:Control.Applicative base:Data.Either base:Data.Monoid
                         base:Data.Type.Equality base:GHC.Exts base:GHC.Generics
                         dlist-0.7.1.1:Data.DList
                         monad-control-1.0.0.4:Control.Monad.Trans.Control
                         primitive-0.5.2.1:Control.Monad.Primitive tagged-0.8.1:Data.Tagged
                         text-1.2.1.1:Data.Text text-1.2.1.1:Data.Text.Lazy
                         unordered-containers-0.2.5.1:Data.HashMap.Base
                         unordered-containers-0.2.5.1:Data.HashSet
                         uuid-types-1.0.1:Data.UUID.Types.Internal
                         uuid-types-1.0.1:Data.UUID.Types.Internal.Builder
                         vector-0.10.9.1:Data.Vector vector-0.10.9.1:Data.Vector.Primitive
                         vector-0.10.9.1:Data.Vector.Storable
                         vector-0.10.9.1:Data.Vector.Unboxed.Base
import  -/  AS.DB d1da9735084f4def655f259d6291ea4a
  exports: b8d3e216c017511efcdf8107eca94954
import  -/  AS.Eval.Lang 3fda6bb2420a5723dbba0a317f0d9038
  exports: 58f15bb1181b4ae9d0069a0a51c067dd
  addCompileCmd 6aa3d0f212994ab417f6eceb5908d027
  formatRunArgs 4c0e88861abce4049ac862611e46c4fd
  getReplRecord cb97c67edc6d812f07f0d01a01386ff5
  getReplRecordFile 1bc456b3ba035518b4933ce73f34e492
  getRunFile 3bbc9953184aef0160d9c6754cafd83b
  getRunReplFile 6d754677911f6a9a00b3e731ed9fc13c
  getRunnerArgs f3a71e05d10f1d1209ebdcd08bd56bd9
  getRunnerCmd 4e3ea2d3b0b9f4b2ef7d976dd7d76bbf
  getRunnerCmdRepl 8e055ee7b56d4dcc6be85b4631c74bfa
  interpolate 0bd8ae38df9a3f14416abec737cb0e9b
  interpolateFile 70914555c4288fa2b848578c5f527c9b
  interpolateFileRepl d948074d9a4f8201d23a834106e57799
  lookupString 9e0c727355d2263b7d5a25c614a06552
  removePrintStmt 287073e0fedaea3a1ca2e4775bd38e7c
import  -/  AS.Parsing.Common 1e559d9fa6be58496d3932deb847a914
  exports: 855ca2332aab91a7acb18022ee906c28
import  -/  AS.Parsing.In 595326c81f8d49e376bdee21b6d55e03
  exports: 9ff090348927269679ac35c6a6d6af97
  parseValue 66f48c1a03996c5aa7d57bff6935cc53
import  -/  AS.Parsing.Out ab4556f4530731168addfd60447b5b4b
  exports: 6475d1208915e3a1b1f14fba3d0ebf61
  exLocToASLocation 5154450a1165d9e6447a57f75498c411
  excelMatch a8900b2391fafc731ee6b7b52528cbcc
  getMatchesWithContext 577784235c207381cf34d48eb7d1e701
  replaceMatches efc937eaa950cd7daac838c89238cffe
import  -/  AS.Types 57177fd753daf2295937f583773f48c2
  exports: 6e42e59e48c9bd8a9ec1e6c5c6514bc2
  ASExpression 9cbd86115fab1fed071da19ea97623d5
  ASLanguage 09dfc36a3fc4ca0fbd3a2397077fc3ad
  ASLocation a0a8734170556a1370de82a1630a4c6d
  ASValue 9fbe83609efa13c71e95a441f7e5b8bf
  Excel 7dfe3f94744dcf76cf14bbe079f2876e
  Expression 42521d70f0656b4e3a31d49f7f4b2bca
  OCaml 316173acf82f42d8ffee5d0c4bb20bb8
  Python d5482a52a0e5d9db874203fc7d33d1ba
  Reference 1e3eabb37bc8fab060ae4afa4a2ae8cd
  SQL 92ee43810bc90b72fe805b834202168a
  ValueB 1684fa0e8baa6ec571fd24c93039e150
  ValueError 1e640d392b8940ad63a4a8399f5d950a
  ValueL a57562754856c3bece86f880225b9979
  ValueS 83ac67da592182147c6b8d3706eac9a9
  expression 3ab94a321d27a3a412f9fb640443a7ff
  language 91930c0f4af209cd196048242c0d32a3
import  -/  AS.Util fcc8b95dc3c2bad9df28c51cf1f39293
  exports: 47ea528d752de70f9f7cc438ef23ed30
  printTimed 3682e84402d9478054babec32de0c1fc
import  -/  base:Control.Applicative 30b769206cb5c020684e1bda0d7e7dd3
import  -/  base:Control.Monad 483e787e07c2e49f1fb1c1b88665cb92
import  -/  base:Data.List 0908c8f6208710e0f918cb6f09e882cc
import  -/  base:Data.Maybe 5034d40e23c3a7110309f188001df4ca
import  -/  base:Data.Tuple cac4e06c48274e85317bd3e59867ef5b
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:GHC.IO 4f1da187b3631b8d72997b7dc992301d
import  -/  base:GHC.IO.Handle.Text 69f1e461016fd70cdf6f3676c04d367a
import  -/  base:GHC.List 4cff382327e59a5787355ca0a4174450
import  -/  base:GHC.Num 5e7786970581cacc802bf850d458a30b
import  -/  base:GHC.Show cf1a7ff9edb0f41528085aad04d33753
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  base:System.IO cadd0efb01c47ddd8f52d750739fdbdf
import  -/  containers-0.5.5.1:Data.Map bee9dbf2f41b2d615c4b071cbb93a29d
import  -/  containers-0.5.5.1:Data.Map.Base a053961b2088634e2a136c15179d3a00
import  -/  ghc-prim:GHC.Classes 3e6cbe1e7e80480408cfa8d5450726a0
import  -/  ghc-prim:GHC.Types dcba736fa3dfba12d307ab18354845d2
import  -/  process-1.2.3.0:System.Process 7dfcfe457b15709361ec5a4aee716a89
import  -/  pyfi-0.4.0.4:Python 20901d2c03d5208741df0dda8b555e06
import  -/  text-1.2.1.1:Data.Text b3c4fa3023eabdced6a311d2fdbd8c54
import  -/  time-1.5.0.1:Data.Time.Clock ef66967f0ebbfbce98a3ae1dbfea3a8c
import  -/  time-1.5.0.1:Data.Time.Clock.UTC 911d1c0e92605c6430183141d9b636f7
d007c6a701e18b29d0c9ccd1400ae423
  clearReplRecord :: AS.Types.ASLanguage -> GHC.Types.IO ()
    {- Arity: 1, Strictness: <L,1*U>,
       Unfolding: (AS.Eval.clearReplRecord1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
2cb22299a72cbbfb8a3256e8c709796f
  clearReplRecord1 :: AS.Types.ASLanguage
                      -> GHC.Prim.State# GHC.Prim.RealWorld
                      -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 1, Strictness: <L,1*U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage ->
                   System.IO.writeFile1
                     (AS.Eval.Lang.getReplRecordFile lang)
                     (GHC.Types.[] @ GHC.Types.Char)) -}
6494f829e3fb924246be724a5e72d0ac
  doEval :: AS.Types.ASLanguage
            -> GHC.Base.String
            -> GHC.Types.IO GHC.Base.String
    {- Arity: 3, Strictness: <S,1*U><L,U><L,U>,
       Unfolding: (AS.Eval.doEval1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R <GHC.Base.String>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
5dc85f13c81aab26f5d9b491e61cbda7
  doEval1 :: AS.Types.ASLanguage
             -> GHC.Base.String
             -> GHC.Prim.State# GHC.Prim.RealWorld
             -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 3, Strictness: <S,1*U><L,U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     str :: GHC.Base.String
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case lang of wild {
                     DEFAULT
                     -> case System.IO.writeFile1
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  AS.Config.Paths.getEvalPath
                                  (case wild of wild1 {
                                     AS.Types.R -> AS.Eval.Lang.getRunFile7
                                     AS.Types.OCaml -> AS.Eval.Lang.getRunFile5
                                     AS.Types.CPP -> AS.Eval.Lang.getRunFile4
                                     AS.Types.Java -> AS.Eval.Lang.getRunFile3 }))
                               str
                               eta of ds1 { (#,#) ipv ipv1 ->
                        case Data.Time.Clock.POSIX.getPOSIXTime1
                               ipv of ds2 { (#,#) ipv2 ipv3 ->
                        AS.Eval.doEval6 wild ipv2 } }
                     AS.Types.Python -> AS.Eval.doEval3 str eta
                     AS.Types.SQL
                     -> case System.IO.writeFile1
                               AS.Eval.doEval2
                               str
                               eta of ds1 { (#,#) ipv ipv1 ->
                        case Data.Time.Clock.POSIX.getPOSIXTime1
                               ipv of ds2 { (#,#) ipv2 ipv3 ->
                        AS.Eval.doEval3 str ipv2 } }
                     AS.Types.Excel -> AS.Eval.doEval3 str eta }) -}
31616ef8f081b2d9a985c44ee124257e
  doEval2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.Base.++
                     @ GHC.Types.Char
                     AS.Config.Paths.getEvalPath
                     AS.Eval.Lang.getRunFile2) -}
e3937986f47158330718a6ff55eff399
  doEval3 :: GHC.Base.String
             -> GHC.Prim.State# GHC.Prim.RealWorld
             -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (\ evalStr :: GHC.Base.String
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case GHC.IO.Handle.Text.hPutStr2
                          GHC.IO.Handle.FD.stdout
                          AS.Eval.doEval5
                          GHC.Types.True
                          s of ds1 { (#,#) ipv ipv1 ->
                   Python.defVV1
                     @ GHC.Base.String
                     @ GHC.Base.String
                     Data.Aeson.Types.Instances.$fToJSON[]0_$ctoJSON
                       `cast`
                     (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0] <[GHC.Types.Char]>_N))
                     Data.Aeson.Types.Instances.$fFromJSON[]0_$cparseJSON
                       `cast`
                     (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0]
                               <[GHC.Types.Char]>_N))
                     (GHC.Base.++ @ GHC.Types.Char evalStr AS.Eval.pyString)
                     AS.Eval.doEval4
                     ipv }) -}
60e0ac164a4f55ddd02c33a2777a144d
  doEval4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "Hello"#) -}
a22d1427901955e3a0b214058952e7fc
  doEval5 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "IN PYFI"#) -}
bf912d44ac5ea1e2ce9ad474735ffe11
  doEval6 :: AS.Types.ASLanguage
             -> GHC.Prim.State# GHC.Prim.RealWorld
             -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   AS.Eval.doEval7
                     (AS.Eval.Lang.addCompileCmd
                        lang
                        (AS.Eval.Lang.$wformatRunArgs
                           (AS.Eval.Lang.getRunnerCmd lang)
                           (AS.Eval.Lang.getRunFile lang)
                           (case lang of wild {
                              DEFAULT -> GHC.Types.[] @ GHC.Base.String
                              AS.Types.OCaml -> AS.Eval.Lang.getRunnerArgs8
                              AS.Types.CPP -> AS.Eval.Lang.getRunnerArgs1 })))
                     lang
                     s) -}
e57228a0dcd51613d8421cc8a940aba8
  doEval7 :: GHC.Base.String
             -> AS.Types.ASLanguage
             -> GHC.Prim.State# GHC.Prim.RealWorld
             -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 3, Strictness: <L,U><L,1*U><L,U>,
       Unfolding: (\ s :: GHC.Base.String
                     lang :: AS.Types.ASLanguage
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case System.Process.runInteractiveCommand1
                          s
                          eta of ds1 { (#,#) ipv ipv1 ->
                   case ipv1 of wild { (,,,) ds stdOut stdErr hProcess ->
                   case GHC.IO.Handle.Text.hGetContents1
                          stdOut
                          ipv of ds2 { (#,#) ipv2 ipv3 ->
                   case GHC.IO.Handle.Text.hGetContents1
                          stdErr
                          ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                   letrec {
                     a :: [GHC.Types.Char]
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                GHC.IO.Exception.ExitCode #)
                       {- Arity: 2, Strictness: <S,1*U><L,U> -}
                     = \ ds4 :: [GHC.Types.Char]
                         eta1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case ds4 of wild1 {
                         [] -> System.Process.callCommand3 hProcess eta1
                         : y ys -> case y of tpl { GHC.Types.C# ipv6 -> a ys eta1 } }
                   } in
                   case a ipv3 ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                   letrec {
                     a1 :: [GHC.Types.Char]
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 GHC.IO.Exception.ExitCode #)
                       {- Arity: 2, Strictness: <S,1*U><L,U> -}
                     = \ ds5 :: [GHC.Types.Char]
                         eta1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case ds5 of wild1 {
                         [] -> System.Process.callCommand3 hProcess eta1
                         : y ys -> case y of tpl { GHC.Types.C# ipv8 -> a1 ys eta1 } }
                   } in
                   case a1 ipv5 ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                   (# ipv8, AS.Eval.readOutput lang ipv3 ipv5 #) } } } } } }) -}
c8533d8ec98ca77bbfea4be7d085912c
  eval :: GHC.Base.String
          -> AS.Types.ASLanguage
          -> GHC.Types.IO GHC.Base.String
    {- Arity: 3, Strictness: <L,U><L,1*U><L,U>,
       Unfolding: (AS.Eval.doEval7
                     `cast`
                   (<GHC.Base.String>_R
                    ->_R <AS.Types.ASLanguage>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
e714a2b874e863d276f3cfb9e15d7a45
  evalCode :: AS.Types.ASLocation
              -> Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue
              -> AS.Types.ASExpression
              -> GHC.Types.IO AS.Types.ASValue
    {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>,
       Unfolding: (AS.Eval.evalCode1
                     `cast`
                   (<AS.Types.ASLocation>_R
                    ->_R <Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue>_R
                    ->_R <AS.Types.ASExpression>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <AS.Types.ASValue>_R))) -}
47f386551e3ec8183e87b130b698caea
  evalCode1 :: AS.Types.ASLocation
               -> Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue
               -> AS.Types.ASExpression
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ASValue #)
    {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U> -}
5c384c0e224c9159de4860f987267c73
  evalCodeRepl :: AS.Types.ASExpression
                  -> GHC.Types.IO AS.Types.ASValue
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (AS.Eval.evalCodeRepl1
                     `cast`
                   (<AS.Types.ASExpression>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <AS.Types.ASValue>_R))) -}
8aa40fa93e7555202141ab57706b4be6
  evalCodeRepl1 :: AS.Types.ASExpression
                   -> GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ASValue #)
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (\ xp :: AS.Types.ASExpression
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   let {
                     lang :: AS.Types.ASLanguage
                     = case xp of wild {
                         AS.Types.Expression ds1 ds2 -> ds2
                         AS.Types.Reference ipv3 ipv4 -> AS.Types.language1 }
                   } in
                   case AS.Eval.Lang.getReplTemplate1
                          lang
                          eta of ds1 { (#,#) ipv ipv1 ->
                   let {
                     ipv2 :: GHC.Base.String
                     = AS.Eval.Lang.$wlayoutCodeFile
                         lang
                         (GHC.Types.[] @ GHC.Types.Char)
                         ipv1
                         (case xp of wild {
                            AS.Types.Expression ds2 ds3 -> ds2
                            AS.Types.Reference ipv3 ipv4 -> AS.Types.expression1 })
                   } in
                   case System.IO.writeFile1
                          (AS.Eval.Lang.getRunReplFile lang)
                          ipv2
                          ipv of ds2 { (#,#) ipv3 ipv4 ->
                   case AS.Eval.doEval3 ipv2 ipv3 of ds3 { (#,#) ipv5 ipv6 ->
                   case AS.Eval.Lang.getReplRecord1
                          lang
                          ipv5 of ds4 { (#,#) ipv7 ipv8 ->
                   case AS.Parsing.In.parseValue lang ipv6 of wild {
                     DEFAULT
                     -> case System.IO.writeFile1
                               (AS.Eval.Lang.getReplRecordFile lang)
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  ipv8
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     AS.Eval.evalCodeRepl2
                                     (AS.Eval.Lang.removePrintStmt
                                        lang
                                        (case xp of wild1 {
                                           AS.Types.Expression ds5 ds6 -> ds5
                                           AS.Types.Reference ipv9 ipv10
                                           -> AS.Types.expression1 }))))
                               ipv7 of ds5 { (#,#) ipv9 ipv10 ->
                        (# ipv9, wild #) }
                     AS.Types.ValueError ds ds5 ds6 ds7
                     -> (# ipv7, wild #) } } } } }) -}
6f1a1e41a636a240980266f264b7d561
  evalCodeRepl2 :: GHC.Types.Char
    {- HasNoCafRefs, Unfolding: (GHC.Types.C# '\n') -}
2e9fafebc3e8af06d2ab03891ecb7bd2
  evalExcel :: AS.Types.ASExpression
               -> GHC.Types.IO (AS.Types.ASExpression, GHC.Types.Bool)
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (AS.Eval.evalExcel1
                     `cast`
                   (<AS.Types.ASExpression>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0]
                                  <(AS.Types.ASExpression, GHC.Types.Bool)>_R))) -}
7450bd2bdffb3bed894272a56628766b
  evalExcel1 :: AS.Types.ASExpression
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                      (AS.Types.ASExpression, GHC.Types.Bool) #)
    {- Arity: 2, Strictness: <L,1*U><L,U> -}
424491433e4fd204b319b74dc4f929d2
  evalExpression :: AS.Types.ASLocation
                    -> Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue
                    -> AS.Types.ASExpression
                    -> GHC.Types.IO AS.Types.ASValue
    {- Arity: 4, Strictness: <L,U><L,U><S,1*U><L,U>,
       Unfolding: (AS.Eval.evalExpression1
                     `cast`
                   (<AS.Types.ASLocation>_R
                    ->_R <Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue>_R
                    ->_R <AS.Types.ASExpression>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <AS.Types.ASValue>_R))) -}
b3e1c90f23934aad9cdd8eebcb331a35
  evalExpression1 :: AS.Types.ASLocation
                     -> Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue
                     -> AS.Types.ASExpression
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ASValue #)
    {- Arity: 4, Strictness: <L,U><L,U><S,1*U><L,U>,
       Unfolding: (\ loc :: AS.Types.ASLocation
                     dict :: Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue
                     expr :: AS.Types.ASExpression
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case expr of wild {
                     AS.Types.Expression ds ds1 -> AS.Eval.evalCode1 loc dict wild eta
                     AS.Types.Reference ds ds1
                     -> AS.Eval.evalExpression2 loc dict wild eta }) -}
a719ebb33c092b4ad7a21795a21c3890
  evalExpression2 :: AS.Types.ASLocation
                     -> Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue
                     -> AS.Types.ASExpression
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ASValue #)
    {- Arity: 4, Strictness: <L,1*U><L,U><S,1*U><L,U>,
       Unfolding: (\ loc :: AS.Types.ASLocation
                     dict :: Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue
                     ds :: AS.Types.ASExpression
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ds of wild {
                     AS.Types.Expression ipv ipv1
                     -> case AS.Eval.evalExpression3
                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ASValue #)
                        of {}
                     AS.Types.Reference l ds1
                     -> case ds1 of wild1 { (,) a b ->
                        (# eta,
                           case AS.Eval.Lang.$s!1 @ AS.Types.ASValue l dict of wild2 {
                             DEFAULT -> AS.Eval.Lang.$s!1 @ AS.Types.ASValue loc dict
                             AS.Types.ValueL lst
                             -> case b of wild3 { GHC.Types.I# n0 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<# n0 0) of wild4 {
                                  GHC.Types.False
                                  -> case GHC.List.!!_sub @ AS.Types.ASValue lst n0 of wild5 {
                                       DEFAULT -> wild5
                                       AS.Types.ValueL row -> GHC.List.!! @ AS.Types.ASValue row a }
                                  GHC.Types.True
                                  -> case GHC.List.!!1
                                     ret_ty AS.Types.ASValue
                                     of {} } } } #) } }) -}
3d9aeace548dc4b47be54304ca5c08ca
  evalExpression3 :: GHC.Types.IO AS.Types.ASValue
    {- Strictness: b -}
27faad8f737f7503d5be87b71dce927a
  evalRef :: AS.Types.ASLocation
             -> Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue
             -> AS.Types.ASExpression
             -> GHC.Types.IO AS.Types.ASValue
    {- Arity: 4, Strictness: <L,1*U><L,U><S,1*U><L,U>,
       Unfolding: (AS.Eval.evalExpression2
                     `cast`
                   (<AS.Types.ASLocation>_R
                    ->_R <Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue>_R
                    ->_R <AS.Types.ASExpression>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <AS.Types.ASValue>_R))) -}
de3ee3925aa5e6d6e85d99f27ba1c96e
  evalString :: AS.Types.ASLanguage
                -> GHC.Base.String
                -> GHC.Types.IO AS.Types.ASValue
    {- Arity: 3, Strictness: <L,U><L,1*U><L,U>,
       Unfolding: (AS.Eval.evalString1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R <GHC.Base.String>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <AS.Types.ASValue>_R))) -}
28f24b581347e99a8787ad21fb89c5b5
  evalString1 :: AS.Types.ASLanguage
                 -> GHC.Base.String
                 -> GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ASValue #)
    {- Arity: 3, Strictness: <L,U><L,1*U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     evalStr :: GHC.Base.String
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case AS.Eval.doEval3 evalStr s of ds1 { (#,#) ipv ipv1 ->
                   (# ipv, AS.Parsing.In.parseValue lang ipv1 #) }) -}
8fd1efa869b38eb661178ee951d28a95
  pyString :: GHC.Base.String
    {- Unfolding: (GHC.CString.unpackCString#
                     "\n\
                     \def export(x=1):\n\
                     \\treturn repr(result)"#) -}
3afcbdb35545a1b611a795705072ca4a
  pyfiString :: GHC.Base.String -> GHC.Types.IO GHC.Base.String
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (AS.Eval.doEval3
                     `cast`
                   (<GHC.Base.String>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
c5c8502b63730a8e65abf49a6f91ba29
  readOutput :: AS.Types.ASLanguage
                -> GHC.Base.String
                -> GHC.Base.String
                -> GHC.Base.String
    {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U><L,1*U><S,1*U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     res :: GHC.Base.String
                     err :: GHC.Base.String ->
                   case err of wild {
                     [] -> res
                     : ipv ipv1
                     -> case lang of wild1 {
                          DEFAULT -> wild
                          AS.Types.Python
                          -> case res of wild2 { [] -> wild : ipv2 ipv3 -> wild2 } } }) -}
974bef938930af9ea1ed18cd019d1bc8
  runFile :: AS.Types.ASLanguage -> GHC.Types.IO GHC.Base.String
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (AS.Eval.doEval6
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
c069de0c1016f7c2b4836917bf03c3ac
  runReplFile :: AS.Types.ASLanguage -> GHC.Types.IO GHC.Base.String
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (AS.Eval.runReplFile1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
c156387163ba54b03d256b1566ce42f8
  runReplFile1 :: AS.Types.ASLanguage
                  -> GHC.Prim.State# GHC.Prim.RealWorld
                  -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   AS.Eval.doEval7
                     (case lang of wild {
                        DEFAULT -> AS.Eval.Lang.getRunnerCmdRepl1
                        AS.Types.Python -> AS.Eval.runReplFile2 })
                     lang
                     s) -}
aba091eae41d38a2f4ed2103923be6dc
  runReplFile2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.Base.++
                     @ GHC.Types.Char
                     AS.Eval.Lang.getRunnerCmd1
                     AS.Eval.runReplFile3) -}
8ea43131c6b410f216e5443753e50294
  runReplFile3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.Base.++
                     @ GHC.Types.Char
                     AS.Eval.runReplFile5
                     AS.Eval.runReplFile4) -}
6fe508aceb674ea82bb17eb49f8e4608
  runReplFile4 :: [GHC.Types.Char]
    {- HasNoCafRefs,
       Unfolding: (GHC.Types.:
                     @ GHC.Types.Char
                     AS.Eval.Lang.formatRunArgs2
                     (GHC.Types.[] @ GHC.Types.Char)) -}
1c162edc9ca0f4794bad357e98fe4514
  runReplFile5 :: [GHC.Types.Char]
    {- Unfolding: (GHC.Base.++
                     @ GHC.Types.Char
                     AS.Config.Paths.getEvalPath
                     AS.Eval.Lang.getRunReplFile3) -}
03b3dda5e4a49b08c1c1db62bf471f8e
  writeExecFile :: AS.Types.ASLanguage
                   -> GHC.Base.String
                   -> GHC.Types.IO ()
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (AS.Eval.writeExecFile1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R <GHC.Base.String>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
6e27a6ad08059c5a4fcb7e27c11074c2
  writeExecFile1 :: AS.Types.ASLanguage
                    -> GHC.Base.String
                    -> GHC.Prim.State# GHC.Prim.RealWorld
                    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     contents :: GHC.Base.String ->
                   System.IO.writeFile1 (AS.Eval.Lang.getRunFile lang) contents) -}
d284edad9d779a1bbcad72a5a7991d78
  writeReplFile :: AS.Types.ASLanguage
                   -> GHC.Base.String
                   -> GHC.Types.IO ()
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (AS.Eval.writeReplFile1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R <GHC.Base.String>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
6abbd9d3a5c375db26c7e1a4fd623e7a
  writeReplFile1 :: AS.Types.ASLanguage
                    -> GHC.Base.String
                    -> GHC.Prim.State# GHC.Prim.RealWorld
                    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     contents :: GHC.Base.String ->
                   System.IO.writeFile1
                     (AS.Eval.Lang.getRunReplFile lang)
                     contents) -}
63d887b3d33c7c37890a4ebb1ca5d935
  writeReplRecord :: AS.Types.ASLanguage
                     -> GHC.Base.String
                     -> GHC.Types.IO ()
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (AS.Eval.writeReplRecord1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R <GHC.Base.String>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
f9874bee6c4989676cd5f7877773405d
  writeReplRecord1 :: AS.Types.ASLanguage
                      -> GHC.Base.String
                      -> GHC.Prim.State# GHC.Prim.RealWorld
                      -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     contents :: GHC.Base.String ->
                   System.IO.writeFile1
                     (AS.Eval.Lang.getReplRecordFile lang)
                     contents) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

