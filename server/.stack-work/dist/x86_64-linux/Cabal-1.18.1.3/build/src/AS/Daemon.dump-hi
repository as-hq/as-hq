
==================== FINAL INTERFACE ====================
2015-09-01 19:50:35.555489 UTC

interface alphasheets-0.1.0.0:AS.Daemon 7083
  interface hash: 9999fea38f18148916344cc800fa9a64
  ABI hash: e9d154e13909019030f80685e023989d
  export-list hash: e4a05c6be422079bdfe78de061550413
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 5316f95d5f7b98addcee99ed907c3931
  used TH splices: False
  where
exports:
  AS.Daemon.addDaemon
  AS.Daemon.daemonExists
  AS.Daemon.daemonFunc
  AS.Daemon.getConnByLoc
  AS.Daemon.getDaemonName
  AS.Daemon.modifyDaemon
  AS.Daemon.possiblyCreateDaemon
  AS.Daemon.removeDaemon
module dependencies: AS.Config.Settings AS.Types AS.Util
package dependencies: SHA-1.6.4.2 aeson-0.8.1.1 array-0.5.0.0
                      attoparsec-0.13.0.1 base base64-bytestring-1.0.0.1 binary-0.7.1.0
                      blaze-builder-0.4.0.1 bytestring-0.10.4.0 case-insensitive-1.2.0.4
                      containers-0.5.5.1 daemons-0.2.1 data-default-0.5.3
                      data-default-class-0.0.1 data-default-instances-base-0.0.1
                      data-default-instances-containers-0.0.1
                      data-default-instances-dlist-0.0.1
                      data-default-instances-old-locale-0.0.1 deepseq-1.3.0.2
                      directory-1.2.2.1 dlist-0.7.1.1 entropy-0.3.7 filepath-1.3.0.2
                      ghc-prim hashable-1.2.3.3 integer-gmp monad-loops-0.4.3
                      network-2.6.2.1 old-locale-1.0.0.6 primitive-0.5.2.1 random-1.1
                      scientific-0.3.3.8 text-1.2.1.1 time-1.5.0.1 transformers-0.4.3.0
                      unix-2.7.1.0 unordered-containers-0.2.5.1 uuid-1.3.10
                      uuid-types-1.0.1 vector-0.10.9.1 websockets-0.9.5.0
orphans: aeson-0.8.1.1:Data.Aeson.Types.Generic
         aeson-0.8.1.1:Data.Aeson.Types.Instances
         aeson-0.8.1.1:Data.Aeson.Types.Internal
         attoparsec-0.13.0.1:Data.Attoparsec.ByteString.Char8 base:GHC.Base
         base:GHC.Float base:GHC.Real binary-0.7.1.0:Data.Binary.Generic
         bytestring-0.10.4.0:Data.ByteString.Builder
         data-default-instances-base-0.0.1:Data.Default.Instances.Base
         data-default-instances-containers-0.0.1:Data.Default.Instances.Containers
         data-default-instances-dlist-0.0.1:Data.Default.Instances.DList
         data-default-instances-old-locale-0.0.1:Data.Default.Instances.OldLocale
         hashable-1.2.3.3:Data.Hashable.Generic
         network-2.6.2.1:Network.Socket network-2.6.2.1:Network.Socket.Types
         random-1.1:System.Random text-1.2.1.1:Data.Text
         text-1.2.1.1:Data.Text.Lazy text-1.2.1.1:Data.Text.Show
         time-1.5.0.1:Data.Time.Calendar.Gregorian
         time-1.5.0.1:Data.Time.Format.Parse
         time-1.5.0.1:Data.Time.LocalTime.LocalTime
         vector-0.10.9.1:Data.Vector.Fusion.Stream
         vector-0.10.9.1:Data.Vector.Unboxed
family instance modules: alphasheets-0.1.0.0:AS.Types
                         attoparsec-0.13.0.1:Data.Attoparsec.Internal.Types
                         base:Control.Applicative base:Data.Either base:Data.Monoid
                         base:Data.Type.Equality base:GHC.Exts base:GHC.Generics
                         dlist-0.7.1.1:Data.DList primitive-0.5.2.1:Control.Monad.Primitive
                         text-1.2.1.1:Data.Text text-1.2.1.1:Data.Text.Lazy
                         unordered-containers-0.2.5.1:Data.HashMap.Base
                         unordered-containers-0.2.5.1:Data.HashSet
                         uuid-types-1.0.1:Data.UUID.Types.Internal
                         uuid-types-1.0.1:Data.UUID.Types.Internal.Builder
                         vector-0.10.9.1:Data.Vector vector-0.10.9.1:Data.Vector.Primitive
                         vector-0.10.9.1:Data.Vector.Storable
                         vector-0.10.9.1:Data.Vector.Unboxed.Base
import  -/  aeson-0.8.1.1:Data.Aeson 2bcee634dc715d12e7154aed92c42567
import  -/  aeson-0.8.1.1:Data.Aeson.Encode.ByteString 04b640ac3757997bdf0ec42533e6bf2d
import  -/  AS.Config.Settings c714dbd1b9c0005273b28e2e1c0acee4
  exports: 3caf1b1076080d69a484c7126803487e
  wsAddress 7a8d106fec918735077efbed78ffc247
  wsPort cc50d45d8b9abe99ce63ebfe94d2e478
import  -/  AS.Types 57177fd753daf2295937f583773f48c2
  exports: 6e42e59e48c9bd8a9ec1e6c5c6514bc2
  ASDaemon b972c3a04f0cf8edc416837b2030ac79
  ASInitDaemonConnection 6d2de7642c9ebe8ece7ecf73055da2e4
  ASLocation a0a8734170556a1370de82a1630a4c6d
  ASMessage 4c981fc92afa9b0d3d0f889c5a8d7a7a
  ASUser 4187706b5feca3cee412cd2a03a405bc
  Acknowledge e930fde0826e33f1738ba0f6e3abb20f
  Cell a71eaf14eaf14807100ece3dda35b9c0
  Message abb1a691675f78c4a5f27701b161e038
  NoResult a5c4608e01d0ae4105e45f17a1a90847
  PayloadC 262ab299cea24e7cd35ffdd0e30144bc
  PayloadDaemonInit dc51c1bcd1e675191a5204c86bf135dc
  ServerState 1b54447c73ee7cfaadd458565aeffd2c
  State 51e9c4c01df3ed2848fdc29ba7b8cf81
  Stream 274146ec4f57df078143db2e51573536
  Stream 34860bc3bdf0d9074f03d82d86e0d90b
  daemonConn 22a28c2f775b769f955e527bcb43c3f1
  daemonLoc 79b5d6926a4f77f0882671380e439d6c
  messageUserId 72fef4c75595ea9bfbc9e402754bdc8b
import  -/  AS.Util fcc8b95dc3c2bad9df28c51cf1f39293
  exports: 47ea528d752de70f9f7cc438ef23ed30
  getStreamTag 55b405283a5c323103a458cd9f11f0cc
  getStreamTagFromExpression 30908ecf444092a988657590b716605d
import  -/  base:Control.Concurrent 1be25cd1e2ac314074fafb26df0ff06b
import  -/  base:Control.Exception 7d63ae88211a26e1cc154f7ca3a7313a
import  -/  base:Control.Monad 483e787e07c2e49f1fb1c1b88665cb92
import  -/  base:Data.Char 1ace810ea04187cd227c9ed982bb7d15
import  -/  base:Data.List 0908c8f6208710e0f918cb6f09e882cc
import  -/  base:Data.Maybe 5034d40e23c3a7110309f188001df4ca
import  -/  base:Data.Monoid fecb05e81c4e24b7968c0c4de9557077
import  -/  base:Data.Tuple cac4e06c48274e85317bd3e59867ef5b
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:GHC.Conc.IO ed679422d51d522122df375d58ac7128
import  -/  base:GHC.List 4cff382327e59a5787355ca0a4174450
import  -/  base:GHC.MVar 2c9d76ed3707c435c49b694504d09491
import  -/  base:GHC.Num 5e7786970581cacc802bf850d458a30b
import  -/  base:GHC.Show cf1a7ff9edb0f41528085aad04d33753
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  base:System.IO cadd0efb01c47ddd8f52d750739fdbdf
import  -/  bytestring-0.10.4.0:Data.ByteString.Char8 6ba74203c82670d222b910afbd6fa1a4
import  -/  bytestring-0.10.4.0:Data.ByteString.Lazy.Char8 a118adac239daed5c4f03b800d5d3693
import  -/  daemons-0.2.1:System.Posix.Daemon 969847c110d772f7b837dd0d07a6077f
import  -/  data-default-0.5.3:Data.Default 287c201bf688142160365af7f1d43dc2
import  -/  data-default-class-0.0.1:Data.Default.Class 2e153cd38b005b51052ad7c87eaab6e2
import  -/  ghc-prim:GHC.Classes 3e6cbe1e7e80480408cfa8d5450726a0
import  -/  ghc-prim:GHC.Types dcba736fa3dfba12d307ab18354845d2
import  -/  monad-loops-0.4.3:Control.Monad.Loops 25812b005836651b6ced262df07cf8b5
import  -/  text-1.2.1.1:Data.Text b3c4fa3023eabdced6a311d2fdbd8c54
import  -/  text-1.2.1.1:Data.Text.IO 4fed59515c6adf3b8e249dd22b5b5fda
import  -/  text-1.2.1.1:Data.Text.Internal 5c7132affaaf11c5fb226a9fff83be01
import  -/  transformers-0.4.3.0:Control.Monad.IO.Class 1fe01dea961eadb0b037d705f6cb22bb
import  -/  websockets-0.9.5.0:Network.WebSockets c11cd6465abe4dc4c3ad51897e46aaa0
import  -/  websockets-0.9.5.0:Network.WebSockets.Client ea140e0b1383e5cf5b7acd8a989accdd
import  -/  websockets-0.9.5.0:Network.WebSockets.Connection c61c2e729312f1454ad297f2f5f52374
a11fb89feeb5d78cd521e7db6031ba64
  $wa :: AS.Types.Stream
         -> AS.Types.ASLocation
         -> AS.Types.ASMessage
         -> GHC.Prim.State# GHC.Prim.RealWorld
         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4,
       Strictness: <L,U(A,U(U))><L,U><L,U(U(U,U,U),U,U,U)><L,U> -}
5b452df65c24acc7d278e5b224b5a483
  $wa1 :: AS.Types.ASUser
          -> AS.Types.ASLocation
          -> GHC.Prim.MVar# GHC.Prim.RealWorld AS.Types.ServerState
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
    {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><L,U>,
       Unfolding: (\ w :: AS.Types.ASUser
                     w1 :: AS.Types.ASLocation
                     ww :: GHC.Prim.MVar# GHC.Prim.RealWorld AS.Types.ServerState
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case GHC.Prim.readMVar#
                          @ GHC.Prim.RealWorld
                          @ AS.Types.ServerState
                          ww
                          w2 of ds1 { (#,#) ipv ipv1 ->
                   case ipv1 of wild { AS.Types.State s ->
                   case GHC.List.lookup
                          @ AS.Types.ASUser
                          @ [AS.Types.ASDaemon]
                          AS.Types.$fEqASUser
                          w
                          s of wild1 {
                     Data.Maybe.Nothing -> (# ipv, GHC.Types.False #)
                     Data.Maybe.Just daemons
                     -> (# ipv,
                           GHC.List.elem
                             @ AS.Types.ASLocation
                             AS.Types.$fEqASLocation
                             w1
                             (GHC.Base.map
                                @ AS.Types.ASDaemon
                                @ AS.Types.ASLocation
                                AS.Types.daemonLoc
                                daemons) #) } } }) -}
808c172be295e6473131219bd95d19c4
  $wa2 :: GHC.Types.Int
          -> AS.Types.ASMessage
          -> GHC.Types.IO ()
          -> Network.WebSockets.Types.ConnectionType
          -> GHC.Types.IO (Data.Maybe.Maybe Network.WebSockets.Types.Message)
          -> (Network.WebSockets.Types.Message -> GHC.Types.IO ())
          -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Bool
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 8,
       Strictness: <L,U(U)><L,U(U,U,U,U)><S,H><S,H><S,H><C(C(S)),C(C1(U(U,A)))><L,A><L,U>,
       Unfolding: (\ ww :: GHC.Types.Int
                     w :: AS.Types.ASMessage
                     ww1 :: GHC.Types.IO ()
                     ww2 :: Network.WebSockets.Types.ConnectionType
                     ww3 :: GHC.Types.IO
                                (Data.Maybe.Maybe Network.WebSockets.Types.Message)
                     ww4 :: Network.WebSockets.Types.Message -> GHC.Types.IO ()
                     ww5 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Bool
                     w1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   letrec {
                     a :: GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                       {- Arity: 1, Strictness: <L,U> -}
                     = \ s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww4
                               (Network.WebSockets.Types.DataMessage
                                  (Network.WebSockets.Types.Text
                                     (Data.ByteString.Builder.toLazyByteString
                                        (Data.Aeson.Encode.ByteString.encodeToByteStringBuilder
                                           (AS.Types.$fToJSONASMessage_$ctoJSON w))))))
                              `cast`
                            (GHC.Types.NTCo:IO[0] <()>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case {__pkg_ccall base rtsSupportsBoundThreads GHC.Prim.State#
                                                                          GHC.Prim.RealWorld
                                                                      -> (# GHC.Prim.State#
                                                                                GHC.Prim.RealWorld,
                                                                            GHC.Prim.Int# #)}
                              GHC.Prim.realWorld# of wild { (#,#) ds ds2 ->
                       case ds2 of wild1 {
                         DEFAULT
                         -> case GHC.Event.Thread.threadDelay1
                                   (case ww of wild2 { GHC.Types.I# y ->
                                    GHC.Types.I# (GHC.Prim.*# 1000 y) })
                                   ipv of ds3 { (#,#) ipv2 ipv3 ->
                            a ipv2 }
                         0
                         -> case ww of wild2 { GHC.Types.I# y ->
                            case GHC.Prim.delay#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.*# 1000 y)
                                   ipv of s' { DEFAULT ->
                            a s' } } } } }
                   } in
                   a w1) -}
5fae12aee5e53a6e8b5592e36e594b12
  $wa3 :: AS.Types.ASLocation
          -> GHC.Prim.MVar# GHC.Prim.RealWorld AS.Types.ServerState
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                Data.Maybe.Maybe Network.WebSockets.Connection.Connection #)
    {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>,
       Unfolding: (\ w :: AS.Types.ASLocation
                     ww :: GHC.Prim.MVar# GHC.Prim.RealWorld AS.Types.ServerState
                     w1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case GHC.Prim.readMVar#
                          @ GHC.Prim.RealWorld
                          @ AS.Types.ServerState
                          ww
                          w1 of ds1 { (#,#) ipv ipv1 ->
                   case ipv1 of wild { AS.Types.State s ->
                   letrec {
                     go :: [(AS.Types.ASUser, [AS.Types.ASDaemon])]
                           -> [AS.Types.ASDaemon]
                       {- Arity: 1, Strictness: <S,1*U> -}
                     = \ ds :: [(AS.Types.ASUser, [AS.Types.ASDaemon])] ->
                       case ds of wild1 {
                         [] -> GHC.Types.[] @ AS.Types.ASDaemon
                         : y ys
                         -> let {
                              ys1 :: [AS.Types.ASDaemon] = go ys
                            } in
                            letrec {
                              go1 :: [AS.Types.ASDaemon] -> [AS.Types.ASDaemon]
                                {- Arity: 1, Strictness: <S,1*U> -}
                              = \ ds2 :: [AS.Types.ASDaemon] ->
                                case ds2 of wild2 {
                                  [] -> ys1
                                  : y1 ys2
                                  -> case y1 of wild3 { AS.Types.ASDaemon l c ->
                                     case AS.Types.$fEqASCell_$c==3 l w of wild4 {
                                       GHC.Types.False -> go1 ys2
                                       GHC.Types.True
                                       -> GHC.Types.: @ AS.Types.ASDaemon wild3 (go1 ys2) } } }
                            } in
                            go1 (Data.Tuple.snd @ AS.Types.ASUser @ [AS.Types.ASDaemon] y) }
                   } in
                   case go s of wild1 {
                     []
                     -> (# ipv,
                           Data.Maybe.Nothing @ Network.WebSockets.Connection.Connection #)
                     : ipv2 ipv3
                     -> (# ipv,
                           Data.Maybe.Just
                             @ Network.WebSockets.Connection.Connection
                             (case ipv2 of wild2 { AS.Types.ASDaemon ds2 ds3 ->
                              ds3 }) #) } } }) -}
636f092a18ae1b9042b678032d2fd3b5
  $wa4 :: AS.Types.ASUserId
          -> AS.Types.ASAction
          -> AS.Types.ASResult
          -> AS.Types.ASPayload
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 5, Strictness: <L,U(U,U,U)><L,U><L,U><S,U><L,U>,
       Unfolding: (\ ww :: AS.Types.ASUserId
                     ww1 :: AS.Types.ASAction
                     ww2 :: AS.Types.ASResult
                     ww3 :: AS.Types.ASPayload
                     w :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ww3 of wild {
                     DEFAULT
                     -> case AS.Daemon.possiblyCreateDaemon2
                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        of {}
                     AS.Types.PayloadC ds
                     -> case ds of wild1 { AS.Types.Cell loc xp val ts ->
                        case AS.Util.getStreamTag ts of wild2 {
                          Data.Maybe.Nothing -> (# w, GHC.Tuple.() #)
                          Data.Maybe.Just sTag
                          -> AS.Daemon.$wa
                               sTag
                               loc
                               (AS.Types.Message ww ww1 ww2 wild)
                               w } } }) -}
0b362d5661221f9d852edbd56fbd7599
  addDaemon :: AS.Types.ASUser
               -> GHC.MVar.MVar AS.Types.ServerState
               -> AS.Types.Stream
               -> AS.Types.ASLocation
               -> AS.Types.ASMessage
               -> GHC.Types.IO ()
    {- Arity: 6,
       Strictness: <L,A><L,A><L,U(A,U(U))><L,U><L,U(U(U,U,U),U,U,U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Daemon.addDaemon1
                    `cast`
                  (<AS.Types.ASUser>_R
                   ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R <AS.Types.Stream>_R
                   ->_R <AS.Types.ASLocation>_R
                   ->_R <AS.Types.ASMessage>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
098b5f6e21230c89568755706a574e79
  addDaemon1 :: AS.Types.ASUser
                -> GHC.MVar.MVar AS.Types.ServerState
                -> AS.Types.Stream
                -> AS.Types.ASLocation
                -> AS.Types.ASMessage
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 6,
       Strictness: <L,A><L,A><L,U(A,U(U))><L,U><L,U(U(U,U,U),U,U,U)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (6, True, True)
                  (\ w :: AS.Types.ASUser
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     w2 :: AS.Types.Stream
                     w3 :: AS.Types.ASLocation
                     w4 :: AS.Types.ASMessage
                     w5 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   AS.Daemon.$wa w2 w3 w4 w5) -}
2b0591edf610307e30399c19a4d22d02
  daemonExists :: AS.Types.ASUser
                  -> AS.Types.ASLocation
                  -> GHC.MVar.MVar AS.Types.ServerState
                  -> GHC.Types.IO GHC.Types.Bool
    {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><S,1*U(U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Daemon.daemonExists1
                    `cast`
                  (<AS.Types.ASUser>_R
                   ->_R <AS.Types.ASLocation>_R
                   ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Types.Bool>_R)) -}
73be89abb62b46a86f63131daa1860a0
  daemonExists1 :: AS.Types.ASUser
                   -> AS.Types.ASLocation
                   -> GHC.MVar.MVar AS.Types.ServerState
                   -> GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
    {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><S,1*U(U)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (4, True, False)
                  (\ w :: AS.Types.ASUser
                     w1 :: AS.Types.ASLocation
                     w2 :: GHC.MVar.MVar AS.Types.ServerState
                     w3 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w2 of ww { GHC.MVar.MVar ww1 ->
                   AS.Daemon.$wa1 w w1 ww1 w3 }) -}
77bce19340070cf12f8d9227e1fb2534
  daemonFunc :: AS.Types.Stream
                -> AS.Types.ASLocation
                -> AS.Types.ASMessage
                -> Network.WebSockets.Connection.Connection
                -> GHC.Types.IO ()
    {- Arity: 5,
       Strictness: <S,1*U(A,U(U))><L,A><L,U(U,U,U,U)><S(SSSC(C(S))L),U(H,H,H,C(C1(U(U,A))),A)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Daemon.daemonFunc1
                    `cast`
                  (<AS.Types.Stream>_R
                   ->_R <AS.Types.ASLocation>_R
                   ->_R <AS.Types.ASMessage>_R
                   ->_R <Network.WebSockets.Connection.Connection>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
7f5fc7bf93a09b201b88a6bed462f45f
  daemonFunc1 :: AS.Types.Stream
                 -> AS.Types.ASLocation
                 -> AS.Types.ASMessage
                 -> Network.WebSockets.Connection.Connection
                 -> GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 5,
       Strictness: <S,1*U(A,U(U))><L,A><L,U(U,U,U,U)><S(SSSC(C(S))L),U(H,H,H,C(C1(U(U,A))),A)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (5, True, False)
                  (\ w :: AS.Types.Stream
                     w1 :: AS.Types.ASLocation
                     w2 :: AS.Types.ASMessage
                     w3 :: Network.WebSockets.Connection.Connection
                     w4 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w of ww { AS.Types.Stream ww1 ww2 ->
                   case w3 of ww3 { Network.WebSockets.Connection.Connection ww4 ww5 ww6 ww7 ww8 ->
                   AS.Daemon.$wa2 ww2 w2 ww4 ww5 ww6 ww7 ww8 w4 } }) -}
88bbac987718babbccfa28517a349e0e
  getConnByLoc :: AS.Types.ASLocation
                  -> GHC.MVar.MVar AS.Types.ServerState
                  -> GHC.Types.IO
                         (Data.Maybe.Maybe Network.WebSockets.Connection.Connection)
    {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,1*U(U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Daemon.getConnByLoc1
                    `cast`
                  (<AS.Types.ASLocation>_R
                   ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0]
                                 <Data.Maybe.Maybe Network.WebSockets.Connection.Connection>_R)) -}
f97b092f18ecf374cade1ddd78162c53
  getConnByLoc1 :: AS.Types.ASLocation
                   -> GHC.MVar.MVar AS.Types.ServerState
                   -> GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                         Data.Maybe.Maybe Network.WebSockets.Connection.Connection #)
    {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,1*U(U)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ w :: AS.Types.ASLocation
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w1 of ww { GHC.MVar.MVar ww1 -> AS.Daemon.$wa3 w ww1 w2 }) -}
57e6fcef50cf27bc427388b7d0648423
  getDaemonName :: AS.Types.ASLocation -> GHC.Base.String
    {- Arity: 1, Strictness: <S,1*U>,
       Unfolding: (\ loc :: AS.Types.ASLocation ->
                   GHC.Base.++
                     @ GHC.Types.Char
                     (AS.Types.$w$cshowsPrec5 0 loc (GHC.Types.[] @ GHC.Types.Char))
                     AS.Daemon.getDaemonName1) -}
3bd0d7a5204e5107fe3b0fb8b958f90f
  getDaemonName1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# ".pid"#) -}
8516fc688471e0265f399c3bebecab49
  modifyDaemon :: AS.Types.ASUser
                  -> GHC.MVar.MVar AS.Types.ServerState
                  -> AS.Types.Stream
                  -> AS.Types.ASLocation
                  -> AS.Types.ASMessage
                  -> GHC.Types.IO ()
    {- Arity: 6,
       Strictness: <L,A><L,1*U(U)><L,U(A,U(U))><L,U><L,U(U(U,U,U),U,U,U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Daemon.modifyDaemon1
                    `cast`
                  (<AS.Types.ASUser>_R
                   ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R <AS.Types.Stream>_R
                   ->_R <AS.Types.ASLocation>_R
                   ->_R <AS.Types.ASMessage>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
8887571feb813cce5a55b8afdeb4ed0b
  modifyDaemon1 :: AS.Types.ASUser
                   -> GHC.MVar.MVar AS.Types.ServerState
                   -> AS.Types.Stream
                   -> AS.Types.ASLocation
                   -> AS.Types.ASMessage
                   -> GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 6,
       Strictness: <L,A><L,1*U(U)><L,U(A,U(U))><L,U><L,U(U(U,U,U),U,U,U)><L,U>,
       Unfolding: InlineRule (6, True, False)
                  (\ user :: AS.Types.ASUser
                     state :: GHC.MVar.MVar AS.Types.ServerState
                     stream :: AS.Types.Stream
                     loc :: AS.Types.ASLocation
                     msg :: AS.Types.ASMessage
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case AS.Daemon.modifyDaemon2
                          loc
                          state
                          eta of ds1 { (#,#) ipv ipv1 ->
                   AS.Daemon.addDaemon1 user state stream loc msg ipv }) -}
ee60c9c85d706762fbefca28b5abaead
  modifyDaemon2 :: AS.Types.ASLocation
                   -> GHC.MVar.MVar AS.Types.ServerState
                   -> GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3, Strictness: <L,U><L,1*U(U)><L,U>,
       Unfolding: (\ loc :: AS.Types.ASLocation
                     state :: GHC.MVar.MVar AS.Types.ServerState
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   let {
                     name :: GHC.Base.String
                     = GHC.Base.++
                         @ GHC.Types.Char
                         (AS.Types.$w$cshowsPrec5 0 loc (GHC.Types.[] @ GHC.Types.Char))
                         AS.Daemon.getDaemonName1
                   } in
                   case System.Directory.doesFileExist1
                          name
                          eta of ds1 { (#,#) ipv ipv1 ->
                   let {
                     $j :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> GHC.Types.Bool
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                       {- Arity: 2, Strictness: <L,U><S,1*U> -}
                     = \ ipv2 :: GHC.Prim.State# GHC.Prim.RealWorld
                         ipv3 :: GHC.Types.Bool ->
                       case ipv3 of wild {
                         GHC.Types.False -> (# ipv2, GHC.Tuple.() #)
                         GHC.Types.True
                         -> case state of ww { GHC.MVar.MVar ww1 ->
                            case AS.Daemon.$wa3 loc ww1 ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                            case ipv5 of wild1 {
                              Data.Maybe.Nothing
                              -> case Data.Maybe.fromJust1
                                 ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                 of {}
                              Data.Maybe.Just x
                              -> case x of wild2 { Network.WebSockets.Connection.Connection dt ds ds3 ds4 dt1 ->
                                 case GHC.Prim.writeMutVar#
                                        @ GHC.Prim.RealWorld
                                        @ GHC.Types.Bool
                                        dt1
                                        GHC.Types.True
                                        ipv4 of s2# { DEFAULT ->
                                 case (ds4 AS.Daemon.modifyDaemon3)
                                        `cast`
                                      (GHC.Types.NTCo:IO[0] <()>_R)
                                        s2# of ds5 { (#,#) ipv6 ipv7 ->
                                 System.Posix.Daemon.killAndWait1 name ipv6 } } } } } } }
                   } in
                   case ipv1 of wild {
                     GHC.Types.False -> $j ipv GHC.Types.False
                     GHC.Types.True
                     -> case System.Posix.IO.createFile3
                               name
                               System.Posix.IO.Common.ReadWrite
                               (Data.Maybe.Nothing @ System.Posix.Types.FileMode)
                               System.Posix.IO.Common.defaultFileFlags
                               ipv of ds2 { (#,#) ipv2 ipv3 ->
                        case System.Posix.Daemon.isRunning2
                               ipv3
                               ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                        $j ipv4 ipv5 } } } }) -}
4e71cf90ef3e8142018685f7f67bb022
  modifyDaemon3 :: Network.WebSockets.Types.Message
    {- Unfolding: (Network.WebSockets.Types.ControlMessage
                     AS.Daemon.modifyDaemon4) -}
6e1c078d1142b35f7752c6e58bd80fa3
  modifyDaemon4 :: Network.WebSockets.Types.ControlMessage
    {- Unfolding: (Network.WebSockets.Types.Close
                     Network.WebSockets.Connection.sendClose2
                     AS.Daemon.modifyDaemon5) -}
936a9620a48b9d029cdcb6ceacff7991
  modifyDaemon5 :: Data.ByteString.Lazy.Internal.ByteString
    {- Unfolding: (Data.Text.Lazy.Encoding.encodeUtf8
                     (Data.Text.Lazy.fromChunks_go
                        (GHC.Base.$fMonad[]_$creturn
                           @ Data.Text.Internal.Text
                           AS.Daemon.modifyDaemon6))) -}
d676106f6869c1acd1f31314a9fce880
  modifyDaemon6 :: Data.Text.Internal.Text
    {- Unfolding: (Data.Text.Show.unpackCString# "Bye"#) -}
d8ba42d38b3ea6dc3736fa6286d1c223
  possiblyCreateDaemon :: AS.Types.ASUser
                          -> GHC.MVar.MVar AS.Types.ServerState
                          -> AS.Types.ASMessage
                          -> GHC.Types.IO ()
    {- Arity: 4,
       Strictness: <L,A><L,A><S(LLLS),1*U(U(U,U,U),U,U,U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Daemon.possiblyCreateDaemon1
                    `cast`
                  (<AS.Types.ASUser>_R
                   ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R <AS.Types.ASMessage>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
eddb68ea6eec5d80be315a75bf9c89b4
  possiblyCreateDaemon1 :: AS.Types.ASUser
                           -> GHC.MVar.MVar AS.Types.ServerState
                           -> AS.Types.ASMessage
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4,
       Strictness: <L,A><L,A><S(LLLS),1*U(U(U,U,U),U,U,U)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (4, True, False)
                  (\ w :: AS.Types.ASUser
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     w2 :: AS.Types.ASMessage
                     w3 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w2 of ww { AS.Types.Message ww1 ww2 ww3 ww4 ->
                   AS.Daemon.$wa4 ww1 ww2 ww3 ww4 w3 }) -}
a8f4cf9d39459184e68bc565a155b5a9
  possiblyCreateDaemon2 :: GHC.Types.IO () {- Strictness: b -}
a409589e12e57120d2742fefedfb4f5b
  removeDaemon :: AS.Types.ASLocation
                  -> GHC.MVar.MVar AS.Types.ServerState
                  -> GHC.Types.IO ()
    {- Arity: 3, Strictness: <L,U><L,1*U(U)><L,U>,
       Unfolding: (AS.Daemon.modifyDaemon2
                     `cast`
                   (<AS.Types.ASLocation>_R
                    ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

