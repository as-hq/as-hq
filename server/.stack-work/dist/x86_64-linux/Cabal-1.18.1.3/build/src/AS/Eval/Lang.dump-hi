
==================== FINAL INTERFACE ====================
2015-09-01 19:51:26.444351 UTC

interface alphasheets-0.1.0.0:AS.Eval.Lang [orphan module] 7083
  interface hash: 03685b1f0552186774f169257f4d0bfb
  ABI hash: 3fda6bb2420a5723dbba0a317f0d9038
  export-list hash: 58f15bb1181b4ae9d0069a0a51c067dd
  orphan hash: d58fb6bef7f5fdee4e79ff40a4a20c8b
  flag hash: b3e42bd95161d59a110147b096268a2e
  used TH splices: False
  where
exports:
  AS.Eval.Lang.addCompileCmd
  AS.Eval.Lang.formatLastStmtRepl
  AS.Eval.Lang.formatRunArgs
  AS.Eval.Lang.getReplRecord
  AS.Eval.Lang.getReplRecordFile
  AS.Eval.Lang.getReplTemplate
  AS.Eval.Lang.getRunFile
  AS.Eval.Lang.getRunReplFile
  AS.Eval.Lang.getRunnerArgs
  AS.Eval.Lang.getRunnerCmd
  AS.Eval.Lang.getRunnerCmdRepl
  AS.Eval.Lang.getTemplate
  AS.Eval.Lang.importFile
  AS.Eval.Lang.insertPrintCmd
  AS.Eval.Lang.insertPrintCmdRepl
  AS.Eval.Lang.interpolate
  AS.Eval.Lang.interpolateFile
  AS.Eval.Lang.interpolateFileRepl
  AS.Eval.Lang.layoutCodeFile
  AS.Eval.Lang.lookupString
  AS.Eval.Lang.pid
  AS.Eval.Lang.removePrintStmt
  AS.Eval.Lang.splitLastCmd
module dependencies: AS.Config.Paths AS.DB AS.Parsing.Common
                     AS.Parsing.Out AS.Types AS.Util
package dependencies: BoundedChan-1.0.3.0 SHA-1.6.4.2 aeson-0.8.1.1
                      array-0.5.0.0 attoparsec-0.13.0.1 base base64-bytestring-1.0.0.1
                      binary-0.7.1.0 blaze-builder-0.4.0.1 bytestring-0.10.4.0
                      bytestring-lexing-0.5.0.2 case-insensitive-1.2.0.4
                      containers-0.5.5.1 deepseq-1.3.0.2 directory-1.2.2.1 dlist-0.7.1.1
                      entropy-0.3.7 filepath-1.3.0.2 ghc-prim hashable-1.2.3.3
                      hedis-0.6.8 integer-gmp monad-control-1.0.0.4 mtl-2.2.1
                      network-2.6.2.1 parsec-3.1.9 primitive-0.5.2.1 random-1.1
                      regex-base-0.93.2 regex-posix-0.95.2 resource-pool-0.2.3.2
                      scientific-0.3.3.8 split-0.2.2 stm-2.4.2 strict-0.3.2 text-1.2.1.1
                      time-1.5.0.1 transformers-0.4.3.0 transformers-base-0.4.4
                      unix-2.7.1.0 unordered-containers-0.2.5.1 uuid-1.3.10
                      uuid-types-1.0.1 vector-0.10.9.1 websockets-0.9.5.0
orphans: aeson-0.8.1.1:Data.Aeson.Types.Generic
         aeson-0.8.1.1:Data.Aeson.Types.Instances
         aeson-0.8.1.1:Data.Aeson.Types.Internal
         attoparsec-0.13.0.1:Data.Attoparsec.ByteString.Char8 base:GHC.Base
         base:GHC.Float base:GHC.Real binary-0.7.1.0:Data.Binary.Generic
         bytestring-0.10.4.0:Data.ByteString.Builder
         bytestring-lexing-0.5.0.2:Data.ByteString.Lex.Fractional
         hashable-1.2.3.3:Data.Hashable.Generic
         network-2.6.2.1:Network.Socket network-2.6.2.1:Network.Socket.Types
         random-1.1:System.Random regex-base-0.93.2:Text.Regex.Base.Context
         regex-posix-0.95.2:Text.Regex.Posix.ByteString
         regex-posix-0.95.2:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2:Text.Regex.Posix.Sequence
         regex-posix-0.95.2:Text.Regex.Posix.String
         resource-pool-0.2.3.2:Data.Pool stm-2.4.2:Control.Monad.STM
         text-1.2.1.1:Data.Text text-1.2.1.1:Data.Text.Lazy
         text-1.2.1.1:Data.Text.Show
         time-1.5.0.1:Data.Time.Calendar.Gregorian
         time-1.5.0.1:Data.Time.Format.Parse
         time-1.5.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.4.3.0:Control.Monad.Trans.Error
         vector-0.10.9.1:Data.Vector.Fusion.Stream
         vector-0.10.9.1:Data.Vector.Unboxed
family instance modules: alphasheets-0.1.0.0:AS.Types
                         attoparsec-0.13.0.1:Data.Attoparsec.Internal.Types
                         base:Control.Applicative base:Data.Either base:Data.Monoid
                         base:Data.Type.Equality base:GHC.Exts base:GHC.Generics
                         dlist-0.7.1.1:Data.DList
                         monad-control-1.0.0.4:Control.Monad.Trans.Control
                         primitive-0.5.2.1:Control.Monad.Primitive text-1.2.1.1:Data.Text
                         text-1.2.1.1:Data.Text.Lazy
                         unordered-containers-0.2.5.1:Data.HashMap.Base
                         unordered-containers-0.2.5.1:Data.HashSet
                         uuid-types-1.0.1:Data.UUID.Types.Internal
                         uuid-types-1.0.1:Data.UUID.Types.Internal.Builder
                         vector-0.10.9.1:Data.Vector vector-0.10.9.1:Data.Vector.Primitive
                         vector-0.10.9.1:Data.Vector.Storable
                         vector-0.10.9.1:Data.Vector.Unboxed.Base
import  -/  AS.Config.Paths 547a91ce4197e2f43fd921529a7584d3
  exports: 2678336cc67a17eeb03f252c0298cf93
  getEvalPath a44c899bb9f8ece94420e41f62436c64
import  -/  AS.DB d1da9735084f4def655f259d6291ea4a
  exports: b8d3e216c017511efcdf8107eca94954
import  -/  AS.Parsing.Common 1e559d9fa6be58496d3932deb847a914
  exports: 855ca2332aab91a7acb18022ee906c28
  replaceSubstrings 8848774ecf4804a2083b49a660e4dff1
import  -/  AS.Parsing.Out ab4556f4530731168addfd60447b5b4b
  exports: 6475d1208915e3a1b1f14fba3d0ebf61
  exLocToASLocation 5154450a1165d9e6447a57f75498c411
  excelMatch a8900b2391fafc731ee6b7b52528cbcc
  getBlockDelim 936a59b9bb98b65042ee05a3bf09a2a8
  getInlineDelim b42e1f5de81a046e44e0403f0a2555fd
  getMatchesWithContext 577784235c207381cf34d48eb7d1e701
  modifiedLists 718b79eee974e0dc24177a28327e1206
  replaceMatches efc937eaa950cd7daac838c89238cffe
  showFilteredValue 70e18b25a4e67477c3196354759a9ec8
  toListStr 60c0cc14ff7c394c4f1fed9590e4d7fa
import  -/  AS.Types 57177fd753daf2295937f583773f48c2
  exports: 6e42e59e48c9bd8a9ec1e6c5c6514bc2
  ASExpression 9cbd86115fab1fed071da19ea97623d5
  ASLanguage 09dfc36a3fc4ca0fbd3a2397077fc3ad
  ASLocation a0a8734170556a1370de82a1630a4c6d
  ASValue 9fbe83609efa13c71e95a441f7e5b8bf
  CPP 8760cda2e9498a71fecc9cce0b8a2b0a
  Excel 7dfe3f94744dcf76cf14bbe079f2876e
  Index 30250568e0b81fb3ccdcef5f5512c98a
  Java ba5252d2a7a8b2327555c915235089d8
  OCaml 316173acf82f42d8ffee5d0c4bb20bb8
  Python d5482a52a0e5d9db874203fc7d33d1ba
  R 0e4b951c192ad34be9f00c06e4668cb7
  Range e6cc6efc98449e1c579d9f9ca07d3cd6
  SQL 92ee43810bc90b72fe805b834202168a
  expression 3ab94a321d27a3a412f9fb640443a7ff
  language 91930c0f4af209cd196048242c0d32a3
import  -/  base:Control.Applicative 30b769206cb5c020684e1bda0d7e7dd3
import  -/  base:Data.List 0908c8f6208710e0f918cb6f09e882cc
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:GHC.List 4cff382327e59a5787355ca0a4174450
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  base:System.IO cadd0efb01c47ddd8f52d750739fdbdf
import  -/  containers-0.5.5.1:Data.Map bee9dbf2f41b2d615c4b071cbb93a29d
import  -/  containers-0.5.5.1:Data.Map.Base a053961b2088634e2a136c15179d3a00
import  -/  directory-1.2.2.1:System.Directory 8f7d4b44fbe2d47b36d984bfbff1b541
import  -/  ghc-prim:GHC.Classes 3e6cbe1e7e80480408cfa8d5450726a0
import  -/  ghc-prim:GHC.Types dcba736fa3dfba12d307ab18354845d2
import  -/  split-0.2.2:Data.List.Split 9e8c4182840695ff3a75320d1faeebd2
import  -/  split-0.2.2:Data.List.Split.Internals 9eba89d19ec7034f3a51e3d7887f4bdb
import  -/  strict-0.3.2:System.IO.Strict 6b5a72a75edb9ef12af62d8397ba0f30
import  -/  text-1.2.1.1:Data.Text b3c4fa3023eabdced6a311d2fdbd8c54
import  -/  text-1.2.1.1:Data.Text.Show 5e3bc9590794e8c16cd05f65f5a80f3c
import  -/  transformers-0.4.3.0:Control.Monad.IO.Class 1fe01dea961eadb0b037d705f6cb22bb
eb61f9d738bfc1bc3f5ddf0c96cc75c4
  $s! :: Data.Map.Base.Map AS.Types.ASLocation a
         -> AS.Types.ASLocation
         -> a
    {- Arity: 2, Strictness: <S,1*U><S,1*U>,
       Unfolding: (\ @ a
                     m :: Data.Map.Base.Map AS.Types.ASLocation a
                     k1 :: AS.Types.ASLocation ->
                   AS.Eval.Lang.$s!1 @ a k1 m) -}
f776e38357c7164375d846aa914aed4e
  $s!1 :: AS.Types.ASLocation
          -> Data.Map.Base.Map AS.Types.ASLocation a
          -> a
    {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
c4dd238ec980e6d0aac580c35de86706
  $sfind :: AS.Types.ASLocation
            -> Data.Map.Base.Map AS.Types.ASLocation a
            -> a
    {- Arity: 2, Strictness: <S,1*U><S,1*U>,
       Unfolding: (\ @ a
                     eta :: AS.Types.ASLocation
                     eta1 :: Data.Map.Base.Map AS.Types.ASLocation a ->
                   AS.Eval.Lang.$s!1 @ a eta eta1) -}
c0185813cdbb6116204fc0d1ea7b6227
  $wformatRunArgs :: GHC.Base.String
                     -> GHC.Base.String
                     -> [GHC.Base.String]
                     -> [GHC.Types.Char]
    {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,1*U><L,1*U>,
       Unfolding: (\ w :: GHC.Base.String
                     w1 :: GHC.Base.String
                     w2 :: [GHC.Base.String] ->
                   GHC.Base.++
                     @ GHC.Types.Char
                     w
                     (GHC.Base.++
                        @ GHC.Types.Char
                        w1
                        (GHC.Types.:
                           @ GHC.Types.Char
                           AS.Eval.Lang.formatRunArgs2
                           (case w2 of wild {
                              [] -> GHC.Types.[] @ GHC.Types.Char
                              : x xs1
                              -> Data.List.intercalate_$spoly_go
                                   @ GHC.Types.Char
                                   x
                                   (Data.List.prependToAll
                                      @ [GHC.Types.Char]
                                      AS.Eval.Lang.formatRunArgs1
                                      xs1) })))) -}
66e665227169afd5be9be824f0474e38
  $wimportFile :: AS.Types.ASLanguage
                  -> GHC.Base.String
                  -> GHC.Base.String
                  -> GHC.Base.String
                  -> GHC.Base.String
    {- Arity: 4, Strictness: <S,1*U><L,U><L,U><L,1*U> -}
56a429a5dc4bb3d9035a1c340fdfe10f
  $winsertPrintCmd :: AS.Types.ASLanguage
                      -> GHC.Base.String
                      -> GHC.Base.String
                      -> GHC.Base.String
    {- Arity: 3, Strictness: <L,1*U><S,1*U><L,U> -}
a21cc8d9ed15ece65265ee24e58d8702
  $wlayoutCodeFile :: AS.Types.ASLanguage
                      -> GHC.Base.String
                      -> GHC.Base.String
                      -> GHC.Base.String
                      -> GHC.Base.String
    {- Arity: 4, Strictness: <S,1*U><L,U><L,U><L,U>,
       Unfolding: (\ w :: AS.Types.ASLanguage
                     ww :: GHC.Base.String
                     ww1 :: GHC.Base.String
                     ww2 :: GHC.Base.String ->
                   case w of wild {
                     DEFAULT
                     -> Data.List.intercalate_$spoly_go
                          @ GHC.Types.Char
                          ww
                          (Data.List.prependToAll
                             @ [GHC.Types.Char]
                             AS.Eval.Lang.interpolateFile5
                             (GHC.Types.:
                                @ [GHC.Types.Char]
                                ww1
                                (GHC.Types.:
                                   @ [GHC.Types.Char]
                                   ww2
                                   (GHC.Types.[] @ [GHC.Types.Char]))))
                     AS.Types.R
                     -> AS.Parsing.Common.replaceSubstrings
                          (Data.List.intercalate_$spoly_go
                             @ GHC.Types.Char
                             ww
                             (Data.List.prependToAll
                                @ [GHC.Types.Char]
                                AS.Eval.Lang.interpolateFile5
                                (GHC.Types.:
                                   @ [GHC.Types.Char]
                                   ww1
                                   (GHC.Types.[] @ [GHC.Types.Char]))))
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (AS.Eval.Lang.interpolateFile7, ww2)
                             (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)))
                     AS.Types.Python
                     -> AS.Parsing.Common.replaceSubstrings
                          (Data.List.intercalate_$spoly_go
                             @ GHC.Types.Char
                             ww
                             (Data.List.prependToAll
                                @ [GHC.Types.Char]
                                AS.Eval.Lang.interpolateFile5
                                (GHC.Types.:
                                   @ [GHC.Types.Char]
                                   ww1
                                   (GHC.Types.[] @ [GHC.Types.Char]))))
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (AS.Eval.Lang.interpolateFile7,
                              AS.Parsing.Common.replaceSubstrings
                                ww2
                                AS.Eval.Lang.interpolateFile2)
                             (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)))
                     AS.Types.SQL
                     -> AS.Parsing.Common.replaceSubstrings
                          (Data.List.intercalate_$spoly_go
                             @ GHC.Types.Char
                             ww
                             (Data.List.prependToAll
                                @ [GHC.Types.Char]
                                AS.Eval.Lang.interpolateFile5
                                (GHC.Types.:
                                   @ [GHC.Types.Char]
                                   ww1
                                   (GHC.Types.[] @ [GHC.Types.Char]))))
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (AS.Eval.Lang.interpolateFile7,
                              AS.Parsing.Common.replaceSubstrings
                                ww2
                                AS.Eval.Lang.interpolateFile2)
                             (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)))
                     AS.Types.Excel
                     -> AS.Parsing.Common.replaceSubstrings
                          (Data.List.intercalate_$spoly_go
                             @ GHC.Types.Char
                             ww
                             (Data.List.prependToAll
                                @ [GHC.Types.Char]
                                AS.Eval.Lang.interpolateFile5
                                (GHC.Types.:
                                   @ [GHC.Types.Char]
                                   ww1
                                   (GHC.Types.[] @ [GHC.Types.Char]))))
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (AS.Eval.Lang.interpolateFile7,
                              AS.Parsing.Common.replaceSubstrings
                                ww2
                                AS.Eval.Lang.interpolateFile2)
                             (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))) }) -}
c2e89287e5fbea5d1f7ec14d7081edfc
  $wsplitLastCmd :: AS.Types.ASLanguage
                    -> GHC.Base.String
                    -> (# GHC.Base.String, GHC.Base.String #)
    {- Arity: 2, Strictness: <L,U><L,1*U> -}
6aa3d0f212994ab417f6eceb5908d027
  addCompileCmd :: AS.Types.ASLanguage
                   -> GHC.Base.String
                   -> GHC.Base.String
    {- Arity: 2, Strictness: <S,1*U><L,1*U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage cmd :: GHC.Base.String ->
                   case lang of wild {
                     DEFAULT -> cmd
                     AS.Types.OCaml
                     -> GHC.Base.++ @ GHC.Types.Char cmd AS.Eval.Lang.addCompileCmd2
                     AS.Types.Java
                     -> GHC.CString.unpackAppendCString#
                          "cd "#
                          (GHC.Base.++
                             @ GHC.Types.Char
                             AS.Config.Paths.getEvalPath
                             (GHC.CString.unpackAppendCString#
                                "java/ && "#
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   cmd
                                   AS.Eval.Lang.addCompileCmd1))) }) -}
01ccbb7c352f0caa62b226bb0cb88e80
  addCompileCmd1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# " && java Temp"#) -}
a87b9f87eafa358e5c03e299be70642a
  addCompileCmd2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackAppendCString#
                     "; "#
                     AS.Eval.Lang.addCompileCmd3) -}
10f31e806e9767921480466c2cd4e7fd
  addCompileCmd3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.Base.++
                     @ GHC.Types.Char
                     AS.Config.Paths.getEvalPath
                     AS.Eval.Lang.addCompileCmd4) -}
e8f2d4d8450c6e40c8d4525b84225dbb
  addCompileCmd4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "ocaml/test"#) -}
12b85dd564e6900f60b7850f637edb4e
  formatLastStmtRepl :: AS.Types.ASLanguage
                        -> GHC.Base.String
                        -> GHC.Base.String
    {- Arity: 2, Strictness: <S,1*U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage str :: GHC.Base.String ->
                   case lang of wild {
                     DEFAULT -> AS.Eval.Lang.formatLastStmtRepl9
                     AS.Types.Python
                     -> let {
                          evalStmt :: [GHC.Types.Char]
                          = case AS.Eval.Lang.formatLastStmtRepl6 str of wild1 {
                              [] -> GHC.List.last2 @ [GHC.Types.Char]
                              : x xs -> GHC.List.last1 @ [GHC.Types.Char] x xs }
                        } in
                        case Data.List.isInfixOf
                               @ GHC.Types.Char
                               GHC.Classes.$fEqChar
                               AS.Eval.Lang.formatLastStmtRepl5
                               evalStmt of wild1 {
                          GHC.Types.False
                          -> GHC.CString.unpackAppendCString# "result = "# evalStmt
                          GHC.Types.True
                          -> case AS.Parsing.Common.replaceSubstrings
                                    evalStmt
                                    AS.Eval.Lang.formatLastStmtRepl1 of wild2 {
                               [] -> GHC.List.init2 @ GHC.Types.Char
                               : x xs -> GHC.List.init1 @ GHC.Types.Char x xs } } }) -}
3bad9a18ed133aca9a8e0c76f4a9c62b
  formatLastStmtRepl1 :: [(GHC.Base.String, GHC.Base.String)]
    {- Strictness: m2,
       Unfolding: (GHC.Types.:
                     @ (GHC.Base.String, GHC.Base.String)
                     AS.Eval.Lang.formatLastStmtRepl2
                     (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))) -}
28b0c57bc5d98198d8ea39c2a510834d
  formatLastStmtRepl2 :: ([GHC.Types.Char], [GHC.Types.Char])
    {- Strictness: m,
       Unfolding: ((AS.Eval.Lang.formatLastStmtRepl4,
                    AS.Eval.Lang.formatLastStmtRepl3)) -}
476ba979695ad2a752e632bf2c0a0994
  formatLastStmtRepl3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "result = "#) -}
8d90c28c64c9019fb446edfd550c3bf4
  formatLastStmtRepl4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "print("#) -}
2c7cb8b0601c44c099d9f9e2653fc0d7
  formatLastStmtRepl5 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "print"#) -}
35a0202aed64132d66d8773de11c2dd3
  formatLastStmtRepl6 :: [GHC.Types.Char] -> [[GHC.Types.Char]]
    {- Unfolding: (Data.List.Split.Internals.splitOn
                     @ GHC.Types.Char
                     GHC.Classes.$fEqChar
                     AS.Eval.Lang.formatLastStmtRepl7) -}
f0fc44ee5f4c2439cabd3ef5cd3b35d9
  formatLastStmtRepl7 :: [GHC.Types.Char]
    {- HasNoCafRefs, Strictness: m2,
       Unfolding: (GHC.Types.:
                     @ GHC.Types.Char
                     AS.Eval.Lang.formatLastStmtRepl8
                     (GHC.Types.[] @ GHC.Types.Char)) -}
d589c454194dc97f5d763ad5944540a0
  formatLastStmtRepl8 :: GHC.Types.Char
    {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '=') -}
198705eaa1d052b63b69b9ac76c30296
  formatLastStmtRepl9 :: GHC.Base.String {- Strictness: b -}
4c0e88861abce4049ac862611e46c4fd
  formatRunArgs :: AS.Types.ASLanguage
                   -> GHC.Base.String
                   -> GHC.Base.String
                   -> [GHC.Base.String]
                   -> GHC.Base.String
    {- Arity: 4, HasNoCafRefs, Strictness: <L,A><S,1*U><L,1*U><L,1*U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (4, True, True)
                  (\ w :: AS.Types.ASLanguage
                     w1 :: GHC.Base.String
                     w2 :: GHC.Base.String
                     w3 :: [GHC.Base.String] ->
                   AS.Eval.Lang.$wformatRunArgs w1 w2 w3) -}
f1438862d1c1fe91429eec413e07cd20
  formatRunArgs1 :: [GHC.Types.Char]
    {- HasNoCafRefs, Strictness: m2,
       Unfolding: (GHC.Types.:
                     @ GHC.Types.Char
                     AS.Eval.Lang.formatRunArgs2
                     (GHC.Types.[] @ GHC.Types.Char)) -}
69f74ce6cf9fe84aef835e28823bb019
  formatRunArgs2 :: GHC.Types.Char
    {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ' ') -}
cb97c67edc6d812f07f0d01a01386ff5
  getReplRecord :: AS.Types.ASLanguage
                   -> GHC.Types.IO GHC.Base.String
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (AS.Eval.Lang.getReplRecord1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
b959e86bc57f9530a5e57e9c280150c9
  getReplRecord1 :: AS.Types.ASLanguage
                    -> GHC.Prim.State# GHC.Prim.RealWorld
                    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case GHC.IO.Handle.FD.openFile1
                          (GHC.Base.++
                             @ GHC.Types.Char
                             AS.Config.Paths.getEvalPath
                             (case lang of wild {
                                DEFAULT -> AS.Eval.Lang.getReplRecord3
                                AS.Types.Python -> AS.Eval.Lang.getReplRecord2 }))
                          GHC.IO.IOMode.ReadMode
                          eta of ds1 { (#,#) ipv ipv1 ->
                   System.IO.Strict.hGetContents1 ipv1 ipv }) -}
36bb7c0782bd224fa10a0e1073979ee7
  getReplRecord2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "py/repl_record.py"#) -}
65f1484d596d5f777bd6af4c87fabca6
  getReplRecord3 :: [GHC.Types.Char] {- Strictness: b -}
1bc456b3ba035518b4933ce73f34e492
  getReplRecordFile :: AS.Types.ASLanguage -> GHC.Base.String
    {- Arity: 1, Strictness: <L,1*U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage ->
                   GHC.Base.++
                     @ GHC.Types.Char
                     AS.Config.Paths.getEvalPath
                     (case lang of wild {
                        DEFAULT -> AS.Eval.Lang.getReplRecordFile1
                        AS.Types.Python -> AS.Eval.Lang.getReplRecord2 })) -}
8bc16f4da9bc62e6bd2710d0228b073b
  getReplRecordFile1 :: [GHC.Types.Char] {- Strictness: b -}
cb74f61b853f10611e18ecef61c39715
  getReplTemplate :: AS.Types.ASLanguage
                     -> GHC.Types.IO GHC.Base.String
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (AS.Eval.Lang.getReplTemplate1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
9b04b2c2e305640cd9b6e4ad7de420a0
  getReplTemplate1 :: AS.Types.ASLanguage
                      -> GHC.Prim.State# GHC.Prim.RealWorld
                      -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case GHC.IO.Handle.FD.openFile1
                          (GHC.Base.++
                             @ GHC.Types.Char
                             AS.Config.Paths.getEvalPath
                             (case lang of wild {
                                AS.Types.R -> AS.Eval.Lang.getReplTemplate8
                                AS.Types.Python -> AS.Eval.Lang.getReplTemplate7
                                AS.Types.OCaml -> AS.Eval.Lang.getReplTemplate6
                                AS.Types.CPP -> AS.Eval.Lang.getReplTemplate5
                                AS.Types.Java -> AS.Eval.Lang.getReplTemplate4
                                AS.Types.SQL -> AS.Eval.Lang.getReplTemplate3
                                AS.Types.Excel -> AS.Eval.Lang.getReplTemplate2 }))
                          GHC.IO.IOMode.ReadMode
                          eta of ds1 { (#,#) ipv ipv1 ->
                   GHC.IO.Handle.Text.hGetContents1 ipv1 ipv }) -}
f1744286d059cd528bfdb6d25f51343b
  getReplTemplate2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "excel/template_repl.py"#) -}
1fc92b32c27f7cb651c56882e3e27cfb
  getReplTemplate3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "sql/template_repl.py"#) -}
035929deb48b25c282cfcfd7e915f0cf
  getReplTemplate4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "java/Template_repl.java"#) -}
04179e0a89334bd7acee2c50ac9c0e4b
  getReplTemplate5 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "cpp/template_repl.cpp"#) -}
8eb2ad2f43be9e93c813e5d8c08dc18c
  getReplTemplate6 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "ocaml/template_repl.ml"#) -}
e8b4743e03d1de277fd5a3e4cffccd21
  getReplTemplate7 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "py/template_repl.py"#) -}
0f5e2014710f02a11ef0fc3824d7ed38
  getReplTemplate8 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "r/template_repl.r"#) -}
3bbc9953184aef0160d9c6754cafd83b
  getRunFile :: AS.Types.ASLanguage -> GHC.Base.String
    {- Arity: 1, Strictness: <L,1*U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage ->
                   GHC.Base.++
                     @ GHC.Types.Char
                     AS.Config.Paths.getEvalPath
                     (case lang of wild {
                        AS.Types.R -> AS.Eval.Lang.getRunFile7
                        AS.Types.Python -> AS.Eval.Lang.getRunFile6
                        AS.Types.OCaml -> AS.Eval.Lang.getRunFile5
                        AS.Types.CPP -> AS.Eval.Lang.getRunFile4
                        AS.Types.Java -> AS.Eval.Lang.getRunFile3
                        AS.Types.SQL -> AS.Eval.Lang.getRunFile2
                        AS.Types.Excel -> AS.Eval.Lang.getRunFile1 })) -}
5ffb64e0e88422b87f1ad71e760e2f8e
  getRunFile1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "excel/temp.py"#) -}
a820ea23281bdd5bb3dc21015fcc1346
  getRunFile2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "sql/temp.py"#) -}
1f8facdeb655d876feae6cea7c94dfbc
  getRunFile3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "java/Temp.java"#) -}
2919a8d64d73ae8a3c1a84cbd4760139
  getRunFile4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "cpp/temp.cpp"#) -}
9fb129bc945241df35b41d69bddaa24e
  getRunFile5 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "ocaml/temp.ml"#) -}
e1e43045800af05669fed44504c2ec11
  getRunFile6 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "py/temp.py"#) -}
984a81735c37fba8c50a5d6d19b2d81f
  getRunFile7 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "r/temp.r"#) -}
6d754677911f6a9a00b3e731ed9fc13c
  getRunReplFile :: AS.Types.ASLanguage -> GHC.Base.String
    {- Arity: 1, Strictness: <L,1*U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage ->
                   GHC.Base.++
                     @ GHC.Types.Char
                     AS.Config.Paths.getEvalPath
                     (case lang of wild {
                        DEFAULT -> AS.Eval.Lang.getRunReplFile5
                        AS.Types.R -> AS.Eval.Lang.getRunReplFile4
                        AS.Types.Python -> AS.Eval.Lang.getRunReplFile3
                        AS.Types.OCaml -> AS.Eval.Lang.getRunReplFile2
                        AS.Types.SQL -> AS.Eval.Lang.getRunReplFile1 })) -}
c8f71e2fb515e8b08934074be3dc61f0
  getRunReplFile1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "sql/temp_repl.py"#) -}
07afccdc4bee0d4755fec67e5c14e871
  getRunReplFile2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "ocaml/temp_repl.ml"#) -}
e3f15eedc494bf2bc846274226a3ad1a
  getRunReplFile3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "py/temp_repl.py"#) -}
4f3a0a2cbf8a6197cd253a7681211d56
  getRunReplFile4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "r/temp_repl.r"#) -}
07ed7f4eb1ddcc165333199fa9cd122c
  getRunReplFile5 :: [GHC.Types.Char] {- Strictness: b -}
f3a71e05d10f1d1209ebdcd08bd56bd9
  getRunnerArgs :: AS.Types.ASLanguage -> [GHC.Base.String]
    {- Arity: 1, Strictness: <S,1*U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage ->
                   case lang of wild {
                     DEFAULT -> GHC.Types.[] @ GHC.Base.String
                     AS.Types.OCaml -> AS.Eval.Lang.getRunnerArgs8
                     AS.Types.CPP -> AS.Eval.Lang.getRunnerArgs1 }) -}
98b8e1f74eca9fd50bbaac26c564b87c
  getRunnerArgs1 :: [GHC.Base.String]
    {- Strictness: m2,
       Unfolding: (GHC.Types.:
                     @ GHC.Base.String
                     AS.Eval.Lang.getRunnerArgs2
                     (GHC.Types.[] @ GHC.Base.String)) -}
b72c3618ef8026ef2e2c723ae3f1d156
  getRunnerArgs2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackAppendCString#
                     "-o "#
                     AS.Eval.Lang.getRunnerArgs3) -}
4190e554d554d9fa62b48547badf7954
  getRunnerArgs3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.Base.++
                     @ GHC.Types.Char
                     AS.Eval.Lang.getRunnerArgs_path
                     AS.Eval.Lang.getRunnerArgs4) -}
3eab41c6d1eeb099d6ef3b55cc8fec8c
  getRunnerArgs4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackAppendCString#
                     "testCPP && "#
                     AS.Eval.Lang.getRunnerArgs5) -}
e79088feb4f6a3182495e6ffb4f1cc42
  getRunnerArgs5 :: [GHC.Types.Char]
    {- Unfolding: (GHC.Base.++
                     @ GHC.Types.Char
                     AS.Eval.Lang.getRunnerArgs_path
                     AS.Eval.Lang.getRunnerArgs6) -}
93268d5b4ad00813ebbde103beb1f1bb
  getRunnerArgs6 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "testCPP"#) -}
cd1a66577bafb6db46bf3a8cd3d513ca
  getRunnerArgs7 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "cpp/"#) -}
3778962a5c922a9c494985adb800941f
  getRunnerArgs8 :: [GHC.Base.String]
    {- Strictness: m2,
       Unfolding: (GHC.Types.:
                     @ GHC.Base.String
                     AS.Eval.Lang.getRunnerArgs9
                     (GHC.Types.[] @ GHC.Base.String)) -}
19f5a05f8c4f8366ad5cdd11eba6189a
  getRunnerArgs9 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackAppendCString#
                     "-o "#
                     AS.Eval.Lang.addCompileCmd3) -}
4b5b97e81ea2a3563ed8479846a9b1b3
  getRunnerArgs_path :: [GHC.Types.Char]
    {- Unfolding: (GHC.Base.++
                     @ GHC.Types.Char
                     AS.Config.Paths.getEvalPath
                     AS.Eval.Lang.getRunnerArgs7) -}
4e3ea2d3b0b9f4b2ef7d976dd7d76bbf
  getRunnerCmd :: AS.Types.ASLanguage -> GHC.Base.String
    {- Arity: 1, Strictness: <S,1*U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage ->
                   case lang of wild {
                     AS.Types.R -> AS.Eval.Lang.getRunnerCmd6
                     AS.Types.Python -> AS.Eval.Lang.getRunnerCmd5
                     AS.Types.OCaml -> AS.Eval.Lang.getRunnerCmd4
                     AS.Types.CPP -> AS.Eval.Lang.getRunnerCmd3
                     AS.Types.Java -> AS.Eval.Lang.getRunnerCmd2
                     AS.Types.SQL -> AS.Eval.Lang.getRunnerCmd1
                     AS.Types.Excel -> AS.Eval.Lang.getRunnerCmd1 }) -}
dc4129a7c0ae2fdf36221588e44e387c
  getRunnerCmd1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "python "#) -}
90ff6b04ea32e35adef9146052649111
  getRunnerCmd2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "javac "#) -}
0ce2bfe777a358191554d580ce84cdfa
  getRunnerCmd3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "g++ -std=c++11 "#) -}
7eb7c0989b91eba6edce5105942ff344
  getRunnerCmd4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "ocamlfind ocamlc -linkpkg -thread -package extlib -package core "#) -}
e434c97be314297fa42f651e287ce486
  getRunnerCmd5 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "python -u "#) -}
80d796d7ce762bbd5716b122abe722aa
  getRunnerCmd6 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "Rscript "#) -}
8e055ee7b56d4dcc6be85b4631c74bfa
  getRunnerCmdRepl :: AS.Types.ASLanguage -> GHC.Base.String
    {- Arity: 1, Strictness: <S,1*U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage ->
                   case lang of wild {
                     DEFAULT -> AS.Eval.Lang.getRunnerCmdRepl1
                     AS.Types.Python -> AS.Eval.Lang.getRunnerCmd1 }) -}
508dd83d903426a75f7d042111e5966f
  getRunnerCmdRepl1 :: GHC.Base.String {- Strictness: b -}
87fea24396b5f1969c6f27ffc92512b5
  getTemplate :: AS.Types.ASLanguage -> GHC.Types.IO GHC.Base.String
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (AS.Eval.Lang.getTemplate1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
9dd07649640f0aff701841d779ba8f5a
  getTemplate1 :: AS.Types.ASLanguage
                  -> GHC.Prim.State# GHC.Prim.RealWorld
                  -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 2, Strictness: <L,1*U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case GHC.IO.Handle.FD.openFile1
                          (GHC.Base.++
                             @ GHC.Types.Char
                             AS.Config.Paths.getEvalPath
                             (case lang of wild {
                                AS.Types.R -> AS.Eval.Lang.getTemplate8
                                AS.Types.Python -> AS.Eval.Lang.getTemplate7
                                AS.Types.OCaml -> AS.Eval.Lang.getTemplate6
                                AS.Types.CPP -> AS.Eval.Lang.getTemplate5
                                AS.Types.Java -> AS.Eval.Lang.getTemplate4
                                AS.Types.SQL -> AS.Eval.Lang.getTemplate3
                                AS.Types.Excel -> AS.Eval.Lang.getTemplate2 }))
                          GHC.IO.IOMode.ReadMode
                          eta of ds1 { (#,#) ipv ipv1 ->
                   GHC.IO.Handle.Text.hGetContents1 ipv1 ipv }) -}
7ac69e60a88ede26e9f98c25340c8f7d
  getTemplate2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "excel/template.py"#) -}
116025b613024632786fd5ebd08c6788
  getTemplate3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "sql/template.py"#) -}
d42aca9c2e0aa7f7f6d86e58b2097af0
  getTemplate4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "java/Template.java"#) -}
34e24dc31d33f316d9030022a654ae47
  getTemplate5 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "cpp/template.cpp"#) -}
bc6034fe3ad59a7c5f48debb91834069
  getTemplate6 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "ocaml/template.ml"#) -}
387d938150c93b8a725a42e097f701f7
  getTemplate7 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "py/template.py"#) -}
2c4b55a8ed691933a3a5ed07e1616efd
  getTemplate8 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "r/template.r"#) -}
30338454ba8a37bf6de00fadbac8f06e
  importFile :: AS.Types.ASLanguage
                -> (GHC.Base.String, GHC.Base.String, GHC.Base.String)
                -> GHC.Base.String
    {- Arity: 2, Strictness: <S,1*U><S,1*U(U,U,1*U)>,
       Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: AS.Types.ASLanguage
                     w1 :: (GHC.Base.String, GHC.Base.String, GHC.Base.String) ->
                   case w1 of ww { (,,) ww1 ww2 ww3 ->
                   AS.Eval.Lang.$wimportFile w ww1 ww2 ww3 }) -}
5422495ad4b774a06a7fec43314e6520
  insertPrintCmd :: AS.Types.ASLanguage
                    -> (GHC.Base.String, GHC.Base.String)
                    -> GHC.Base.String
    {- Arity: 2, Strictness: <L,1*U><S(SL),1*U(1*U,U)>,
       Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: AS.Types.ASLanguage
                     w1 :: (GHC.Base.String, GHC.Base.String) ->
                   case w1 of ww { (,) ww1 ww2 ->
                   AS.Eval.Lang.$winsertPrintCmd w ww1 ww2 }) -}
3b10fba456f997b2baa084dba651cec4
  insertPrintCmdRepl :: AS.Types.ASLanguage
                        -> (GHC.Base.String, GHC.Base.String)
                        -> GHC.Base.String
    {- Arity: 2, Strictness: <L,1*U><S(SL),1*U(1*U,U)>,
       Unfolding: InlineRule (2, True, False)
                  (\ lang :: AS.Types.ASLanguage
                     ds :: (GHC.Base.String, GHC.Base.String) ->
                   case ds of wild { (,) s lst ->
                   GHC.Base.augment
                     @ GHC.Types.Char
                     (\ @ b c :: GHC.Types.Char -> b -> b n :: b ->
                      GHC.Base.foldr @ GHC.Types.Char @ b c n s)
                     (GHC.Types.:
                        @ GHC.Types.Char
                        (GHC.Types.C# '\n')
                        (AS.Eval.Lang.formatLastStmtRepl lang lst)) }) -}
0bd8ae38df9a3f14416abec737cb0e9b
  interpolate :: AS.Types.ASLocation
                 -> Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue
                 -> AS.Types.ASExpression
                 -> GHC.Base.String
    {- Arity: 3, Strictness: <L,U><L,U><L,U>,
       Unfolding: (\ loc :: AS.Types.ASLocation
                     values :: Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue
                     xp :: AS.Types.ASExpression ->
                   case AS.Parsing.Out.getMatchesWithContext
                          @ AS.Types.ExLoc
                          (case xp of wild {
                             AS.Types.Expression ds1 ds2 -> ds1
                             AS.Types.Reference ipv3 ipv4 -> AS.Types.expression1 })
                          AS.Parsing.Out.excelMatch1
                            `cast`
                          (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                                    <Data.Text.Internal.Text>_R
                                    <()>_R
                                    <Data.Functor.Identity.Identity>_R
                                    <AS.Types.ExLoc>_R)) of wild { (,) inter matches ->
                   AS.Parsing.Out.getDependenciesAndExpressions_blend
                     inter
                     (GHC.Base.map
                        @ AS.Types.ExLoc
                        @ [GHC.Types.Char]
                        (let {
                           a :: AS.Types.ASLanguage
                           = case xp of wild1 {
                               AS.Types.Expression ds1 ds2 -> ds2
                               AS.Types.Reference ipv3 ipv4 -> AS.Types.language1 }
                         } in
                         \ x :: AS.Types.ExLoc ->
                         AS.Eval.Lang.lookupString
                           a
                           values
                           (AS.Parsing.Out.exLocToASLocation loc x))
                        matches) }) -}
70914555c4288fa2b848578c5f527c9b
  interpolateFile :: AS.Types.ASLanguage
                     -> GHC.Base.String
                     -> GHC.Types.IO GHC.Base.String
    {- Arity: 3, Strictness: <L,U><L,1*U><L,U>,
       Unfolding: (AS.Eval.Lang.interpolateFile1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R <GHC.Base.String>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
6030fe2c56c82cea34097890e91bd50a
  interpolateFile1 :: AS.Types.ASLanguage
                      -> GHC.Base.String
                      -> GHC.Prim.State# GHC.Prim.RealWorld
                      -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 3, Strictness: <L,U><L,1*U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     execCmd :: GHC.Base.String
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case AS.Eval.Lang.getTemplate1 lang eta of ds1 { (#,#) ipv ipv1 ->
                   (# ipv,
                      AS.Eval.Lang.$wlayoutCodeFile
                        lang
                        (GHC.Types.[] @ GHC.Types.Char)
                        ipv1
                        (case AS.Eval.Lang.$wsplitLastCmd
                                lang
                                execCmd of ww { (#,#) ww1 ww2 ->
                         AS.Eval.Lang.$winsertPrintCmd lang ww1 ww2 }) #) }) -}
0889e3721297e39885136a73e8c9ba2f
  interpolateFile2 :: [(GHC.Base.String, GHC.Base.String)]
    {- Strictness: m2,
       Unfolding: (GHC.Types.:
                     @ (GHC.Base.String, GHC.Base.String)
                     AS.Eval.Lang.interpolateFile3
                     (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))) -}
bb6b94dc54f748704297b48ed660c57e
  interpolateFile3 :: ([GHC.Types.Char], [GHC.Types.Char])
    {- Strictness: m,
       Unfolding: ((AS.Eval.Lang.interpolateFile5,
                    AS.Eval.Lang.interpolateFile4)) -}
034789ec7c4a32d95055ad5f46f3b241
  interpolateFile4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "\n\
                     \\t"#) -}
1844c74e9d8fed628fc69ba66aac17f8
  interpolateFile5 :: [GHC.Types.Char]
    {- HasNoCafRefs, Strictness: m2,
       Unfolding: (GHC.Types.:
                     @ GHC.Types.Char
                     AS.Eval.Lang.interpolateFile6
                     (GHC.Types.[] @ GHC.Types.Char)) -}
832b02fc8d26ce2fd2b55d01547e3eea
  interpolateFile6 :: GHC.Types.Char
    {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '\n') -}
94198800ae019ad1530e0196b9f47f1f
  interpolateFile7 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "#CMD#"#) -}
d948074d9a4f8201d23a834106e57799
  interpolateFileRepl :: AS.Types.ASLanguage
                         -> GHC.Base.String
                         -> GHC.Types.IO GHC.Base.String
    {- Arity: 3, Strictness: <L,U><L,U><L,U>,
       Unfolding: (AS.Eval.Lang.interpolateFileRepl1
                     `cast`
                   (<AS.Types.ASLanguage>_R
                    ->_R <GHC.Base.String>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
230148a874faebfe5863dbad11cff9b8
  interpolateFileRepl1 :: AS.Types.ASLanguage
                          -> GHC.Base.String
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 3, Strictness: <L,U><L,U><L,U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage
                     execCmd :: GHC.Base.String
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case AS.Eval.Lang.getReplTemplate1
                          lang
                          s of ds1 { (#,#) ipv ipv1 ->
                   (# ipv,
                      AS.Eval.Lang.$wlayoutCodeFile
                        lang
                        (GHC.Types.[] @ GHC.Types.Char)
                        ipv1
                        execCmd #) }) -}
231aacc3ddd438a1c6a64ebdc304ff99
  layoutCodeFile :: AS.Types.ASLanguage
                    -> (GHC.Base.String, GHC.Base.String, GHC.Base.String)
                    -> GHC.Base.String
    {- Arity: 2, Strictness: <S,1*U><S,1*U(U,U,U)>, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: AS.Types.ASLanguage
                     w1 :: (GHC.Base.String, GHC.Base.String, GHC.Base.String) ->
                   case w1 of ww { (,,) ww1 ww2 ww3 ->
                   AS.Eval.Lang.$wlayoutCodeFile w ww1 ww2 ww3 }) -}
9e0c727355d2263b7d5a25c614a06552
  lookupString :: AS.Types.ASLanguage
                  -> Data.Map.Base.Map AS.Types.ASLocation AS.Types.ASValue
                  -> AS.Types.ASLocation
                  -> GHC.Base.String
    {- Arity: 3, Strictness: <L,U><L,U><S,1*U> -}
ec2cb1b7d8af80ab27803dd1a21634b7
  pid :: GHC.Base.String
    {- Unfolding: (GHC.CString.unpackCString# "1730"#) -}
287073e0fedaea3a1ca2e4775bd38e7c
  removePrintStmt :: AS.Types.ASLanguage
                     -> GHC.Base.String
                     -> GHC.Base.String
    {- Arity: 2, Strictness: <S,1*U><L,1*U>,
       Unfolding: (\ lang :: AS.Types.ASLanguage str :: GHC.Base.String ->
                   case lang of wild {
                     DEFAULT -> AS.Eval.Lang.removePrintStmt1
                     AS.Types.Python
                     -> case AS.Eval.Lang.$wsplitLastCmd
                               AS.Types.Python
                               str of ww { (#,#) ww1 ww2 ->
                        case Data.List.isInfixOf
                               @ GHC.Types.Char
                               GHC.Classes.$fEqChar
                               AS.Eval.Lang.formatLastStmtRepl5
                               ww2 of wild1 {
                          GHC.Types.False
                          -> GHC.Base.++
                               @ GHC.Types.Char
                               ww1
                               (GHC.Types.: @ GHC.Types.Char AS.Eval.Lang.interpolateFile6 ww2)
                          GHC.Types.True -> ww1 } } }) -}
1ca241fc412e12ee3f8e5b4b9b02dc6c
  removePrintStmt1 :: GHC.Base.String {- Strictness: b -}
f283abce0ac93fbe1fd564a0a50c6118
  splitLastCmd :: AS.Types.ASLanguage
                  -> GHC.Base.String
                  -> (GHC.Base.String, GHC.Base.String)
    {- Arity: 2, Strictness: <L,U><L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: AS.Types.ASLanguage w1 :: GHC.Base.String ->
                   case AS.Eval.Lang.$wsplitLastCmd w w1 of ww { (#,#) ww1 ww2 ->
                   (ww1, ww2) }) -}
"SPEC Data.Map.Base.! [AS.Types.ASLocation]" [ALWAYS] forall @ a
                                                             $dOrd :: GHC.Classes.Ord
                                                                          AS.Types.ASLocation
  Data.Map.Base.! @ AS.Types.ASLocation @ a $dOrd
  = AS.Eval.Lang.$s! @ a
"SPEC Data.Map.Base.find [AS.Types.ASLocation]" [ALWAYS] forall @ a
                                                                $dOrd :: GHC.Classes.Ord
                                                                             AS.Types.ASLocation
  Data.Map.Base.find @ AS.Types.ASLocation @ a $dOrd
  = AS.Eval.Lang.$sfind @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

