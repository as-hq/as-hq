
==================== FINAL INTERFACE ====================
2015-09-01 13:16:45.965449 UTC

interface main:Main 7083
  interface hash: ef5ed93f562462c8a54905375aca60d0
  ABI hash: 6726e81e2205eb501cf7185a97aa7256
  export-list hash: 4766cce922d57e5bd20fc19ff5707322
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f6635e399e6770844451e7b796169e00
  used TH splices: False
  where
exports:
  Main.addDaemon
  Main.addToAL
  Main.addUser
  Main.application
  Main.catchDisconnect
  Main.catchDisconnectDaemon
  Main.close
  Main.delFromAL
  Main.getUserById
  Main.getUserOfDaemon
  Main.getUsers
  Main.handleInitConnection
  Main.handleInitConnectionDaemon
  Main.handleMessage
  Main.isInitConnection
  Main.isInitConnectionDaemon
  Main.main
  Main.newServerState
  Main.numUsers
  Main.processMessage
  Main.removeDaemon
  Main.removeUser
  Main.send
  Main.talk
  Main.talkDaemon
  Main.userIdExists
module dependencies:
package dependencies: BoundedChan-1.0.3.0 SHA-1.6.4.2 aeson-0.8.1.1
                      alphasheets-0.1.0.0 array-0.5.0.0 attoparsec-0.13.0.1 base
                      base64-bytestring-1.0.0.1 binary-0.7.1.0 blaze-builder-0.4.0.1
                      bytestring-0.10.4.0 bytestring-lexing-0.5.0.2
                      case-insensitive-1.2.0.4 cereal-0.4.1.1 containers-0.5.5.1
                      crypto-api-0.13.2 daemons-0.2.1 data-default-0.5.3
                      data-default-class-0.0.1 data-default-instances-base-0.0.1
                      data-default-instances-containers-0.0.1
                      data-default-instances-dlist-0.0.1
                      data-default-instances-old-locale-0.0.1 deepseq-1.3.0.2
                      directory-1.2.2.1 dlist-0.7.1.1 entropy-0.3.7 filepath-1.3.0.2
                      ghc-prim hashable-1.2.3.3 hedis-0.6.8 integer-gmp
                      monad-control-1.0.0.4 monad-loops-0.4.3 mtl-2.2.1 network-2.6.2.1
                      old-locale-1.0.0.6 parsec-3.1.9 pretty-1.1.1.1 primitive-0.5.2.1
                      process-1.2.3.0 pureMD5-2.1.2.1 pyfi-0.4.0.4 random-1.1
                      regex-base-0.93.2 regex-posix-0.95.2 resource-pool-0.2.3.2
                      scientific-0.3.3.8 split-0.2.2 stm-2.4.2 strict-0.3.2 tagged-0.8.1
                      template-haskell text-1.2.1.1 time-1.5.0.1 transformers-0.4.3.0
                      transformers-base-0.4.4 unix-2.7.1.0 unordered-containers-0.2.5.1
                      vector-0.10.9.1 websockets-0.9.5.0
orphans: aeson-0.8.1.1:Data.Aeson.Types.Generic
         aeson-0.8.1.1:Data.Aeson.Types.Instances
         aeson-0.8.1.1:Data.Aeson.Types.Internal alphasheets-0.1.0.0:AS.DAG
         alphasheets-0.1.0.0:AS.Dispatch alphasheets-0.1.0.0:AS.Eval.Lang
         alphasheets-0.1.0.0:AS.Parsing.In
         attoparsec-0.13.0.1:Data.Attoparsec.ByteString.Char8 base:GHC.Base
         base:GHC.Float base:GHC.Real binary-0.7.1.0:Data.Binary.Generic
         bytestring-0.10.4.0:Data.ByteString.Builder
         bytestring-lexing-0.5.0.2:Data.ByteString.Lex.Fractional
         crypto-api-0.13.2:Crypto.Classes crypto-api-0.13.2:Crypto.Random
         data-default-instances-base-0.0.1:Data.Default.Instances.Base
         data-default-instances-containers-0.0.1:Data.Default.Instances.Containers
         data-default-instances-dlist-0.0.1:Data.Default.Instances.DList
         data-default-instances-old-locale-0.0.1:Data.Default.Instances.OldLocale
         hashable-1.2.3.3:Data.Hashable.Generic
         network-2.6.2.1:Network.Socket network-2.6.2.1:Network.Socket.Types
         pyfi-0.4.0.4:Python random-1.1:System.Random
         regex-base-0.93.2:Text.Regex.Base.Context
         regex-posix-0.95.2:Text.Regex.Posix.ByteString
         regex-posix-0.95.2:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2:Text.Regex.Posix.Sequence
         regex-posix-0.95.2:Text.Regex.Posix.String
         resource-pool-0.2.3.2:Data.Pool stm-2.4.2:Control.Monad.STM
         template-haskell:Language.Haskell.TH.PprLib text-1.2.1.1:Data.Text
         text-1.2.1.1:Data.Text.Lazy text-1.2.1.1:Data.Text.Show
         time-1.5.0.1:Data.Time.Calendar.Gregorian
         time-1.5.0.1:Data.Time.Format.Parse
         time-1.5.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.4.3.0:Control.Monad.Trans.Error
         vector-0.10.9.1:Data.Vector.Fusion.Stream
         vector-0.10.9.1:Data.Vector.Unboxed
family instance modules: alphasheets-0.1.0.0:AS.Types
                         attoparsec-0.13.0.1:Data.Attoparsec.Internal.Types
                         base:Control.Applicative base:Data.Either base:Data.Monoid
                         base:Data.Type.Equality base:GHC.Exts base:GHC.Generics
                         dlist-0.7.1.1:Data.DList
                         monad-control-1.0.0.4:Control.Monad.Trans.Control
                         primitive-0.5.2.1:Control.Monad.Primitive tagged-0.8.1:Data.Tagged
                         text-1.2.1.1:Data.Text text-1.2.1.1:Data.Text.Lazy
                         unordered-containers-0.2.5.1:Data.HashMap.Base
                         unordered-containers-0.2.5.1:Data.HashSet
                         vector-0.10.9.1:Data.Vector vector-0.10.9.1:Data.Vector.Primitive
                         vector-0.10.9.1:Data.Vector.Storable
                         vector-0.10.9.1:Data.Vector.Unboxed.Base
import  -/  aeson-0.8.1.1:Data.Aeson 2bcee634dc715d12e7154aed92c42567
import  -/  aeson-0.8.1.1:Data.Aeson.Encode.ByteString 04b640ac3757997bdf0ec42533e6bf2d
import  -/  alphasheets-0.1.0.0:AS.Config.Settings c714dbd1b9c0005273b28e2e1c0acee4
import  -/  alphasheets-0.1.0.0:AS.DB b103d865f4ec53f55246735818175d83
import  -/  alphasheets-0.1.0.0:AS.Handler 587fea7850457b515d58c2d96946ad7b
import  -/  alphasheets-0.1.0.0:AS.Types 17df67c7fb5c4274434b135ecca2fd18
import  -/  alphasheets-0.1.0.0:AS.Util 0185a4712dd060392a6127df94835923
import  -/  base:Control.Concurrent 1be25cd1e2ac314074fafb26df0ff06b
import  -/  base:Control.Concurrent.MVar 47f6cad20e8acd25bbaa337e785e68f9
import  -/  base:Control.Exception 7d63ae88211a26e1cc154f7ca3a7313a
import  -/  base:Control.Exception.Base 9ef98277d024bfe7aa9db866724676f1
import  -/  base:Control.Monad 483e787e07c2e49f1fb1c1b88665cb92
import  -/  base:Data.Char 1ace810ea04187cd227c9ed982bb7d15
import  -/  base:Data.List 0908c8f6208710e0f918cb6f09e882cc
import  -/  base:Data.Maybe 5034d40e23c3a7110309f188001df4ca
import  -/  base:Data.Monoid fecb05e81c4e24b7968c0c4de9557077
import  -/  base:Data.Tuple cac4e06c48274e85317bd3e59867ef5b
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:GHC.Exception a293a91a9633ed37799c62ca0fb2dade
import  -/  base:GHC.List 4cff382327e59a5787355ca0a4174450
import  -/  base:GHC.MVar 2c9d76ed3707c435c49b694504d09491
import  -/  base:GHC.Show cf1a7ff9edb0f41528085aad04d33753
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  base:System.IO cadd0efb01c47ddd8f52d750739fdbdf
import  -/  bytestring-0.10.4.0:Data.ByteString.Char8 6ba74203c82670d222b910afbd6fa1a4
import  -/  bytestring-0.10.4.0:Data.ByteString.Lazy.Char8 a118adac239daed5c4f03b800d5d3693
import  -/  bytestring-0.10.4.0:Data.ByteString.Lazy.Internal 9dc368e875062ea4b9b9d8b5cfe6be92
import  -/  ghc-prim:GHC.Classes 3e6cbe1e7e80480408cfa8d5450726a0
import  -/  ghc-prim:GHC.Types dcba736fa3dfba12d307ab18354845d2
import  -/  text-1.2.1.1:Data.Text b3c4fa3023eabdced6a311d2fdbd8c54
import  -/  text-1.2.1.1:Data.Text.IO 4fed59515c6adf3b8e249dd22b5b5fda
import  -/  text-1.2.1.1:Data.Text.Internal 5c7132affaaf11c5fb226a9fff83be01
import  -/  transformers-0.4.3.0:Control.Monad.IO.Class 1fe01dea961eadb0b037d705f6cb22bb
import  -/  websockets-0.9.5.0:Network.WebSockets c11cd6465abe4dc4c3ad51897e46aaa0
import  -/  websockets-0.9.5.0:Network.WebSockets.Connection c61c2e729312f1454ad297f2f5f52374
import  -/  websockets-0.9.5.0:Network.WebSockets.Server a8a3a6a9fb7e9a5880f2cc22d63a96a9
import  -/  websockets-0.9.5.0:Network.WebSockets.Types 4a5a63640f670d5554f3ffeee680a6fe
d57c2b1edb7735d647be1d3f157dfbe1
  $wa :: GHC.MVar.MVar AS.Types.ServerState
         -> GHC.Types.IO ()
         -> Data.ByteString.Internal.ByteString
         -> Network.WebSockets.Http.Headers
         -> GHC.Types.Bool
         -> (Network.WebSockets.Connection.Connection -> GHC.Types.IO ())
         -> GHC.Types.IO
                (Data.Maybe.Maybe Data.ByteString.Internal.ByteString)
         -> (Data.Maybe.Maybe Data.ByteString.Lazy.Internal.ByteString
             -> GHC.Types.IO ())
         -> GHC.Prim.MutVar#
                GHC.Prim.RealWorld Network.WebSockets.Stream.StreamState
         -> GHC.Prim.State# GHC.Prim.RealWorld
         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 10,
       Strictness: <L,U(U)><S,U><S,U><S,U><L,U><S,C(C1(U(U,A)))><L,C(U(U,1*U))><C(C(S)),C(C1(U(U,U)))><L,U><L,U> -}
17cfbaf40fc9f305e372019d252a6876
  $wa1 :: AS.Types.ASUser
          -> [(AS.Types.ASUser, [AS.Types.ASDaemon])]
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ServerState #)
    {- Arity: 3, Strictness: <L,U(U(U,U,U),U,U)><S,U><L,U>,
       Unfolding: (\ w :: AS.Types.ASUser
                     ww :: [(AS.Types.ASUser, [AS.Types.ASDaemon])]
                     w1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case GHC.List.lookup
                          @ AS.Types.ASUser
                          @ [AS.Types.ASDaemon]
                          AS.Types.$fEqASUser
                          w
                          ww of wild {
                     Data.Maybe.Nothing -> (# w1, AS.Types.State ww #)
                     Data.Maybe.Just d
                     -> case Main.catchDisconnect3 d w1 of ds1 { (#,#) ipv ipv1 ->
                        (# ipv,
                           AS.Types.State
                             (Main.addDaemon_$sdelFromAL @ [AS.Types.ASDaemon] ww w) #) } }) -}
e0cced46c37cde14013304735b685a38
  $wa2 :: GHC.MVar.MVar AS.Types.ServerState
          -> AS.Types.ASUserId
          -> GHC.Types.IO ()
          -> Network.WebSockets.Types.ConnectionType
          -> GHC.Types.IO (Data.Maybe.Maybe Network.WebSockets.Types.Message)
          -> (Network.WebSockets.Types.Message -> GHC.Types.IO ())
          -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Bool
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 8,
       Strictness: <L,U(U)><L,U(U,U,U)><S,C(U(U,A))><S,H><C(S(LS)),C(U(U,1*U))><S,C(C1(U(U,U)))><L,U><L,U> -}
13aae21a6e7365a131c7ab027e18e1e6
  $wa3 :: GHC.MVar.MVar AS.Types.ServerState
          -> AS.Types.ASLocation
          -> GHC.Types.IO ()
          -> Network.WebSockets.Types.ConnectionType
          -> GHC.Types.IO (Data.Maybe.Maybe Network.WebSockets.Types.Message)
          -> (Network.WebSockets.Types.Message -> GHC.Types.IO ())
          -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Bool
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 8,
       Strictness: <L,U(U)><L,U><S,U><S,U><C(S(LS)),U><S,U><L,U><L,U> -}
0d1dbd4394bf42772dd060710df9a7d4
  $wa4 :: AS.Types.ASUser
          -> GHC.MVar.MVar AS.Types.ServerState
          -> AS.Types.ASUserId
          -> AS.Types.ASAction
          -> AS.Types.ASResult
          -> AS.Types.ASPayload
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 7,
       Strictness: <L,U(U(U,U,U),1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A),A)><L,U(U)><L,U(U,U,U)><S,U><L,U><L,U><L,U>,
       Unfolding: (\ w :: AS.Types.ASUser
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     ww :: AS.Types.ASUserId
                     ww1 :: AS.Types.ASAction
                     ww2 :: AS.Types.ASResult
                     ww3 :: AS.Types.ASPayload
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ww1 of wild {
                     DEFAULT
                     -> case Main.handleMessage8
                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        of {}
                     AS.Types.Acknowledge
                     -> case w of wild1 { AS.Types.User ds1 ds2 ds3 ->
                        case ds2 of wild2 { Network.WebSockets.Connection.Connection dt ds ds4 ds5 dt1 ->
                        (ds5 Main.handleMessage4) `cast` (GHC.Types.NTCo:IO[0] <()>_R)
                          w2 } }
                     AS.Types.Evaluate
                     -> AS.Handler.handleEval1
                          w
                          w1
                          (AS.Types.Message ww AS.Types.Evaluate ww2 ww3)
                          w2
                     AS.Types.Get
                     -> case ww3 of wild1 {
                          DEFAULT
                          -> case AS.Handler.handleGet4
                             ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                             of {}
                          AS.Types.PayloadLL locs
                          -> case w of ww4 { AS.Types.User ww5 ww6 ww7 ->
                             case ww6 of ww8 { Network.WebSockets.Connection.Connection ww9 ww10 ww11 ww12 ww13 ->
                             (ww12
                                (Network.WebSockets.Types.DataMessage
                                   (Network.WebSockets.Types.Text
                                      (Data.ByteString.Builder.toLazyByteString
                                         (case AS.Types.$w$ctoJSON4
                                                 ww5
                                                 AS.Types.Get
                                                 AS.Types.Success
                                                 AS.Handler.handleGet2 of ww14 { (##) ww15 ->
                                          Data.Aeson.Encode.ByteString.encodeToByteStringBuilder
                                            (Data.Aeson.Types.Internal.Object ww15) })))))
                               `cast`
                             (GHC.Types.NTCo:IO[0] <()>_R)
                               w2 } } }
                     AS.Types.Delete -> AS.Handler.handleDelete1 w w1 ww3 w2
                     AS.Types.Undo
                     -> case AS.Handler.handleUndo1 w w1 w2 of ds1 { (#,#) ipv ipv1 ->
                        AS.Util.printTimed1 Main.handleMessage3 ipv }
                     AS.Types.Redo
                     -> case AS.Handler.handleRedo1 w w1 w2 of ds1 { (#,#) ipv ipv1 ->
                        AS.Util.printTimed1 Main.handleMessage2 ipv }
                     AS.Types.Clear -> AS.Handler.handleClear1 w w1 w2
                     AS.Types.AddTags -> AS.Handler.$wa2 w w1 ww ww3 w2
                     AS.Types.RemoveTags -> AS.Handler.$wa7 w w1 ww3 w2 }) -}
81e959942e4cff35e80639ba1bed1c26
  $wa5 :: AS.Types.ASUser
          -> GHC.MVar.MVar AS.Types.ServerState
          -> AS.Types.ASUserId
          -> AS.Types.ASAction
          -> AS.Types.ASResult
          -> AS.Types.ASPayload
          -> GHC.Prim.State# GHC.Prim.RealWorld
          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 7,
       Strictness: <L,U(U(U,U,U),U(H,H,H,C(C1(U(U,U))),A),A)><L,U(U)><L,U(U,U,U)><L,U><L,U><S,U><L,U>,
       Unfolding: (\ w :: AS.Types.ASUser
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     ww :: AS.Types.ASUserId
                     ww1 :: AS.Types.ASAction
                     ww2 :: AS.Types.ASResult
                     ww3 :: AS.Types.ASPayload
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   let {
                     $j :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> GHC.Types.Bool
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                       {- Arity: 2, Strictness: <L,U><S,1*U> -}
                     = \ ipv :: GHC.Prim.State# GHC.Prim.RealWorld
                         ipv1 :: GHC.Types.Bool ->
                       case ipv1 of wild {
                         GHC.Types.False
                         -> case w of wild1 { AS.Types.User ds1 ds2 ds3 ->
                            case ds2 of wild2 { Network.WebSockets.Connection.Connection dt ds ds4 ds5 dt1 ->
                            (ds5 Main.processMessage2) `cast` (GHC.Types.NTCo:IO[0] <()>_R)
                              ipv } }
                         GHC.Types.True -> Main.$wa4 w w1 ww ww1 ww2 ww3 ipv }
                   } in
                   case ww3 of wild {
                     DEFAULT
                     -> case AS.DB.isPermissibleMessage2
                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        of {}
                     AS.Types.PayloadC cell
                     -> case w of wild1 { AS.Types.User ds1 ds2 ds3 ->
                        case ds2 of wild2 { Network.WebSockets.Connection.Connection dt ds ds4 ds5 dt1 ->
                        (ds5 Main.processMessage2) `cast` (GHC.Types.NTCo:IO[0] <()>_R)
                          w2 } }
                     AS.Types.PayloadCL cells
                     -> case AS.DB.canAccessAll2
                               (GHC.Base.map
                                  @ AS.Types.ASCell
                                  @ AS.Types.ASLocation
                                  AS.Types.cellLocation
                                  cells)
                               w2 of ds1 { (#,#) ipv ipv1 ->
                        $j
                          ipv
                          (GHC.List.all
                             @ GHC.Types.Bool
                             (GHC.Base.id @ GHC.Types.Bool)
                             ipv1) }
                     AS.Types.PayloadL loc
                     -> case w of wild1 { AS.Types.User ds1 ds2 ds3 ->
                        case ds2 of wild2 { Network.WebSockets.Connection.Connection dt ds ds4 ds5 dt1 ->
                        (ds5 Main.processMessage2) `cast` (GHC.Types.NTCo:IO[0] <()>_R)
                          w2 } }
                     AS.Types.PayloadLL locs
                     -> case AS.DB.canAccessAll2 locs w2 of ds1 { (#,#) ipv ipv1 ->
                        $j
                          ipv
                          (GHC.List.all
                             @ GHC.Types.Bool
                             (GHC.Base.id @ GHC.Types.Bool)
                             ipv1) }
                     AS.Types.PayloadW window
                     -> case w of wild1 { AS.Types.User ds1 ds2 ds3 ->
                        case ds2 of wild2 { Network.WebSockets.Connection.Connection dt ds ds4 ds5 dt1 ->
                        (ds5 Main.processMessage2) `cast` (GHC.Types.NTCo:IO[0] <()>_R)
                          w2 } }
                     AS.Types.PayloadTags ds loc
                     -> case w of wild1 { AS.Types.User ds1 ds2 ds3 ->
                        case ds2 of wild2 { Network.WebSockets.Connection.Connection dt ds4 ds5 ds6 dt1 ->
                        (ds6 Main.processMessage2) `cast` (GHC.Types.NTCo:IO[0] <()>_R)
                          w2 } } }) -}
a1735484b820be5d3a7a7fb0ca69eb82
  $waddDaemon :: AS.Types.ASUserId
                 -> AS.Types.ASDaemon
                 -> [(AS.Types.ASUser, [AS.Types.ASDaemon])]
                 -> (# [(AS.Types.ASUser, [AS.Types.ASDaemon])] #)
    {- Arity: 3, Strictness: <L,U(U,U,U)><L,U><S,U>,
       Unfolding: (\ w :: AS.Types.ASUserId
                     w1 :: AS.Types.ASDaemon
                     ww :: [(AS.Types.ASUser, [AS.Types.ASDaemon])] ->
                   case Main.$wgetUserById w ww of wild {
                     Data.Maybe.Nothing -> (# ww #)
                     Data.Maybe.Just u
                     -> (# GHC.Types.:
                             @ (AS.Types.ASUser, [AS.Types.ASDaemon])
                             (u,
                              GHC.Types.:
                                @ AS.Types.ASDaemon
                                w1
                                (case GHC.List.lookup
                                        @ AS.Types.ASUser
                                        @ [AS.Types.ASDaemon]
                                        AS.Types.$fEqASUser
                                        u
                                        ww of wild1 {
                                   Data.Maybe.Nothing -> Data.Maybe.fromJust1 @ [AS.Types.ASDaemon]
                                   Data.Maybe.Just x -> x }))
                             (Main.addDaemon_$sdelFromAL @ [AS.Types.ASDaemon] ww u) #) }) -}
bf7be00997dc3e49850a57991e0f1245
  $wgetUserById :: AS.Types.ASUserId
                   -> [(AS.Types.ASUser, [AS.Types.ASDaemon])]
                   -> Data.Maybe.Maybe AS.Types.ASUser
    {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U,U,U)><S,1*U>,
       Unfolding: (\ w :: AS.Types.ASUserId
                     ww :: [(AS.Types.ASUser, [AS.Types.ASDaemon])] ->
                   letrec {
                     go :: [(AS.Types.ASUser, [AS.Types.ASDaemon])] -> [AS.Types.ASUser]
                       {- Arity: 1, Strictness: <S,1*U> -}
                     = \ ds :: [(AS.Types.ASUser, [AS.Types.ASDaemon])] ->
                       case ds of wild {
                         [] -> GHC.Types.[] @ AS.Types.ASUser
                         : y ys
                         -> case y of wild1 { (,) x ds1 ->
                            case x of wild2 { AS.Types.User ds2 ds3 ds4 ->
                            case ds2 of wild3 { Data.Text.Internal.Text dt dt1 dt2 ->
                            case w of wild4 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.==# dt2 dt5) of wild5 {
                              GHC.Types.False -> go ys
                              GHC.Types.True
                              -> case {__pkg_ccall text-1.2.1.1 _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                -> GHC.Prim.Word#
                                                                                -> GHC.Prim.ByteArray#
                                                                                -> GHC.Prim.Word#
                                                                                -> GHC.Prim.Word#
                                                                                -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                      GHC.Prim.Int# #)}
                                        dt
                                        (GHC.Prim.int2Word# dt1)
                                        dt3
                                        (GHC.Prim.int2Word# dt4)
                                        (GHC.Prim.int2Word# dt2)
                                        GHC.Prim.realWorld# of wild6 { (#,#) ds11 ds12 ->
                                 case GHC.Prim.narrow32Int# ds12 of wild7 {
                                   DEFAULT -> go ys
                                   0 -> GHC.Types.: @ AS.Types.ASUser wild2 (go ys) } } } } } } } }
                   } in
                   case go ww of wild {
                     [] -> Data.Maybe.Nothing @ AS.Types.ASUser
                     : ipv ipv1 -> Data.Maybe.Just @ AS.Types.ASUser ipv }) -}
82966c409ac768f6d33fe7abf23f9ec5
  $wgetUserOfDaemon :: [(AS.Types.ASUser, [AS.Types.ASDaemon])]
                       -> AS.Types.ASDaemon
                       -> Data.Maybe.Maybe AS.Types.ASUser
    {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
       Unfolding: (\ ww :: [(AS.Types.ASUser, [AS.Types.ASDaemon])]
                     w :: AS.Types.ASDaemon ->
                   case GHC.List.filter
                          @ (AS.Types.ASUser, [AS.Types.ASDaemon])
                          (\ ds :: (AS.Types.ASUser, [AS.Types.ASDaemon]) ->
                           case ds of wild { (,) a4 b ->
                           GHC.List.elem @ AS.Types.ASDaemon AS.Types.$fEqASDaemon w b })
                          ww of wild {
                     [] -> Data.Maybe.Nothing @ AS.Types.ASUser
                     : ipv ipv1
                     -> Data.Maybe.Just
                          @ AS.Types.ASUser
                          (case ipv of wild1 { (,) x ds1 -> x }) }) -}
b06ee0b6a137f254a0b4cd637e759e2f
  $wremoveDaemon :: AS.Types.ASDaemon
                    -> [(AS.Types.ASUser, [AS.Types.ASDaemon])]
                    -> (# [(AS.Types.ASUser, [AS.Types.ASDaemon])] #)
    {- Arity: 2, Strictness: <L,U><S,U>,
       Unfolding: (\ w :: AS.Types.ASDaemon
                     ww :: [(AS.Types.ASUser, [AS.Types.ASDaemon])] ->
                   case GHC.List.filter
                          @ (AS.Types.ASUser, [AS.Types.ASDaemon])
                          (\ ds :: (AS.Types.ASUser, [AS.Types.ASDaemon]) ->
                           case ds of wild { (,) a4 b ->
                           GHC.List.elem @ AS.Types.ASDaemon AS.Types.$fEqASDaemon w b })
                          ww of wild {
                     [] -> (# ww #)
                     : ipv ipv1
                     -> (# let {
                             u :: AS.Types.ASUser = case ipv of wild1 { (,) x ds1 -> x }
                           } in
                           GHC.Types.:
                             @ (AS.Types.ASUser, [AS.Types.ASDaemon])
                             (u,
                              case GHC.List.lookup
                                     @ AS.Types.ASUser
                                     @ [AS.Types.ASDaemon]
                                     AS.Types.$fEqASUser
                                     u
                                     ww of wild1 {
                                Data.Maybe.Nothing
                                -> case Data.Maybe.fromJust1 ret_ty [AS.Types.ASDaemon] of {}
                                Data.Maybe.Just x
                                -> Data.List.deleteBy
                                     @ AS.Types.ASDaemon
                                     AS.Types.$fEqASDaemon_$c==
                                     w
                                     x })
                             (Main.addDaemon_$sdelFromAL @ [AS.Types.ASDaemon] ww u) #) }) -}
03c624e0fe0d15225510d239cfe008e0
  $wuserIdExists :: AS.Types.ASUserId
                    -> [(AS.Types.ASUser, [AS.Types.ASDaemon])]
                    -> GHC.Types.Bool
    {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
       Unfolding: (\ w :: AS.Types.ASUserId
                     ww :: [(AS.Types.ASUser, [AS.Types.ASDaemon])] ->
                   GHC.List.elem
                     @ AS.Types.ASUserId
                     Data.Text.$fEqText
                     w
                     (GHC.Base.map
                        @ (AS.Types.ASUser, [AS.Types.ASDaemon])
                        @ Data.Text.Internal.Text
                        Main.userIdExists1
                        ww)) -}
adf9edc7eaaffacb47b24162826296fa
  addDaemon :: AS.Types.ASUserId
               -> AS.Types.ASDaemon
               -> AS.Types.ServerState
               -> AS.Types.ServerState
    {- Arity: 3, Strictness: <L,U(U,U,U)><L,U><S(S),1*U(U)>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ w :: AS.Types.ASUserId
                     w1 :: AS.Types.ASDaemon
                     w2 :: AS.Types.ServerState ->
                   case w2 of ww { AS.Types.State ww1 ->
                   case Main.$waddDaemon w w1 ww1 of ww2 { (##) ww3 ->
                   AS.Types.State ww3 } }) -}
1df1f213602560dc7501b07ed640bc92
  addDaemon_$sdelFromAL :: [(AS.Types.ASUser, a)]
                           -> AS.Types.ASUser
                           -> [(AS.Types.ASUser, a)]
    {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U(U,U,U),A,A)>,
       Unfolding: (\ @ a4
                     l :: [(AS.Types.ASUser, a4)]
                     key :: AS.Types.ASUser ->
                   GHC.List.filter
                     @ (AS.Types.ASUser, a4)
                     (\ a5 :: (AS.Types.ASUser, a4) ->
                      case a5 of wild { (,) x ds1 ->
                      case x of ww { AS.Types.User ww1 ww2 ww3 ->
                      case ww1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                      case key of ww8 { AS.Types.User ww9 ww10 ww11 ->
                      case ww9 of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww7 ww15) of wild2 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True
                        -> case {__pkg_ccall text-1.2.1.1 _hs_text_memcmp GHC.Prim.ByteArray#
                                                                          -> GHC.Prim.Word#
                                                                          -> GHC.Prim.ByteArray#
                                                                          -> GHC.Prim.Word#
                                                                          -> GHC.Prim.Word#
                                                                          -> GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld
                                                                          -> (# GHC.Prim.State#
                                                                                    GHC.Prim.RealWorld,
                                                                                GHC.Prim.Int# #)}
                                  ww5
                                  (GHC.Prim.int2Word# ww6)
                                  ww13
                                  (GHC.Prim.int2Word# ww14)
                                  (GHC.Prim.int2Word# ww7)
                                  GHC.Prim.realWorld# of wild1 { (#,#) ds11 ds12 ->
                           case GHC.Prim.narrow32Int# ds12 of wild3 {
                             DEFAULT -> GHC.Types.True 0 -> GHC.Types.False } } } } } } } })
                     l) -}
d7ae9b395c6918a807610b1c85e3fd81
  addToAL :: GHC.Classes.Eq key
             -> [(key, elt)]
             -> key
             -> elt
             -> [(key, elt)]
    {- Arity: 4, HasNoCafRefs,
       Strictness: <L,U(A,C(C1(U)))><L,1*U><L,U><L,U>m2,
       Unfolding: InlineRule (4, True, False)
                  (\ @ key
                     @ elt
                     $dEq :: GHC.Classes.Eq key
                     l :: [(key, elt)]
                     key1 :: key
                     value :: elt ->
                   GHC.Types.:
                     @ (key, elt)
                     (key1, value)
                     (Main.delFromAL @ key @ elt $dEq l key1)) -}
da5fae137e2c1e83074861f3f51fc525
  addToAL_$saddToAL :: [(AS.Types.ASUser, elt)]
                       -> AS.Types.ASUser
                       -> elt
                       -> [(AS.Types.ASUser, elt)]
    {- Arity: 3, HasNoCafRefs,
       Strictness: <L,1*U><L,U(U(U,U,U),U,U)><L,U>m2,
       Unfolding: InlineRule (3, True, False)
                  (\ @ elt
                     l :: [(AS.Types.ASUser, elt)]
                     key :: AS.Types.ASUser
                     value :: elt ->
                   GHC.Types.:
                     @ (AS.Types.ASUser, elt)
                     (key, value)
                     (Main.addDaemon_$sdelFromAL @ elt l key)) -}
62afd213f655b131f72ac75daa1a6633
  addUser :: AS.Types.ASUser
             -> AS.Types.ServerState
             -> AS.Types.ServerState
    {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S(S),1*U(U)>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: AS.Types.ASUser w1 :: AS.Types.ServerState ->
                   case w1 of ww { AS.Types.State ww1 ->
                   case GHC.List.lookup
                          @ AS.Types.ASUser
                          @ [AS.Types.ASDaemon]
                          AS.Types.$fEqASUser
                          w
                          ww1 of wild {
                     Data.Maybe.Nothing
                     -> AS.Types.State
                          (GHC.Types.:
                             @ (AS.Types.ASUser, [AS.Types.ASDaemon])
                             (w, GHC.Types.[] @ AS.Types.ASDaemon)
                             ww1)
                     Data.Maybe.Just ds -> AS.Types.State ww1 } }) -}
3e0738f2da0a2cf687b2a4c7799ee998
  application :: GHC.MVar.MVar AS.Types.ServerState
                 -> Network.WebSockets.Server.ServerApp
    {- Arity: 3,
       Strictness: <L,U(U)><S(SS(SSL)SS(LC(C(S))L)),1*U(U,U(U,U,U),C(C1(U(U,A))),U(C(U(U,1*U)),C(C1(U(U,U))),U))><L,U>,
       Unfolding: InlineRule (0, True, True)
                  Main.application1
                    `cast`
                  (<GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R <Network.WebSockets.Connection.PendingConnection>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
8876693a42f42cde31ee336ed3e19de6
  application1 :: GHC.MVar.MVar AS.Types.ServerState
                  -> Network.WebSockets.Connection.PendingConnection
                  -> GHC.Prim.State# GHC.Prim.RealWorld
                  -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3,
       Strictness: <L,U(U)><S(SS(SSL)SS(LC(C(S))L)),1*U(U,U(U,U,U),C(C1(U(U,A))),U(C(U(U,1*U)),C(C1(U(U,U))),U))><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ w :: GHC.MVar.MVar AS.Types.ServerState
                     w1 :: Network.WebSockets.Connection.PendingConnection
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w1 of ww { Network.WebSockets.Connection.PendingConnection ww1 ww2 ww3 ww4 ->
                   case ww2 of ww5 { Network.WebSockets.Http.RequestHead ww6 ww7 ww8 ->
                   case ww4 of ww9 { Network.WebSockets.Stream.Stream ww10 ww11 ww12 ->
                   Main.$wa w ww1 ww6 ww7 ww8 ww3 ww10 ww11 ww12 w2 } } }) -}
1056752b05a70bdb6147a76840e7fd0e
  catchDisconnect :: AS.Types.ASUser
                     -> GHC.MVar.MVar AS.Types.ServerState
                     -> GHC.Exception.SomeException
                     -> GHC.Types.IO ()
    {- Arity: 4, Strictness: <L,U(U(U,U,U),U,U)><L,1*U(U)><S,1*U><L,U>,
       Unfolding: (Main.catchDisconnect1
                     `cast`
                   (<AS.Types.ASUser>_R
                    ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                    ->_R <GHC.Exception.SomeException>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
879d33128b385022fdae9bffd21f610c
  catchDisconnect1 :: AS.Types.ASUser
                      -> GHC.MVar.MVar AS.Types.ServerState
                      -> GHC.Exception.SomeException
                      -> GHC.Prim.State# GHC.Prim.RealWorld
                      -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4, Strictness: <L,U(U(U,U,U),U,U)><L,1*U(U)><S,1*U><L,U>,
       Unfolding: (\ user :: AS.Types.ASUser
                     state :: GHC.MVar.MVar AS.Types.ServerState
                     e :: GHC.Exception.SomeException
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case e of wild { GHC.Exception.SomeException e100 $dException1 e2 ->
                   case (GHC.Exception.$p1Exception @ e100 $dException1)
                          `cast`
                        (Data.Typeable.Internal.NTCo:Typeable[0] <*>_N <e100>_N)
                          (GHC.Prim.proxy#
                             @ *
                             @ e100) of wild1 { Data.Typeable.Internal.TypeRep dt dt1 ds2 ds3 ->
                   let {
                     $wa6 :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                       {- Arity: 1, Strictness: <L,U> -}
                     = \ w :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case GHC.IO.Handle.Text.hPutStr2
                              GHC.IO.Handle.FD.stdout
                              (GHC.Show.showsPrec
                                 @ e100
                                 (GHC.Exception.$p2Exception @ e100 $dException1)
                                 GHC.Show.shows27
                                 e2
                                 (GHC.Types.[] @ GHC.Types.Char))
                              GHC.Types.True
                              w of ds1 { (#,#) ipv ipv1 ->
                       (# ipv, GHC.Tuple.() #) }
                   } in
                   case dt of wild2 {
                     DEFAULT -> $wa6 eta
                     __word 17007926995289865620
                     -> case dt1 of wild3 {
                          DEFAULT -> $wa6 eta
                          __word 7955837496921985965
                          -> case e2
                                    `cast`
                                  (UnivCo representational e100 Network.WebSockets.Types.ConnectionException) of wild4 {
                               DEFAULT
                               -> case GHC.IO.Handle.Text.hPutStr2
                                         GHC.IO.Handle.FD.stdout
                                         (GHC.Show.showsPrec
                                            @ e100
                                            (GHC.Exception.$p2Exception @ e100 $dException1)
                                            GHC.Show.shows27
                                            wild4
                                              `cast`
                                            (UnivCo representational Network.WebSockets.Types.ConnectionException e100)
                                            (GHC.Types.[] @ GHC.Types.Char))
                                         GHC.Types.True
                                         eta of ds1 { (#,#) ipv ipv1 ->
                                  (# ipv, GHC.Tuple.() #) }
                               Network.WebSockets.Types.ConnectionClosed
                               -> case GHC.IO.Handle.Text.hPutStr2
                                         GHC.IO.Handle.FD.stdout
                                         Main.catchDisconnect4
                                         GHC.Types.True
                                         eta of ds1 { (#,#) ipv ipv1 ->
                                  case GHC.Prim.getMaskingState# ipv of ds { (#,#) ipv2 ipv3 ->
                                  case ipv3 of ds4 {
                                    DEFAULT
                                    -> case state of wild5 { GHC.MVar.MVar mvar# ->
                                       case GHC.Prim.takeMVar#
                                              @ GHC.Prim.RealWorld
                                              @ AS.Types.ServerState
                                              mvar#
                                              ipv2 of ds5 { (#,#) ipv4 ipv5 ->
                                       case GHC.Prim.catch#
                                              @ AS.Types.ServerState
                                              @ GHC.Exception.SomeException
                                              (\ eta1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                               Main.catchDisconnect2 user ipv5 eta1)
                                              (\ e1 :: GHC.Exception.SomeException
                                                 eta1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                               case GHC.Prim.putMVar#
                                                      @ GHC.Prim.RealWorld
                                                      @ AS.Types.ServerState
                                                      mvar#
                                                      ipv5
                                                      eta1 of s2# { DEFAULT ->
                                               GHC.Prim.raiseIO#
                                                 @ GHC.Exception.SomeException
                                                 @ AS.Types.ServerState
                                                 e1
                                                 s2# })
                                              ipv4 of ds6 { (#,#) ipv6 ipv7 ->
                                       case GHC.Prim.putMVar#
                                              @ GHC.Prim.RealWorld
                                              @ AS.Types.ServerState
                                              mvar#
                                              ipv7
                                              ipv6 of s2# { DEFAULT ->
                                       (# s2#, GHC.Tuple.() #) } } } }
                                    0
                                    -> GHC.Prim.maskAsyncExceptions#
                                         @ ()
                                         (\ eta1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                          case state of wild5 { GHC.MVar.MVar mvar# ->
                                          case GHC.Prim.takeMVar#
                                                 @ GHC.Prim.RealWorld
                                                 @ AS.Types.ServerState
                                                 mvar#
                                                 eta1 of ds5 { (#,#) ipv4 ipv5 ->
                                          case GHC.Prim.catch#
                                                 @ AS.Types.ServerState
                                                 @ GHC.Exception.SomeException
                                                 (GHC.Prim.unmaskAsyncExceptions#
                                                    @ AS.Types.ServerState
                                                    (\ eta2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                                     Main.catchDisconnect2 user ipv5 eta2))
                                                 (\ e1 :: GHC.Exception.SomeException
                                                    eta2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                                  case GHC.Prim.putMVar#
                                                         @ GHC.Prim.RealWorld
                                                         @ AS.Types.ServerState
                                                         mvar#
                                                         ipv5
                                                         eta2 of s2# { DEFAULT ->
                                                  GHC.Prim.raiseIO#
                                                    @ GHC.Exception.SomeException
                                                    @ AS.Types.ServerState
                                                    e1
                                                    s2# })
                                                 ipv4 of ds6 { (#,#) ipv6 ipv7 ->
                                          case GHC.Prim.putMVar#
                                                 @ GHC.Prim.RealWorld
                                                 @ AS.Types.ServerState
                                                 mvar#
                                                 ipv7
                                                 ipv6 of s2# { DEFAULT ->
                                          (# s2#, GHC.Tuple.() #) } } } })
                                         ipv2 } } } } } } } }) -}
b0d2993b517c2967c7d147215c266551
  catchDisconnect2 :: AS.Types.ASUser
                      -> AS.Types.ServerState
                      -> GHC.Prim.State# GHC.Prim.RealWorld
                      -> (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ServerState #)
    {- Arity: 3, Strictness: <L,U(U(U,U,U),U,U)><S(S),1*U(U)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ w :: AS.Types.ASUser
                     w1 :: AS.Types.ServerState
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w1 of ww { AS.Types.State ww1 -> Main.$wa1 w ww1 w2 }) -}
5de8cd0d22c7d6ed58f8414fa592fc34
  catchDisconnect3 :: [AS.Types.ASDaemon]
                      -> GHC.Prim.State# GHC.Prim.RealWorld
                      -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 2, Strictness: <S,1*U><L,U> -}
10e00c4de1e1596dd1d7d3ea224cc419
  catchDisconnect4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "in connection closed catch"#) -}
3607c35397c5b8fc0940eef46b1585fe
  catchDisconnectDaemon :: AS.Types.ASDaemon
                           -> GHC.MVar.MVar AS.Types.ServerState
                           -> GHC.Exception.SomeException
                           -> GHC.Types.IO ()
    {- Arity: 4, Strictness: <L,U><L,1*U(U)><S,1*U><L,U>,
       Unfolding: (Main.catchDisconnectDaemon1
                     `cast`
                   (<AS.Types.ASDaemon>_R
                    ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                    ->_R <GHC.Exception.SomeException>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
62fbde6298952187861f902142e1acc3
  catchDisconnectDaemon1 :: AS.Types.ASDaemon
                            -> GHC.MVar.MVar AS.Types.ServerState
                            -> GHC.Exception.SomeException
                            -> GHC.Prim.State# GHC.Prim.RealWorld
                            -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4, Strictness: <L,U><L,1*U(U)><S,1*U><L,U>,
       Unfolding: (\ daemon :: AS.Types.ASDaemon
                     state :: GHC.MVar.MVar AS.Types.ServerState
                     e :: GHC.Exception.SomeException
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case e of wild { GHC.Exception.SomeException e100 $dException1 e2 ->
                   case (GHC.Exception.$p1Exception @ e100 $dException1)
                          `cast`
                        (Data.Typeable.Internal.NTCo:Typeable[0] <*>_N <e100>_N)
                          (GHC.Prim.proxy#
                             @ *
                             @ e100) of wild1 { Data.Typeable.Internal.TypeRep dt dt1 ds2 ds3 ->
                   let {
                     $wa6 :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                       {- Arity: 1, Strictness: <L,U> -}
                     = \ w :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case GHC.IO.Handle.Text.hPutStr2
                              GHC.IO.Handle.FD.stdout
                              (GHC.Show.showsPrec
                                 @ e100
                                 (GHC.Exception.$p2Exception @ e100 $dException1)
                                 GHC.Show.shows27
                                 e2
                                 (GHC.Types.[] @ GHC.Types.Char))
                              GHC.Types.True
                              w of ds1 { (#,#) ipv ipv1 ->
                       (# ipv, GHC.Tuple.() #) }
                   } in
                   case dt of wild2 {
                     DEFAULT -> $wa6 eta
                     __word 17007926995289865620
                     -> case dt1 of wild3 {
                          DEFAULT -> $wa6 eta
                          __word 7955837496921985965
                          -> case e2
                                    `cast`
                                  (UnivCo representational e100 Network.WebSockets.Types.ConnectionException) of wild4 {
                               DEFAULT
                               -> case GHC.IO.Handle.Text.hPutStr2
                                         GHC.IO.Handle.FD.stdout
                                         (GHC.Show.showsPrec
                                            @ e100
                                            (GHC.Exception.$p2Exception @ e100 $dException1)
                                            GHC.Show.shows27
                                            wild4
                                              `cast`
                                            (UnivCo representational Network.WebSockets.Types.ConnectionException e100)
                                            (GHC.Types.[] @ GHC.Types.Char))
                                         GHC.Types.True
                                         eta of ds1 { (#,#) ipv ipv1 ->
                                  (# ipv, GHC.Tuple.() #) }
                               Network.WebSockets.Types.ConnectionClosed
                               -> case GHC.IO.Handle.Text.hPutStr2
                                         GHC.IO.Handle.FD.stdout
                                         Main.catchDisconnectDaemon2
                                         GHC.Types.True
                                         eta of ds1 { (#,#) ipv ipv1 ->
                                  case GHC.Prim.getMaskingState# ipv of ds { (#,#) ipv2 ipv3 ->
                                  case ipv3 of ds4 {
                                    DEFAULT
                                    -> case state of wild5 { GHC.MVar.MVar mvar# ->
                                       case GHC.Prim.takeMVar#
                                              @ GHC.Prim.RealWorld
                                              @ AS.Types.ServerState
                                              mvar#
                                              ipv2 of ds5 { (#,#) ipv4 ipv5 ->
                                       case GHC.Prim.catch#
                                              @ AS.Types.ServerState
                                              @ GHC.Exception.SomeException
                                              (\ s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                               (# s, Main.removeDaemon daemon ipv5 #))
                                              (\ e1 :: GHC.Exception.SomeException
                                                 eta1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                               case GHC.Prim.putMVar#
                                                      @ GHC.Prim.RealWorld
                                                      @ AS.Types.ServerState
                                                      mvar#
                                                      ipv5
                                                      eta1 of s2# { DEFAULT ->
                                               GHC.Prim.raiseIO#
                                                 @ GHC.Exception.SomeException
                                                 @ AS.Types.ServerState
                                                 e1
                                                 s2# })
                                              ipv4 of ds6 { (#,#) ipv6 ipv7 ->
                                       case GHC.Prim.putMVar#
                                              @ GHC.Prim.RealWorld
                                              @ AS.Types.ServerState
                                              mvar#
                                              ipv7
                                              ipv6 of s2# { DEFAULT ->
                                       (# s2#, GHC.Tuple.() #) } } } }
                                    0
                                    -> GHC.Prim.maskAsyncExceptions#
                                         @ ()
                                         (\ eta1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                          case state of wild5 { GHC.MVar.MVar mvar# ->
                                          case GHC.Prim.takeMVar#
                                                 @ GHC.Prim.RealWorld
                                                 @ AS.Types.ServerState
                                                 mvar#
                                                 eta1 of ds5 { (#,#) ipv4 ipv5 ->
                                          case GHC.Prim.catch#
                                                 @ AS.Types.ServerState
                                                 @ GHC.Exception.SomeException
                                                 (GHC.Prim.unmaskAsyncExceptions#
                                                    @ AS.Types.ServerState
                                                    (\ s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                                     (# s, Main.removeDaemon daemon ipv5 #)))
                                                 (\ e1 :: GHC.Exception.SomeException
                                                    eta2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                                  case GHC.Prim.putMVar#
                                                         @ GHC.Prim.RealWorld
                                                         @ AS.Types.ServerState
                                                         mvar#
                                                         ipv5
                                                         eta2 of s2# { DEFAULT ->
                                                  GHC.Prim.raiseIO#
                                                    @ GHC.Exception.SomeException
                                                    @ AS.Types.ServerState
                                                    e1
                                                    s2# })
                                                 ipv4 of ds6 { (#,#) ipv6 ipv7 ->
                                          case GHC.Prim.putMVar#
                                                 @ GHC.Prim.RealWorld
                                                 @ AS.Types.ServerState
                                                 mvar#
                                                 ipv7
                                                 ipv6 of s2# { DEFAULT ->
                                          (# s2#, GHC.Tuple.() #) } } } })
                                         ipv2 } } } } } } } }) -}
6abce86c2119a51c538bd173e25930b9
  catchDisconnectDaemon2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "in connection closed catch daemon"#) -}
f1fd6a6f5a420174cbee413ae8918a1e
  close :: Network.WebSockets.Connection.Connection
           -> GHC.Types.IO ()
    {- Arity: 2,
       Strictness: <S(SSSC(C(S))L),1*U(1*H,1*H,1*H,C1(C1(U(U,U))),U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  Main.close1
                    `cast`
                  (<Network.WebSockets.Connection.Connection>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
4881087de90499fab9d01b513200264d
  close1 :: Network.WebSockets.Connection.Connection
            -> GHC.Prim.State# GHC.Prim.RealWorld
            -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 2,
       Strictness: <S(SSSC(C(S))L),1*U(1*H,1*H,1*H,C1(C1(U(U,U))),U)><L,U>,
       Unfolding: InlineRule (2, True, False)
                  (\ conn :: Network.WebSockets.Connection.Connection
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case conn of wild { Network.WebSockets.Connection.Connection dt ds ds1 ds2 dt1 ->
                   case GHC.Prim.writeMutVar#
                          @ GHC.Prim.RealWorld
                          @ GHC.Types.Bool
                          dt1
                          GHC.Types.True
                          eta of s2# { DEFAULT ->
                   (ds2
                      (Network.WebSockets.Types.ControlMessage
                         (Network.WebSockets.Types.Close
                            Network.WebSockets.Connection.sendClose2
                            (Network.WebSockets.Types.$fWebSocketsDataText_$ctoLazyByteString
                               Main.close2))))
                     `cast`
                   (GHC.Types.NTCo:IO[0] <()>_R)
                     s2# } }) -}
6c4f36c57ad1923412c54d6212de2b99
  close2 :: Data.Text.Internal.Text
    {- Unfolding: (Data.Text.Show.unpackCString# "Bye"#) -}
3a7c90fc0fba05cf418b46a75cab3e34
  delFromAL :: GHC.Classes.Eq key -> [(key, a)] -> key -> [(key, a)]
    {- Arity: 3, HasNoCafRefs,
       Strictness: <L,U(A,C(C1(U)))><S,1*U><L,U>,
       Unfolding: (\ @ key
                     @ a4
                     $dEq :: GHC.Classes.Eq key
                     l :: [(key, a4)]
                     key1 :: key ->
                   GHC.List.filter
                     @ (key, a4)
                     (\ a5 :: (key, a4) ->
                      GHC.Classes./=
                        @ key
                        $dEq
                        (case a5 of wild { (,) x ds1 -> x })
                        key1)
                     l) -}
4ab6df761be40ee3fc6a9b149b206b32
  getUserById :: AS.Types.ASUserId
                 -> AS.Types.ServerState
                 -> Data.Maybe.Maybe AS.Types.ASUser
    {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U,U,U)><S(S),1*U(1*U)>,
       Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: AS.Types.ASUserId w1 :: AS.Types.ServerState ->
                   case w1 of ww { AS.Types.State ww1 ->
                   Main.$wgetUserById w ww1 }) -}
703e2faedf1d85bff6c84aed9f076a60
  getUserOfDaemon :: AS.Types.ServerState
                     -> AS.Types.ASDaemon
                     -> Data.Maybe.Maybe AS.Types.ASUser
    {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(1*U)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: AS.Types.ServerState w1 :: AS.Types.ASDaemon ->
                   case w of ww { AS.Types.State ww1 ->
                   Main.$wgetUserOfDaemon ww1 w1 }) -}
cd771367c3978a79951592fab3f17279
  getUsers :: AS.Types.ServerState -> [AS.Types.ASUser]
    {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: AS.Types.ServerState ->
                   case ds of wild { AS.Types.State s ->
                   GHC.Base.build
                     @ AS.Types.ASUser
                     (\ @ b1 c :: AS.Types.ASUser -> b1 -> b1 n :: b1 ->
                      GHC.Base.foldr
                        @ (AS.Types.ASUser, [AS.Types.ASDaemon])
                        @ b1
                        (GHC.Base.mapFB
                           @ AS.Types.ASUser
                           @ b1
                           @ (AS.Types.ASUser, [AS.Types.ASDaemon])
                           c
                           (Data.Tuple.fst @ AS.Types.ASUser @ [AS.Types.ASDaemon]))
                        n
                        s) }) -}
c0c71f7d4a98da76a793441296d20b50
  handleInitConnection :: GHC.MVar.MVar AS.Types.ServerState
                          -> Network.WebSockets.Connection.Connection
                          -> Data.Maybe.Maybe AS.Types.ASMessage
                          -> GHC.Types.IO ()
    {- Arity: 4, Strictness: <L,U(U)><L,U><S,1*U><L,U>,
       Unfolding: (Main.handleInitConnection1
                     `cast`
                   (<GHC.MVar.MVar AS.Types.ServerState>_R
                    ->_R <Network.WebSockets.Connection.Connection>_R
                    ->_R <Data.Maybe.Maybe AS.Types.ASMessage>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
ef3eb43b45a2ffad8540da0030cc457f
  handleInitConnection1 :: GHC.MVar.MVar AS.Types.ServerState
                           -> Network.WebSockets.Connection.Connection
                           -> Data.Maybe.Maybe AS.Types.ASMessage
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4, Strictness: <L,U(U)><L,U><S,1*U><L,U>,
       Unfolding: (\ state :: GHC.MVar.MVar AS.Types.ServerState
                     conn :: Network.WebSockets.Connection.Connection
                     ds :: Data.Maybe.Maybe AS.Types.ASMessage
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ds of wild {
                     Data.Maybe.Nothing
                     -> case Main.handleInitConnection4
                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        of {}
                     Data.Maybe.Just message
                     -> let {
                          a4 :: AS.Types.ASUserId
                          = case message of wild1 { AS.Types.Message ds1 ds2 ds3 ds4 -> ds1 }
                        } in
                        let {
                          user :: AS.Types.ASUser {- Strictness: m -}
                          = AS.Types.User a4 conn Main.handleInitConnection3
                        } in
                        GHC.Prim.catch#
                          @ ()
                          @ GHC.Exception.SomeException
                          (\ s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                           case GHC.IO.Handle.Text.hPutStr2
                                  GHC.IO.Handle.FD.stdout
                                  Main.handleInitConnection2
                                  GHC.Types.True
                                  s of ds1 { (#,#) ipv ipv1 ->
                           case GHC.Prim.getMaskingState# ipv of ds2 { (#,#) ipv2 ipv3 ->
                           case ipv3 of ds3 {
                             DEFAULT
                             -> case state of wild1 { GHC.MVar.MVar mvar# ->
                                case GHC.Prim.takeMVar#
                                       @ GHC.Prim.RealWorld
                                       @ AS.Types.ServerState
                                       mvar#
                                       ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                                case GHC.Prim.catch#
                                       @ AS.Types.ServerState
                                       @ GHC.Exception.SomeException
                                       (\ s1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                        (# s1,
                                           case ipv5 of ww { AS.Types.State ww1 ->
                                           case GHC.List.lookup
                                                  @ AS.Types.ASUser
                                                  @ [AS.Types.ASDaemon]
                                                  AS.Types.$fEqASUser
                                                  user
                                                  ww1 of wild2 {
                                             Data.Maybe.Nothing
                                             -> AS.Types.State
                                                  (GHC.Types.:
                                                     @ (AS.Types.ASUser, [AS.Types.ASDaemon])
                                                     (user, GHC.Types.[] @ AS.Types.ASDaemon)
                                                     ww1)
                                             Data.Maybe.Just ds5 -> ww } } #))
                                       (\ e1 :: GHC.Exception.SomeException
                                          eta1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                        case GHC.Prim.putMVar#
                                               @ GHC.Prim.RealWorld
                                               @ AS.Types.ServerState
                                               mvar#
                                               ipv5
                                               eta1 of s2# { DEFAULT ->
                                        GHC.Prim.raiseIO#
                                          @ GHC.Exception.SomeException
                                          @ AS.Types.ServerState
                                          e1
                                          s2# })
                                       ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                                case GHC.Prim.putMVar#
                                       @ GHC.Prim.RealWorld
                                       @ AS.Types.ServerState
                                       mvar#
                                       ipv7
                                       ipv6 of s2# { DEFAULT ->
                                case conn of ww { Network.WebSockets.Connection.Connection ww1 ww2 ww3 ww4 ww5 ->
                                Main.$wa2 wild1 a4 ww1 ww2 ww3 ww4 ww5 s2# } } } } }
                             0
                             -> case GHC.Prim.maskAsyncExceptions#
                                       @ ()
                                       (\ eta1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                        case state of wild1 { GHC.MVar.MVar mvar# ->
                                        case GHC.Prim.takeMVar#
                                               @ GHC.Prim.RealWorld
                                               @ AS.Types.ServerState
                                               mvar#
                                               eta1 of ds4 { (#,#) ipv4 ipv5 ->
                                        case GHC.Prim.catch#
                                               @ AS.Types.ServerState
                                               @ GHC.Exception.SomeException
                                               (GHC.Prim.unmaskAsyncExceptions#
                                                  @ AS.Types.ServerState
                                                  (\ s1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                                   (# s1,
                                                      case ipv5 of ww { AS.Types.State ww1 ->
                                                      case GHC.List.lookup
                                                             @ AS.Types.ASUser
                                                             @ [AS.Types.ASDaemon]
                                                             AS.Types.$fEqASUser
                                                             user
                                                             ww1 of wild2 {
                                                        Data.Maybe.Nothing
                                                        -> AS.Types.State
                                                             (GHC.Types.:
                                                                @ (AS.Types.ASUser,
                                                                   [AS.Types.ASDaemon])
                                                                (user,
                                                                 GHC.Types.[] @ AS.Types.ASDaemon)
                                                                ww1)
                                                        Data.Maybe.Just ds5 -> ww } } #)))
                                               (\ e1 :: GHC.Exception.SomeException
                                                  eta2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                                case GHC.Prim.putMVar#
                                                       @ GHC.Prim.RealWorld
                                                       @ AS.Types.ServerState
                                                       mvar#
                                                       ipv5
                                                       eta2 of s2# { DEFAULT ->
                                                GHC.Prim.raiseIO#
                                                  @ GHC.Exception.SomeException
                                                  @ AS.Types.ServerState
                                                  e1
                                                  s2# })
                                               ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                                        case GHC.Prim.putMVar#
                                               @ GHC.Prim.RealWorld
                                               @ AS.Types.ServerState
                                               mvar#
                                               ipv7
                                               ipv6 of s2# { DEFAULT ->
                                        (# s2#, GHC.Tuple.() #) } } } })
                                       ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                                case conn of ww { Network.WebSockets.Connection.Connection ww1 ww2 ww3 ww4 ww5 ->
                                Main.$wa2 state a4 ww1 ww2 ww3 ww4 ww5 ipv4 } } } } })
                          (\ e1 :: GHC.Exception.SomeException
                             eta1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                           Main.catchDisconnect1 user state e1 eta1)
                          eta }) -}
b8df829017c573f24f12ac62e9534f4e
  handleInitConnection2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "IN HANDLE INIT CONNECTION"#) -}
1c56d442589bfb0a887f6b2f680c768f
  handleInitConnection3 :: [AS.Types.ASWindow]
    {- Strictness: m2,
       Unfolding: (GHC.Types.:
                     @ AS.Types.ASWindow
                     AS.Types.initialViewingWindow
                     (GHC.Types.[] @ AS.Types.ASWindow)) -}
6d585f66e0bd5d721ab5b02551acefa1
  handleInitConnection4 :: GHC.Types.IO () {- Strictness: b -}
39ab244b86b2d84bd00abd2537737bca
  handleInitConnectionDaemon :: GHC.MVar.MVar AS.Types.ServerState
                                -> Network.WebSockets.Connection.Connection
                                -> Data.Maybe.Maybe AS.Types.ASMessage
                                -> GHC.Types.IO ()
    {- Arity: 4, Strictness: <L,U(U)><L,U><S,1*U><L,U>,
       Unfolding: (Main.handleInitConnectionDaemon1
                     `cast`
                   (<GHC.MVar.MVar AS.Types.ServerState>_R
                    ->_R <Network.WebSockets.Connection.Connection>_R
                    ->_R <Data.Maybe.Maybe AS.Types.ASMessage>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
ec45c4afacbd8a65f5122c8e176c88db
  handleInitConnectionDaemon1 :: GHC.MVar.MVar AS.Types.ServerState
                                 -> Network.WebSockets.Connection.Connection
                                 -> Data.Maybe.Maybe AS.Types.ASMessage
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4, Strictness: <L,U(U)><L,U><S,1*U><L,U>,
       Unfolding: (\ state :: GHC.MVar.MVar AS.Types.ServerState
                     conn :: Network.WebSockets.Connection.Connection
                     ds :: Data.Maybe.Maybe AS.Types.ASMessage
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case ds of wild {
                     Data.Maybe.Nothing
                     -> case Main.handleInitConnectionDaemon3
                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        of {}
                     Data.Maybe.Just ds1
                     -> case ds1 of wild1 { AS.Types.Message ds2 ds3 ds4 ds5 ->
                        case ds5 of wild2 {
                          DEFAULT
                          -> case Main.handleInitConnectionDaemon3
                             ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                             of {}
                          AS.Types.PayloadDaemonInit ds6
                          -> case ds6 of wild3 { AS.Types.ASInitDaemonConnection pId loc ->
                             let {
                               daemon :: AS.Types.ASDaemon {- Strictness: m -}
                               = AS.Types.ASDaemon loc conn
                             } in
                             GHC.Prim.catch#
                               @ ()
                               @ GHC.Exception.SomeException
                               (\ s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                case GHC.IO.Handle.Text.hPutStr2
                                       GHC.IO.Handle.FD.stdout
                                       Main.handleInitConnectionDaemon2
                                       GHC.Types.True
                                       s of ds7 { (#,#) ipv ipv1 ->
                                case GHC.Prim.getMaskingState# ipv of ds8 { (#,#) ipv2 ipv3 ->
                                case ipv3 of ds9 {
                                  DEFAULT
                                  -> case state of wild4 { GHC.MVar.MVar mvar# ->
                                     case GHC.Prim.takeMVar#
                                            @ GHC.Prim.RealWorld
                                            @ AS.Types.ServerState
                                            mvar#
                                            ipv2 of ds10 { (#,#) ipv4 ipv5 ->
                                     case GHC.Prim.catch#
                                            @ AS.Types.ServerState
                                            @ GHC.Exception.SomeException
                                            (\ s1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                             (# s1,
                                                case ipv5 of ww { AS.Types.State ww1 ->
                                                case Main.$waddDaemon
                                                       pId
                                                       daemon
                                                       ww1 of ww2 { (##) ww3 ->
                                                AS.Types.State ww3 } } #))
                                            (\ e1 :: GHC.Exception.SomeException
                                               eta1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                             case GHC.Prim.putMVar#
                                                    @ GHC.Prim.RealWorld
                                                    @ AS.Types.ServerState
                                                    mvar#
                                                    ipv5
                                                    eta1 of s2# { DEFAULT ->
                                             GHC.Prim.raiseIO#
                                               @ GHC.Exception.SomeException
                                               @ AS.Types.ServerState
                                               e1
                                               s2# })
                                            ipv4 of ds11 { (#,#) ipv6 ipv7 ->
                                     case GHC.Prim.putMVar#
                                            @ GHC.Prim.RealWorld
                                            @ AS.Types.ServerState
                                            mvar#
                                            ipv7
                                            ipv6 of s2# { DEFAULT ->
                                     case conn of ww { Network.WebSockets.Connection.Connection ww1 ww2 ww3 ww4 ww5 ->
                                     Main.$wa3 wild4 loc ww1 ww2 ww3 ww4 ww5 s2# } } } } }
                                  0
                                  -> case GHC.Prim.maskAsyncExceptions#
                                            @ ()
                                            (\ eta1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                             case state of wild4 { GHC.MVar.MVar mvar# ->
                                             case GHC.Prim.takeMVar#
                                                    @ GHC.Prim.RealWorld
                                                    @ AS.Types.ServerState
                                                    mvar#
                                                    eta1 of ds10 { (#,#) ipv4 ipv5 ->
                                             case GHC.Prim.catch#
                                                    @ AS.Types.ServerState
                                                    @ GHC.Exception.SomeException
                                                    (GHC.Prim.unmaskAsyncExceptions#
                                                       @ AS.Types.ServerState
                                                       (\ s1 :: GHC.Prim.State#
                                                                    GHC.Prim.RealWorld ->
                                                        (# s1,
                                                           case ipv5 of ww { AS.Types.State ww1 ->
                                                           case Main.$waddDaemon
                                                                  pId
                                                                  daemon
                                                                  ww1 of ww2 { (##) ww3 ->
                                                           AS.Types.State ww3 } } #)))
                                                    (\ e1 :: GHC.Exception.SomeException
                                                       eta2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                                     case GHC.Prim.putMVar#
                                                            @ GHC.Prim.RealWorld
                                                            @ AS.Types.ServerState
                                                            mvar#
                                                            ipv5
                                                            eta2 of s2# { DEFAULT ->
                                                     GHC.Prim.raiseIO#
                                                       @ GHC.Exception.SomeException
                                                       @ AS.Types.ServerState
                                                       e1
                                                       s2# })
                                                    ipv4 of ds11 { (#,#) ipv6 ipv7 ->
                                             case GHC.Prim.putMVar#
                                                    @ GHC.Prim.RealWorld
                                                    @ AS.Types.ServerState
                                                    mvar#
                                                    ipv7
                                                    ipv6 of s2# { DEFAULT ->
                                             (# s2#, GHC.Tuple.() #) } } } })
                                            ipv2 of ds10 { (#,#) ipv4 ipv5 ->
                                     case conn of ww { Network.WebSockets.Connection.Connection ww1 ww2 ww3 ww4 ww5 ->
                                     Main.$wa3 state loc ww1 ww2 ww3 ww4 ww5 ipv4 } } } } })
                               (\ e1 :: GHC.Exception.SomeException
                                  eta1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                                Main.catchDisconnectDaemon1 daemon state e1 eta1)
                               eta } } } }) -}
d6a99c5e88c643fc6ecb9b2f9983e002
  handleInitConnectionDaemon2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "IN HANDLE INIT DAEMON CONNECTION"#) -}
b5e92b45532cd8455f2c5ab2d86e9896
  handleInitConnectionDaemon3 :: GHC.Types.IO () {- Strictness: b -}
c0075dc3f13ed4eee12784116caae1c2
  handleMessage :: AS.Types.ASUser
                   -> GHC.MVar.MVar AS.Types.ServerState
                   -> AS.Types.ASMessage
                   -> GHC.Types.IO ()
    {- Arity: 4,
       Strictness: <L,U(U(U,U,U),1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A),A)><L,U(U)><S(LSLL),1*U(U(U,U,U),U,U,U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  Main.handleMessage1
                    `cast`
                  (<AS.Types.ASUser>_R
                   ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R <AS.Types.ASMessage>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
99e42251747b5cbc3e2e9d6879d7b469
  handleMessage1 :: AS.Types.ASUser
                    -> GHC.MVar.MVar AS.Types.ServerState
                    -> AS.Types.ASMessage
                    -> GHC.Prim.State# GHC.Prim.RealWorld
                    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4,
       Strictness: <L,U(U(U,U,U),1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A),A)><L,U(U)><S(LSLL),1*U(U(U,U,U),U,U,U)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (4, True, False)
                  (\ w :: AS.Types.ASUser
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     w2 :: AS.Types.ASMessage
                     w3 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w2 of ww { AS.Types.Message ww1 ww2 ww3 ww4 ->
                   Main.$wa4 w w1 ww1 ww2 ww3 ww4 w3 }) -}
e85dfae6777375e87ec986bb492df331
  handleMessage2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "Server processed redo"#) -}
593ab8cf9d762efefef689ef87a7cfb9
  handleMessage3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "Server processed undo"#) -}
0b53f2371ee17e50f3612af3925c1488
  handleMessage4 :: Network.WebSockets.Types.Message
    {- Unfolding: (Network.WebSockets.Types.DataMessage
                     Main.handleMessage5) -}
e59f207d704e8f3527ba00f4fa7c9e31
  handleMessage5 :: Network.WebSockets.Types.DataMessage
    {- Unfolding: (Network.WebSockets.Types.Text
                     Main.handleMessage6) -}
9fedf68e4f061111859c2c3986bcc3da
  handleMessage6 :: Data.ByteString.Lazy.Internal.ByteString
    {- Unfolding: (Data.Text.Lazy.Encoding.encodeUtf8
                     (Data.Text.Lazy.fromChunks_go
                        (GHC.Base.$fMonad[]_$creturn
                           @ Data.Text.Internal.Text
                           Main.handleMessage7))) -}
91a12becfd363b33c69b55c418612bd1
  handleMessage7 :: Data.Text.Internal.Text
    {- Unfolding: (Data.Text.Show.unpackCString# "ACK"#) -}
fd42c5d8d62612102b7309d5275c1b17
  handleMessage8 :: GHC.Types.IO () {- Strictness: b -}
4e2a59049dbb99b459c7a05e50e3ea79
  isInitConnection :: Data.ByteString.Lazy.Internal.ByteString
                      -> GHC.Types.IO GHC.Types.Bool
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (Main.isInitConnection1
                     `cast`
                   (<Data.ByteString.Lazy.Internal.ByteString>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Types.Bool>_R))) -}
33ad3ca9162e6195545d79652d7cf5e1
  isInitConnection1 :: Data.ByteString.Lazy.Internal.ByteString
                       -> GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
    {- Arity: 2, Strictness: <L,U><L,U> -}
f52a2de087818fc901a581fa2e804527
  isInitConnectionDaemon :: Data.ByteString.Lazy.Internal.ByteString
                            -> GHC.Types.IO GHC.Types.Bool
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (Main.isInitConnectionDaemon1
                     `cast`
                   (<Data.ByteString.Lazy.Internal.ByteString>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Types.Bool>_R))) -}
7e89052b466525e2db221c2d4b45d640
  isInitConnectionDaemon1 :: Data.ByteString.Lazy.Internal.ByteString
                             -> GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
    {- Arity: 2, Strictness: <L,U><L,U> -}
72c6821b1608ece6ba25078768565f5b
  main :: GHC.Types.IO ()
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (Main.main1
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
436ecc9464a060f0d1763ac5951ab852
  main1 :: GHC.Prim.State# GHC.Prim.RealWorld
           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case GHC.Prim.newMVar#
                          @ GHC.Prim.RealWorld
                          @ AS.Types.ServerState
                          eta of ds { (#,#) ipv ipv1 ->
                   case GHC.Prim.putMVar#
                          @ GHC.Prim.RealWorld
                          @ AS.Types.ServerState
                          ipv1
                          Main.newServerState
                          ipv of s2# { DEFAULT ->
                   case GHC.IO.Handle.Text.hPutStr2
                          GHC.IO.Handle.FD.stdout
                          Main.main3
                          GHC.Types.True
                          s2# of ds1 { (#,#) ipv2 ipv3 ->
                   case Network.WebSockets.Server.runServer2
                          AS.Config.Settings.wsAddress
                          AS.Config.Settings.wsPort
                          Network.WebSockets.Connection.defaultConnectionOptions
                          (let {
                             w :: GHC.MVar.MVar AS.Types.ServerState
                             = GHC.MVar.MVar @ AS.Types.ServerState ipv1
                           } in
                           (\ w1 :: Network.WebSockets.Connection.PendingConnection
                              w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                            case w1 of ww { Network.WebSockets.Connection.PendingConnection ww1 ww2 ww3 ww4 ->
                            case ww2 of ww5 { Network.WebSockets.Http.RequestHead ww6 ww7 ww8 ->
                            case ww4 of ww9 { Network.WebSockets.Stream.Stream ww10 ww11 ww12 ->
                            Main.$wa w ww1 ww6 ww7 ww8 ww3 ww10 ww11 ww12 w2 } } })
                             `cast`
                           (<Network.WebSockets.Connection.PendingConnection>_R
                            ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)))
                          ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                   GHC.IO.Handle.Text.hPutStr2
                     GHC.IO.Handle.FD.stdout
                     Main.main2
                     GHC.Types.True
                     ipv4 } } } }) -}
33dbeae5bbfa6be1e6b11e529e22ebaa
  main2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "DONE WITH MAIN"#) -}
cd5830cadc63b91668b5564fbbc531e9
  main3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackAppendCString#
                     "server started on port "#
                     Main.main4) -}
de32e435f2d2fba93f6c757980eeed59
  main4 :: [GHC.Types.Char]
    {- Unfolding: (case GHC.Show.$wshowSignedInt
                          0
                          5000
                          (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                   GHC.Types.: @ GHC.Types.Char ww5 ww6 }) -}
ae0d8b5e4d1ea0a05dcf5732c9404129
  main5 :: GHC.Prim.State# GHC.Prim.RealWorld
           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   GHC.TopHandler.runMainIO1
                     @ ()
                     Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                     eta) -}
e2ed9ad176518086a6d02bd5741d79ad
  newServerState :: AS.Types.ServerState
    {- HasNoCafRefs, Strictness: m,
       Unfolding: (AS.Types.State
                     (GHC.Types.[] @ (AS.Types.ASUser, [AS.Types.ASDaemon]))) -}
167421f2d2151862fbcb6dc53b553620
  numUsers :: AS.Types.ServerState -> GHC.Types.Int
    {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>m,
       Unfolding: InlineRule (1, True, False)
                  (\ x :: AS.Types.ServerState ->
                   case x of wild { AS.Types.State ds1 ->
                   case GHC.List.$wlenAcc
                          @ (AS.Types.ASUser, [AS.Types.ASDaemon])
                          ds1
                          0 of ww { DEFAULT ->
                   GHC.Types.I# ww } }) -}
6faeb509e962833c10fc8e0fda5e9e4f
  processMessage :: AS.Types.ASUser
                    -> GHC.MVar.MVar AS.Types.ServerState
                    -> AS.Types.ASMessage
                    -> GHC.Types.IO ()
    {- Arity: 4,
       Strictness: <L,U(U(U,U,U),U(H,H,H,C(C1(U(U,U))),A),A)><L,U(U)><S(LLLS),1*U(U(U,U,U),U,U,U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  Main.processMessage1
                    `cast`
                  (<AS.Types.ASUser>_R
                   ->_R <GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R <AS.Types.ASMessage>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
12983d4e8359035246f2e0c50883e24a
  processMessage1 :: AS.Types.ASUser
                     -> GHC.MVar.MVar AS.Types.ServerState
                     -> AS.Types.ASMessage
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 4,
       Strictness: <L,U(U(U,U,U),U(H,H,H,C(C1(U(U,U))),A),A)><L,U(U)><S(LLLS),1*U(U(U,U,U),U,U,U)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (4, True, False)
                  (\ w :: AS.Types.ASUser
                     w1 :: GHC.MVar.MVar AS.Types.ServerState
                     w2 :: AS.Types.ASMessage
                     w3 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w2 of ww { AS.Types.Message ww1 ww2 ww3 ww4 ->
                   Main.$wa5 w w1 ww1 ww2 ww3 ww4 w3 }) -}
3d767f353087b3dba9fdba845443d239
  processMessage2 :: Network.WebSockets.Types.Message
    {- Unfolding: (Network.WebSockets.Types.DataMessage
                     Main.processMessage3) -}
f545421a4d6368a4639073f07bdecb5c
  processMessage3 :: Network.WebSockets.Types.DataMessage
    {- Unfolding: (Network.WebSockets.Types.Text
                     Main.processMessage4) -}
ee9b0387e77d9b92b48a81ea06441dae
  processMessage4 :: Data.ByteString.Lazy.Internal.ByteString
    {- Unfolding: (Data.ByteString.Builder.toLazyByteString
                     Main.processMessage5) -}
261368f945b1dcb7285ba2a5c6ac53f4
  processMessage5 :: Data.ByteString.Builder.Internal.Builder
    {- Unfolding: (case AS.Types.$w$ctoJSON4
                          Data.Text.Internal.empty_
                          AS.Types.NoAction
                          Main.processMessage6
                          AS.Types.failureMessage1 of ww5 { (##) ww6 ->
                   Data.Aeson.Encode.ByteString.encodeToByteStringBuilder
                     (Data.Aeson.Types.Internal.Object ww6) }) -}
d2477cf6f0bf6028b026884e93114df0
  processMessage6 :: AS.Types.ASResult
    {- Strictness: m2,
       Unfolding: (AS.Types.Failure Main.processMessage7) -}
e368a3167c4ad0a8c7082d8b59be8fb5
  processMessage7 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "Insufficient permissions"#) -}
d751fb9052075822094dc64098460e1d
  removeDaemon :: AS.Types.ASDaemon
                  -> AS.Types.ServerState
                  -> AS.Types.ServerState
    {- Arity: 2, Strictness: <L,U><S(S),1*U(U)>m, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: AS.Types.ASDaemon w1 :: AS.Types.ServerState ->
                   case w1 of ww { AS.Types.State ww1 ->
                   case Main.$wremoveDaemon w ww1 of ww2 { (##) ww3 ->
                   AS.Types.State ww3 } }) -}
ff91fc54fab96e460e64d96b7271ba0d
  removeUser :: AS.Types.ASUser
                -> AS.Types.ServerState
                -> GHC.Types.IO AS.Types.ServerState
    {- Arity: 3, Strictness: <L,U(U(U,U,U),U,U)><S(S),1*U(U)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  Main.catchDisconnect2
                    `cast`
                  (<AS.Types.ASUser>_R
                   ->_R <AS.Types.ServerState>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <AS.Types.ServerState>_R)) -}
c7ac763b87b52a2d39b8cf49e89cae1f
  send :: AS.Types.ASMessage
          -> Network.WebSockets.Connection.Connection
          -> GHC.Types.IO ()
    {- Arity: 3,
       Strictness: <L,1*U(1*U,1*U,1*U,1*U)><S(SSSC(C(S))L),1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  Main.send1
                    `cast`
                  (<AS.Types.ASMessage>_R
                   ->_R <Network.WebSockets.Connection.Connection>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
7d988770deda17508f3ad86396e01ec3
  send1 :: AS.Types.ASMessage
           -> Network.WebSockets.Connection.Connection
           -> GHC.Prim.State# GHC.Prim.RealWorld
           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3,
       Strictness: <L,1*U(1*U,1*U,1*U,1*U)><S(SSSC(C(S))L),1*U(1*H,1*H,1*H,C1(C1(U(U,U))),A)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ w :: AS.Types.ASMessage
                     w1 :: Network.WebSockets.Connection.Connection
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w1 of ww { Network.WebSockets.Connection.Connection ww1 ww2 ww3 ww4 ww5 ->
                   (ww4
                      (Network.WebSockets.Types.DataMessage
                         (Network.WebSockets.Types.Text
                            (Data.ByteString.Builder.toLazyByteString
                               (Data.Aeson.Encode.ByteString.encodeToByteStringBuilder
                                  (AS.Types.$fToJSONASMessage_$ctoJSON w))))))
                     `cast`
                   (GHC.Types.NTCo:IO[0] <()>_R)
                     w2 }) -}
1acc73eeb1c8ee24e908d436f6aa9215
  talk :: GHC.MVar.MVar AS.Types.ServerState
          -> AS.Types.ASUser
          -> GHC.Types.IO ()
    {- Arity: 3,
       Strictness: <L,U(U)><S(LS(SSC(S(LS))SL)L),U(U(U,U,U),U(C(U(U,A)),H,C(U(U,1*U)),C(C1(U(U,U))),U),A)><L,U>,
       Unfolding: InlineRule (0, True, True)
                  Main.talk1
                    `cast`
                  (<GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R <AS.Types.ASUser>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
15ad0a14082e404a7ea1307c9c2e5dce
  talk1 :: GHC.MVar.MVar AS.Types.ServerState
           -> AS.Types.ASUser
           -> GHC.Prim.State# GHC.Prim.RealWorld
           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3,
       Strictness: <L,U(U)><S(LS(SSC(S(LS))SL)L),U(U(U,U,U),U(C(U(U,A)),H,C(U(U,1*U)),C(C1(U(U,U))),U),A)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ w :: GHC.MVar.MVar AS.Types.ServerState
                     w1 :: AS.Types.ASUser
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w1 of ww { AS.Types.User ww1 ww2 ww3 ->
                   case ww2 of ww4 { Network.WebSockets.Connection.Connection ww5 ww6 ww7 ww8 ww9 ->
                   Main.$wa2 w ww1 ww5 ww6 ww7 ww8 ww9 w2 } }) -}
96725d2ba3e62c1954789d4a73015ad1
  talkDaemon :: GHC.MVar.MVar AS.Types.ServerState
                -> AS.Types.ASDaemon
                -> GHC.Types.IO ()
    {- Arity: 3,
       Strictness: <L,U(U)><S(LS(SSC(S(LS))SL)),U(U,U(U,U,U,U,U))><L,U>,
       Unfolding: InlineRule (0, True, True)
                  Main.talkDaemon1
                    `cast`
                  (<GHC.MVar.MVar AS.Types.ServerState>_R
                   ->_R <AS.Types.ASDaemon>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
b8bb5c089afb6052eb0baf0f74f2cf3a
  talkDaemon1 :: GHC.MVar.MVar AS.Types.ServerState
                 -> AS.Types.ASDaemon
                 -> GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3,
       Strictness: <L,U(U)><S(LS(SSC(S(LS))SL)),U(U,U(U,U,U,U,U))><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ w :: GHC.MVar.MVar AS.Types.ServerState
                     w1 :: AS.Types.ASDaemon
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w1 of ww { AS.Types.ASDaemon ww1 ww2 ->
                   case ww2 of ww3 { Network.WebSockets.Connection.Connection ww4 ww5 ww6 ww7 ww8 ->
                   Main.$wa3 w ww1 ww4 ww5 ww6 ww7 ww8 w2 } }) -}
fdac61155a71e534dae53bd232a7ff43
  userIdExists :: AS.Types.ASUserId
                  -> AS.Types.ServerState
                  -> GHC.Types.Bool
    {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S(S),1*U(1*U)>,
       Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: AS.Types.ASUserId w1 :: AS.Types.ServerState ->
                   case w1 of ww { AS.Types.State ww1 ->
                   Main.$wuserIdExists w ww1 }) -}
b75942238b7fa834baeba173bf1d8871
  userIdExists1 :: (AS.Types.ASUser, [AS.Types.ASDaemon])
                   -> Data.Text.Internal.Text
    {- Arity: 1, HasNoCafRefs,
       Unfolding: (\ x :: (AS.Types.ASUser, [AS.Types.ASDaemon]) ->
                   case x of wild { (,) x1 ds1 ->
                   case x1 of wild1 { AS.Types.User ds2 ds3 ds4 -> ds2 } }) -}
"SPEC Main.addToAL [AS.Types.ASUser]" [ALWAYS] forall @ elt
                                                      $dEq :: GHC.Classes.Eq AS.Types.ASUser
  Main.addToAL @ AS.Types.ASUser @ elt $dEq
  = Main.addToAL_$saddToAL @ elt
"SPEC Main.delFromAL [AS.Types.ASUser]" [ALWAYS] forall @ a4
                                                        $dEq :: GHC.Classes.Eq AS.Types.ASUser
  Main.delFromAL @ AS.Types.ASUser @ a4 $dEq
  = Main.addDaemon_$sdelFromAL @ a4
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

