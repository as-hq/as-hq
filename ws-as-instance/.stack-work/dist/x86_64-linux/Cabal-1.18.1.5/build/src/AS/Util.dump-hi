
==================== FINAL INTERFACE ====================
2015-08-20 07:09:21.829414 UTC

interface alphasheets-0.1.0.0:AS.Util 7084
  interface hash: e01b013c00c10ed500e40089b53e3bcd
  ABI hash: d80e7b17172dcaa38faa0d323bd0543a
  export-list hash: 22c6c0c3cabbbc0dbbfea98994afcbca
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f8b866267ce58dc6290b8020b2e82f8c
  used TH splices: False
  where
exports:
  AS.Util.containsStreamTag
  AS.Util.fromRight
  AS.Util.generateErrorMessage
  AS.Util.getASTime
  AS.Util.getStreamTag
  AS.Util.getTime
  AS.Util.intersectViewingWindow
  AS.Util.intersectViewingWindows
  AS.Util.printTimed
  AS.Util.updateMessageUser
module dependencies: AS.Types
package dependencies: SHA-1.6.4.2 aeson-0.8.0.2 array-0.5.0.0
                      attoparsec-0.12.1.6 base base64-bytestring-1.0.0.1 binary-0.7.1.0
                      blaze-builder-0.4.0.1 bytestring-0.10.4.0 case-insensitive-1.2.0.4
                      containers-0.5.5.1 deepseq-1.3.0.2 dlist-0.7.1.1 entropy-0.3.7
                      ghc-prim hashable-1.2.3.3 integer-gmp network-2.6.2.0
                      old-locale-1.0.0.6 primitive-0.6 random-1.1 scientific-0.3.3.8
                      text-1.2.0.6 time-1.4.2 transformers-0.3.0.0 unix-2.7.0.1
                      unordered-containers-0.2.5.1 vector-0.10.12.3 websockets-0.9.5.0
orphans: aeson-0.8.0.2:Data.Aeson.Types.Generic
         aeson-0.8.0.2:Data.Aeson.Types.Instances
         aeson-0.8.0.2:Data.Aeson.Types.Internal
         attoparsec-0.12.1.6:Data.Attoparsec.ByteString.Char8 base:GHC.Base
         base:GHC.Float base:GHC.Real binary-0.7.1.0:Data.Binary.Generic
         bytestring-0.10.4.0:Data.ByteString.Builder
         hashable-1.2.3.3:Data.Hashable.Generic
         network-2.6.2.0:Network.Socket network-2.6.2.0:Network.Socket.Types
         random-1.1:System.Random text-1.2.0.6:Data.Text
         text-1.2.0.6:Data.Text.Lazy time-1.4.2:Data.Time.Calendar.Gregorian
         time-1.4.2:Data.Time.Format.Parse
         time-1.4.2:Data.Time.LocalTime.LocalTime
         transformers-0.3.0.0:Control.Monad.Trans.Error
         vector-0.10.12.3:Data.Vector.Fusion.Stream
         vector-0.10.12.3:Data.Vector.Unboxed
family instance modules: alphasheets-0.1.0.0:AS.Types
                         attoparsec-0.12.1.6:Data.Attoparsec.Internal.Types
                         base:Control.Applicative base:Data.Either base:Data.Monoid
                         base:Data.Type.Equality base:GHC.Exts base:GHC.Generics
                         dlist-0.7.1.1:Data.DList primitive-0.6:Control.Monad.Primitive
                         text-1.2.0.6:Data.Text text-1.2.0.6:Data.Text.Lazy
                         unordered-containers-0.2.5.1:Data.HashMap.Base
                         unordered-containers-0.2.5.1:Data.HashSet
                         vector-0.10.12.3:Data.Vector vector-0.10.12.3:Data.Vector.Primitive
                         vector-0.10.12.3:Data.Vector.Storable
                         vector-0.10.12.3:Data.Vector.Unboxed
                         vector-0.10.12.3:Data.Vector.Unboxed.Base
import  -/  AS.Types b606c3629b6c721cf8b97ba4ece45fb1
  exports: 66ecab93115eea25472e439473866aa8
  ASCell 9694dcec8d390971f2871a63000a945c
  ASCellTag a775d60e93186b2b919adf04ee26d0a9
  ASExecError 3cdc37e0a0cb54a7a8dc83a825c4f7b3
  ASMessage bc6381c35bc5db39b62b2fcf1105f390
  ASTime dc8c242f2247030db781fe45c3a4936d
  ASUserId 58c2255298a038bfd402f88ed7eef632
  ASWindow 09563f841b7c45ab0474d0462c4cfc5f
  Cell 7c12ca84fa41249c90ef3c2fc51aa59b
  Index a3a1c51a9db8b7858642af330a1e8ef6
  Message 167f18e274772af17812eb5044da6b4b
  Sheet 4a8ba79abcb864e6bd656f5f2f0848a1
  Streaming 150956d4a4791d318af57868ca36309b
  Time d60e36e2225862f20a6c4921bb8daf30
  Window 3734c06431c4dfde3cef2e614ce1e4db
import  -/  base:Data.Either d1c890129a7c6a9ec02a642c6c2f4ed3
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:GHC.List 4cff382327e59a5787355ca0a4174450
import  -/  base:GHC.Num 5e7786970581cacc802bf850d458a30b
import  -/  base:GHC.Show cf1a7ff9edb0f41528085aad04d33753
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  base:System.IO cadd0efb01c47ddd8f52d750739fdbdf
import  -/  ghc-prim:GHC.Classes 3e6cbe1e7e80480408cfa8d5450726a0
import  -/  ghc-prim:GHC.Types dcba736fa3dfba12d307ab18354845d2
import  -/  time-1.4.2:Data.Time.Clock 86049c786591e38a79a841e152726f37
import  -/  time-1.4.2:Data.Time.Clock.UTC 2eaf66db96f758ff3a5badfa24a9ff43
6205b61bfd0a76cf193cd20efc018f8f
  containsStreamTag :: [AS.Types.ASCellTag] -> GHC.Types.Bool
    {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
d0b1ec9e971d90745b6b8595595a2478
  fromRight :: Data.Either.Either a b -> b
    {- Arity: 1, Strictness: <S,1*U>,
       Unfolding: (\ @ a @ b ds :: Data.Either.Either a b ->
                   case ds of wild {
                     Data.Either.Left ipv -> AS.Util.fromRight1 @ b
                     Data.Either.Right b1 -> b1 }) -}
d43cde4d2bc504368a9e9f32d3b75bc6
  fromRight1 :: b {- Strictness: b -}
e5fdc9cce030cb4bdc2e2f639bbda31d
  generateErrorMessage :: AS.Types.ASExecError
                          -> GHC.Types.IO GHC.Base.String
    {- Arity: 2, Strictness: <L,A><L,U>,
       Unfolding: InlineRule (0, True, True)
                  AS.Util.generateErrorMessage1
                    `cast`
                  (<AS.Types.ASExecError>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)) -}
eb8d6dc09fbca617e0ccc92499c963d4
  generateErrorMessage1 :: AS.Types.ASExecError
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 2, Strictness: <L,A><L,U>,
       Unfolding: InlineRule (2, True, True)
                  (\ e :: AS.Types.ASExecError
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   (# eta, AS.Util.generateErrorMessage2 #)) -}
a8e119f31cad1525f3634285b486154c
  generateErrorMessage2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "hi"#) -}
2954b5d897f110e673a850034fad19e6
  getASTime :: GHC.Types.IO AS.Types.ASTime
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (AS.Util.getASTime1
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0] <AS.Types.ASTime>_R))) -}
c9724112b7f80a9e9f24700a6a5a18a9
  getASTime1 :: GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, AS.Types.ASTime #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   (# s, AS.Util.getASTime2 #)) -}
4e93111296e3a7647e35828a2a205c7f
  getASTime2 :: AS.Types.ASTime
    {- Unfolding: (AS.Types.Time
                     AS.Util.generateErrorMessage2
                     AS.Util.getASTime5
                     AS.Util.getASTime4
                     AS.Util.getASTime3) -}
28e5c213dbb9c45ba628f5b7ea3b0709
  getASTime3 :: GHC.Types.Int
    {- HasNoCafRefs, Unfolding: (GHC.Types.I# 3) -}
00a49bf54709b4baabb4d299c22932d8
  getASTime4 :: GHC.Types.Int
    {- HasNoCafRefs, Unfolding: (GHC.Types.I# 2) -}
438426c99e41ae4bf454cfeb589aa6e8
  getASTime5 :: GHC.Types.Int
    {- HasNoCafRefs, Unfolding: (GHC.Types.I# 1) -}
6fde66738b66cc507b0d4416602f321d
  getStreamTag :: [AS.Types.ASCellTag] -> AS.Types.ASCellTag
    {- Arity: 1, Strictness: <S,1*U> -}
820b632133a97c1bea8aec43715c6de6
  getTime :: GHC.Types.IO GHC.Base.String
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (AS.Util.getTime1
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
39fd2b8d1bdc27d3a3be057eab074128
  getTime1 :: GHC.Prim.State# GHC.Prim.RealWorld
              -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case Data.Time.Clock.POSIX.getPOSIXTime1
                          eta of ds1 { (#,#) ipv ipv1 ->
                   (# ipv,
                      case Data.Time.Clock.POSIX.$wposixSecondsToUTCTime
                             ipv1 of ww { (#,#) ww1 ww2 ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        (Data.Fixed.showFixed
                           @ Data.Fixed.E12
                           Data.Fixed.$fHasResolutionE12_$cresolution
                             `cast`
                           (Sym (Data.Fixed.NTCo:HasResolution[0] <Data.Fixed.E12>_N))
                           GHC.Types.True
                           ww2 `cast` (Data.Time.Clock.Scale.NTCo:DiffTime[0]))
                        Data.Time.Clock.Scale.$fShowDiffTime3 } #) }) -}
7dce523a2507c5e05dd81db3ac2cd8f6
  intersectViewingWindow :: [AS.Types.ASCell]
                            -> AS.Types.ASWindow
                            -> [AS.Types.ASCell]
    {- Arity: 2,
       Strictness: <S,1*U><L,U(U(U,U,U),U(U(U),U(U)),U(U(U),U(U)))>,
       Unfolding: (\ cells :: [AS.Types.ASCell] vw :: AS.Types.ASWindow ->
                   GHC.List.filter
                     @ AS.Types.ASCell
                     (\ ds :: AS.Types.ASCell ->
                      case vw of wild { AS.Types.Window wSheetId ds1 ds2 ->
                      case ds1 of wild1 { (,) tlc tlr ->
                      case ds2 of wild2 { (,) brc brr ->
                      case ds of wild3 { AS.Types.Cell ds3 ds4 ds5 ds6 ->
                      case ds3 of wild4 {
                        AS.Types.Index ds7 ds8
                        -> case ds7 of wild5 { AS.Types.Sheet cSheetId ds9 ->
                           case ds8 of wild6 { (,) col row ->
                           case wSheetId of wild7 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case cSheetId of wild8 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# dt2 dt5) of wild9 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case {__pkg_ccall text-1.2.0.6 _hs_text_memcmp GHC.Prim.ByteArray#
                                                                               -> GHC.Prim.Word#
                                                                               -> GHC.Prim.ByteArray#
                                                                               -> GHC.Prim.Word#
                                                                               -> GHC.Prim.Word#
                                                                               -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                               -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld,
                                                                                     GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild10 { (#,#) ds11 ds12 ->
                                case GHC.Prim.narrow32Int# ds12 of wild11 {
                                  DEFAULT -> GHC.Types.False
                                  0
                                  -> case col of wild12 { GHC.Types.I# x ->
                                     case tlc of wild13 { GHC.Types.I# y ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.>=# x y) of wild14 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> case brc of wild15 { GHC.Types.I# x1 ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.<=#
                                                    x
                                                    (GHC.Prim.+# y (GHC.Prim.-# x1 y))) of wild16 {
                                            GHC.Types.False -> GHC.Types.False
                                            GHC.Types.True
                                            -> case row of wild17 { GHC.Types.I# x2 ->
                                               case tlr of wild18 { GHC.Types.I# y1 ->
                                               case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.>=# x2 y1) of wild19 {
                                                 GHC.Types.False -> GHC.Types.False
                                                 GHC.Types.True
                                                 -> case brr of wild20 { GHC.Types.I# x3 ->
                                                    GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.<=#
                                                         x2
                                                         (GHC.Prim.+#
                                                            y1
                                                            (GHC.Prim.-#
                                                               x3
                                                               y1))) } } } } } } } } } } } } } } } }
                        AS.Types.Range ipv ipv1
                        -> AS.Util.intersectViewingWindow1 } } } } })
                     cells) -}
0603d775519608e8d1b99f8c529b0a2a
  intersectViewingWindow1 :: GHC.Types.Bool {- Strictness: b -}
cd069391483d214ed7d00c105c143c1f
  intersectViewingWindows :: [AS.Types.ASCell]
                             -> [AS.Types.ASWindow]
                             -> [AS.Types.ASCell]
    {- Arity: 2, Strictness: <L,U><S,1*U>,
       Unfolding: (\ cells :: [AS.Types.ASCell]
                     vws :: [AS.Types.ASWindow] ->
                   letrec {
                     go :: [AS.Types.ASWindow] -> [AS.Types.ASCell]
                       {- Arity: 1, Strictness: <S,1*U> -}
                     = \ ds :: [AS.Types.ASWindow] ->
                       case ds of wild {
                         [] -> GHC.Types.[] @ AS.Types.ASCell
                         : y ys
                         -> GHC.Base.++
                              @ AS.Types.ASCell
                              (AS.Util.intersectViewingWindow cells y)
                              (go ys) }
                   } in
                   go vws) -}
11b90d9741b8dab38b3d34d2cb6d2915
  printTimed :: GHC.Base.String -> GHC.Types.IO ()
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (AS.Util.printTimed1
                     `cast`
                   (<GHC.Base.String>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
204a64d70ff631a47b13d1a315e85e1c
  printTimed1 :: GHC.Base.String
                 -> GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (\ str :: GHC.Base.String
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case Data.Time.Clock.POSIX.getPOSIXTime1
                          eta of ds1 { (#,#) ipv ipv1 ->
                   GHC.IO.Handle.Text.hPutStr2
                     GHC.IO.Handle.FD.stdout
                     (GHC.Types.:
                        @ GHC.Types.Char
                        AS.Util.printTimed3
                        (GHC.Base.++
                           @ GHC.Types.Char
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.$fShowChar1
                              (case Data.Time.Clock.POSIX.$wposixSecondsToUTCTime
                                      ipv1 of ww { (#,#) ww1 ww2 ->
                               GHC.Show.showLitString
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    (Data.Fixed.showFixed
                                       @ Data.Fixed.E12
                                       Data.Fixed.$fHasResolutionE12_$cresolution
                                         `cast`
                                       (Sym (Data.Fixed.NTCo:HasResolution[0] <Data.Fixed.E12>_N))
                                       GHC.Types.True
                                       ww2 `cast` (Data.Time.Clock.Scale.NTCo:DiffTime[0]))
                                    Data.Time.Clock.Scale.$fShowDiffTime3)
                                 AS.Util.printTimed2 }))
                           (GHC.CString.unpackAppendCString# "] "# str)))
                     GHC.Types.True
                     ipv }) -}
6416766244a1a4c7311d95996a11a0c2
  printTimed2 :: [GHC.Types.Char]
    {- HasNoCafRefs,
       Unfolding: (GHC.Types.:
                     @ GHC.Types.Char
                     GHC.Show.$fShowChar1
                     (GHC.Types.[] @ GHC.Types.Char)) -}
a8d10502782038942e9023664728fad9
  printTimed3 :: GHC.Types.Char
    {- HasNoCafRefs, Unfolding: (GHC.Types.C# '[') -}
0e1d086d58d7990ffb3575680d6ca195
  updateMessageUser :: AS.Types.ASUserId
                       -> AS.Types.ASMessage
                       -> AS.Types.ASMessage
    {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(A,U,U,U)>m,
       Unfolding: InlineRule (2, True, False)
                  (\ uid :: AS.Types.ASUserId ds :: AS.Types.ASMessage ->
                   case ds of wild { AS.Types.Message ds1 a r p ->
                   AS.Types.Message uid a r p }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

