

[2015-12-13 05:10:45.199] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "qplot(x='x',y='y',data=data.frame(c(1,2)))", language = R}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:45.232] the context insert has value CellValue (ValueError {errorMsg = "R Runtime Error: Error in grDevices::png(..., width = width, height = height, res = dpi,  : \n  X11 fatal IO error: please save work and shut down R\n", errorType = "R error"})

[2015-12-13 05:10:45.233] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:45.233] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:45.246] DECOUPLED CELLS: []

[2015-12-13 05:10:45.246] empty dispatch

[2015-12-13 05:10:45.247] empty evalchain

[2015-12-13 05:10:45.247] finished dispatch

[2015-12-13 05:10:45.248] updated DB after dispatch

[2015-12-13 05:10:45.248] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "qplot(x='x',y='y',data=data.frame(c(1,2)))", language = R}, cellValue = ValueError {errorMsg = "R Runtime Error: Error in grDevices::png(..., width = width, height = height, res = dpi,  : \n  X11 fatal IO error: please save work and shut down R\n", errorType = "R error"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:45.248] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "qplot(x='x',y='y',data=data.frame(c(1,2)))", language = R}, cellValue = ValueError {errorMsg = "R Runtime Error: Error in grDevices::png(..., width = width, height = height, res = dpi,  : \n  X11 fatal IO error: please save work and shut down R\n", errorType = "R error"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:45.254] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:45.291] Message: "ClientMessage {clientAction = Get, clientPayload = PayloadLL [Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}]}"

[2015-12-13 05:10:45.292] Server sent message: ServerMessage {serverAction = Get, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "qplot(x='x',y='y',data=data.frame(c(1,2)))", language = R}, cellValue = ValueError {errorMsg = "R Runtime Error: Error in grDevices::png(..., width = width, height = height, res = dpi,  : \n  X11 fatal IO error: please save work and shut down R\n", errorType = "R error"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:45.342] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"Sheet1\", sheetPermissions = Blacklist []})}"

[2015-12-13 05:10:45.342] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:45.349] Set cell ancestors: []

[2015-12-13 05:10:45.349] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:45.350] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:45.393] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}, cellExpression = Expression {expression = \"-5\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:45.393] about to start dispatch

[2015-12-13 05:10:45.394] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "-5", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:45.394] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:45.394] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:45.395] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},[])]

[2015-12-13 05:10:45.395] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:45.395] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}]

[2015-12-13 05:10:45.396] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "-5", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:45.396] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:45.396] Got ancestor locs: []

[2015-12-13 05:10:45.397] Starting eval chain

[2015-12-13 05:10:45.397] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "-5", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:45.397] Starting eval code

[2015-12-13 05:10:45.397] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "-5", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:45.397] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "-5", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:45.397] the context insert has value CellValue (ValueI (-5))

[2015-12-13 05:10:45.398] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:45.398] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:45.398] DECOUPLED CELLS: []

[2015-12-13 05:10:45.398] empty dispatch

[2015-12-13 05:10:45.398] empty evalchain

[2015-12-13 05:10:45.398] finished dispatch

[2015-12-13 05:10:45.399] updated DB after dispatch

[2015-12-13 05:10:45.399] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "-5", language = Excel}, cellValue = ValueI (-5), cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:45.399] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "-5", language = Excel}, cellValue = ValueI (-5), cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:45.399] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:45.444] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (1,2)}, cellExpression = Expression {expression = \"15\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:45.445] about to start dispatch

[2015-12-13 05:10:45.445] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "15", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:45.445] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:45.445] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(1,2)\""

[2015-12-13 05:10:45.446] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},[])]

[2015-12-13 05:10:45.446] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(1,2)\""

[2015-12-13 05:10:45.446] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}]

[2015-12-13 05:10:45.447] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "15", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:45.447] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(1,2)\""

[2015-12-13 05:10:45.455] Got ancestor locs: []

[2015-12-13 05:10:45.455] Starting eval chain

[2015-12-13 05:10:45.456] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "15", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:45.456] Starting eval code

[2015-12-13 05:10:45.456] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "15", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:45.456] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "15", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:45.456] the context insert has value CellValue (ValueI 15)

[2015-12-13 05:10:45.456] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:45.456] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:45.457] DECOUPLED CELLS: []

[2015-12-13 05:10:45.457] empty dispatch

[2015-12-13 05:10:45.457] empty evalchain

[2015-12-13 05:10:45.457] finished dispatch

[2015-12-13 05:10:45.458] updated DB after dispatch

[2015-12-13 05:10:45.458] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "15", language = Excel}, cellValue = ValueI 15, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:45.458] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "15", language = Excel}, cellValue = ValueI 15, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:45.458] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:45.496] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (1,3)}, cellExpression = Expression {expression = \"20\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:45.496] about to start dispatch

[2015-12-13 05:10:45.497] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "20", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:45.497] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:45.497] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(1,3)\""

[2015-12-13 05:10:45.498] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (1,3)},[])]

[2015-12-13 05:10:45.504] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(1,3)\""

[2015-12-13 05:10:45.505] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}]

[2015-12-13 05:10:45.505] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "20", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:45.506] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(1,3)\""

[2015-12-13 05:10:45.508] Got ancestor locs: []

[2015-12-13 05:10:45.508] Starting eval chain

[2015-12-13 05:10:45.508] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "20", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:45.508] Starting eval code

[2015-12-13 05:10:45.508] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "20", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:45.509] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "20", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:45.509] the context insert has value CellValue (ValueI 20)

[2015-12-13 05:10:45.509] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:45.509] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:45.509] DECOUPLED CELLS: []

[2015-12-13 05:10:45.509] empty dispatch

[2015-12-13 05:10:45.509] empty evalchain

[2015-12-13 05:10:45.510] finished dispatch

[2015-12-13 05:10:45.510] updated DB after dispatch

[2015-12-13 05:10:45.510] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "20", language = Excel}, cellValue = ValueI 20, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:45.511] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "20", language = Excel}, cellValue = ValueI 20, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:45.511] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:45.546] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (1,4)}, cellExpression = Expression {expression = \"5\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:45.546] about to start dispatch

[2015-12-13 05:10:45.547] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "5", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:45.547] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:45.547] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(1,4)\""

[2015-12-13 05:10:45.547] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (1,4)},[])]

[2015-12-13 05:10:45.552] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(1,4)\""

[2015-12-13 05:10:45.553] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}]

[2015-12-13 05:10:45.553] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "5", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:45.553] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(1,4)\""

[2015-12-13 05:10:45.554] Got ancestor locs: []

[2015-12-13 05:10:45.554] Starting eval chain

[2015-12-13 05:10:45.554] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "5", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:45.554] Starting eval code

[2015-12-13 05:10:45.555] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "5", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:45.555] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "5", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:45.555] the context insert has value CellValue (ValueI 5)

[2015-12-13 05:10:45.555] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:45.555] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:45.556] DECOUPLED CELLS: []

[2015-12-13 05:10:45.556] empty dispatch

[2015-12-13 05:10:45.556] empty evalchain

[2015-12-13 05:10:45.556] finished dispatch

[2015-12-13 05:10:45.557] updated DB after dispatch

[2015-12-13 05:10:45.557] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "5", language = Excel}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:45.557] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "5", language = Excel}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:45.557] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:45.597] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (1,5)}, cellExpression = Expression {expression = \"TRUE\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:45.598] about to start dispatch

[2015-12-13 05:10:45.598] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "TRUE", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:45.598] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:45.598] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(1,5)\""

[2015-12-13 05:10:45.599] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (1,5)},[])]

[2015-12-13 05:10:45.599] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(1,5)\""

[2015-12-13 05:10:45.600] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}]

[2015-12-13 05:10:45.600] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "TRUE", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:45.600] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(1,5)\""

[2015-12-13 05:10:45.601] Got ancestor locs: []

[2015-12-13 05:10:45.601] Starting eval chain

[2015-12-13 05:10:45.601] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "TRUE", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:45.601] Starting eval code

[2015-12-13 05:10:45.601] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "TRUE", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:45.602] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "TRUE", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:45.602] the context insert has value CellValue (ValueB True)

[2015-12-13 05:10:45.602] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:45.602] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:45.602] DECOUPLED CELLS: []

[2015-12-13 05:10:45.602] empty dispatch

[2015-12-13 05:10:45.603] empty evalchain

[2015-12-13 05:10:45.603] finished dispatch

[2015-12-13 05:10:45.603] updated DB after dispatch

[2015-12-13 05:10:45.603] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "TRUE", language = Excel}, cellValue = ValueB True, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:45.604] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "TRUE", language = Excel}, cellValue = ValueB True, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:45.604] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:45.648] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (2,1)}, cellExpression = Expression {expression = \"=SUM(A1,A2)\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:45.649] about to start dispatch

[2015-12-13 05:10:45.649] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=SUM(A1,A2)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:45.649] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:45.650] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(2,1)&I/INIT_SHEET_ID/(1,1)&I/INIT_SHEET_ID/(1,2)\""

[2015-12-13 05:10:45.650] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (2,1)},[IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}),IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,2)})])]

[2015-12-13 05:10:45.650] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(2,1)\""

[2015-12-13 05:10:45.651] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}]

[2015-12-13 05:10:45.651] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=SUM(A1,A2)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:45.652] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(2,1)\""

[2015-12-13 05:10:45.652] Got ancestor locs: [IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}),IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,1)})]

[2015-12-13 05:10:45.652] Starting eval chain

[2015-12-13 05:10:45.652] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=SUM(A1,A2)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:45.653] Starting eval code

[2015-12-13 05:10:45.653] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "-5", language = Excel}, cellValue = ValueI (-5), cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "15", language = Excel}, cellValue = ValueI 15, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=SUM(A1,A2)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:45.657] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=SUM(A1,A2)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:45.657] the context insert has value CellValue (ValueI 10)

[2015-12-13 05:10:45.657] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:45.658] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:45.658] DECOUPLED CELLS: []

[2015-12-13 05:10:45.658] empty dispatch

[2015-12-13 05:10:45.658] empty evalchain

[2015-12-13 05:10:45.658] finished dispatch

[2015-12-13 05:10:45.659] updated DB after dispatch

[2015-12-13 05:10:45.659] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=SUM(A1,A2)", language = Excel}, cellValue = ValueI 10, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:45.659] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=SUM(A1,A2)", language = Excel}, cellValue = ValueI 10, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:45.661] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:45.701] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (2,2)}, cellExpression = Expression {expression = \"=SUM(A2:A4,15)\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:45.702] about to start dispatch

[2015-12-13 05:10:45.702] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=SUM(A2:A4,15)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:45.702] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:45.702] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(2,2)&R/INIT_SHEET_ID/((1,2),(1,4))\""

[2015-12-13 05:10:45.703] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (2,2)},[RangeRef (Range {rangeSheetId = "INIT_SHEET_ID", range = ((1,2),(1,4))})])]

[2015-12-13 05:10:45.703] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(2,2)\""

[2015-12-13 05:10:45.704] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}]

[2015-12-13 05:10:45.704] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=SUM(A2:A4,15)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:45.705] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(2,2)\""

[2015-12-13 05:10:45.705] Got ancestor locs: [RangeRef (Range {rangeSheetId = "INIT_SHEET_ID", range = ((1,2),(1,4))})]

[2015-12-13 05:10:45.705] Starting eval chain

[2015-12-13 05:10:45.708] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=SUM(A2:A4,15)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:45.709] Starting eval code

[2015-12-13 05:10:45.709] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "15", language = Excel}, cellValue = ValueI 15, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "20", language = Excel}, cellValue = ValueI 20, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "5", language = Excel}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=SUM(A2:A4,15)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:45.710] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=SUM(A2:A4,15)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:45.710] the context insert has value CellValue (ValueI 55)

[2015-12-13 05:10:45.710] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:45.711] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:45.711] DECOUPLED CELLS: []

[2015-12-13 05:10:45.711] empty dispatch

[2015-12-13 05:10:45.711] empty evalchain

[2015-12-13 05:10:45.711] finished dispatch

[2015-12-13 05:10:45.712] updated DB after dispatch

[2015-12-13 05:10:45.712] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=SUM(A2:A4,15)", language = Excel}, cellValue = ValueI 55, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:45.712] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=SUM(A2:A4,15)", language = Excel}, cellValue = ValueI 55, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:45.717] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:45.751] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (2,2)}, cellExpression = Expression {expression = \"=SUM(A2:A5,15)\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:45.751] about to start dispatch

[2015-12-13 05:10:45.751] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=SUM(A2:A5,15)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:45.752] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:45.754] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(2,2)&R/INIT_SHEET_ID/((1,2),(1,5))\""

[2015-12-13 05:10:45.755] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (2,2)},[RangeRef (Range {rangeSheetId = "INIT_SHEET_ID", range = ((1,2),(1,5))})])]

[2015-12-13 05:10:45.759] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(2,2)\""

[2015-12-13 05:10:45.759] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}]

[2015-12-13 05:10:45.759] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=SUM(A2:A5,15)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:45.760] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(2,2)\""

[2015-12-13 05:10:45.760] Got ancestor locs: [RangeRef (Range {rangeSheetId = "INIT_SHEET_ID", range = ((1,2),(1,5))})]

[2015-12-13 05:10:45.763] Starting eval chain

[2015-12-13 05:10:45.763] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=SUM(A2:A5,15)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:45.763] Starting eval code

[2015-12-13 05:10:45.763] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "15", language = Excel}, cellValue = ValueI 15, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "20", language = Excel}, cellValue = ValueI 20, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "5", language = Excel}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "TRUE", language = Excel}, cellValue = ValueB True, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=SUM(A2:A5,15)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:45.764] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=SUM(A2:A5,15)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:45.766] the context insert has value CellValue (ValueI 55)

[2015-12-13 05:10:45.767] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:45.767] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:45.767] DECOUPLED CELLS: []

[2015-12-13 05:10:45.767] empty dispatch

[2015-12-13 05:10:45.767] empty evalchain

[2015-12-13 05:10:45.767] finished dispatch

[2015-12-13 05:10:45.769] updated DB after dispatch

[2015-12-13 05:10:45.769] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=SUM(A2:A5,15)", language = Excel}, cellValue = ValueI 55, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:45.769] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=SUM(A2:A5,15)", language = Excel}, cellValue = ValueI 55, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:45.770] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:45.802] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (2,3)}, cellExpression = Expression {expression = \"=SUM(\\\"5\\\", 15, TRUE)\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:45.802] about to start dispatch

[2015-12-13 05:10:45.802] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=SUM(\"5\", 15, TRUE)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:45.802] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:45.804] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(2,3)\""

[2015-12-13 05:10:45.804] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (2,3)},[])]

[2015-12-13 05:10:45.805] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(2,3)\""

[2015-12-13 05:10:45.805] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}]

[2015-12-13 05:10:45.805] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=SUM(\"5\", 15, TRUE)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:45.806] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(2,3)\""

[2015-12-13 05:10:45.806] Got ancestor locs: []

[2015-12-13 05:10:45.806] Starting eval chain

[2015-12-13 05:10:45.806] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=SUM(\"5\", 15, TRUE)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:45.807] Starting eval code

[2015-12-13 05:10:45.807] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (2,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=SUM(\"5\", 15, TRUE)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:45.814] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=SUM(\"5\", 15, TRUE)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:45.814] the context insert has value CellValue (ValueI 21)

[2015-12-13 05:10:45.818] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:45.819] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:45.819] DECOUPLED CELLS: []

[2015-12-13 05:10:45.819] empty dispatch

[2015-12-13 05:10:45.819] empty evalchain

[2015-12-13 05:10:45.819] finished dispatch

[2015-12-13 05:10:45.820] updated DB after dispatch

[2015-12-13 05:10:45.820] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=SUM(\"5\", 15, TRUE)", language = Excel}, cellValue = ValueI 21, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:45.820] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=SUM(\"5\", 15, TRUE)", language = Excel}, cellValue = ValueI 21, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:45.821] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:45.852] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (2,4)}, cellExpression = Expression {expression = \"=SUM(A5,A6, 2)\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:45.853] about to start dispatch

[2015-12-13 05:10:45.853] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "=SUM(A5,A6, 2)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:45.853] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:45.854] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(2,4)&I/INIT_SHEET_ID/(1,5)&I/INIT_SHEET_ID/(1,6)\""

[2015-12-13 05:10:45.854] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (2,4)},[IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}),IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,6)})])]

[2015-12-13 05:10:45.855] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(2,4)\""

[2015-12-13 05:10:45.855] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}]

[2015-12-13 05:10:45.856] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "=SUM(A5,A6, 2)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:45.856] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(2,4)\""

[2015-12-13 05:10:45.856] Got ancestor locs: [IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,6)}),IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,5)})]

[2015-12-13 05:10:45.857] Starting eval chain

[2015-12-13 05:10:45.857] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "=SUM(A5,A6, 2)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:45.857] Starting eval code

[2015-12-13 05:10:45.857] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "TRUE", language = Excel}, cellValue = ValueB True, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,6)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "=SUM(A5,A6, 2)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:45.858] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "=SUM(A5,A6, 2)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:45.858] the context insert has value CellValue (ValueI 2)

[2015-12-13 05:10:45.858] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:45.858] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:45.858] DECOUPLED CELLS: []

[2015-12-13 05:10:45.862] empty dispatch

[2015-12-13 05:10:45.862] empty evalchain

[2015-12-13 05:10:45.862] finished dispatch

[2015-12-13 05:10:45.863] updated DB after dispatch

[2015-12-13 05:10:45.868] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "=SUM(A5,A6, 2)", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:45.868] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "=SUM(A5,A6, 2)", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:45.869] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:45.910] Message: "ClientMessage {clientAction = Get, clientPayload = PayloadLL [Index {locSheetId = \"INIT_SHEET_ID\", index = (2,1)}]}"

[2015-12-13 05:10:45.911] Server sent message: ServerMessage {serverAction = Get, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=SUM(A1,A2)", language = Excel}, cellValue = ValueI 10, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:45.955] Message: "ClientMessage {clientAction = Get, clientPayload = PayloadLL [Index {locSheetId = \"INIT_SHEET_ID\", index = (2,2)}]}"

[2015-12-13 05:10:45.955] Server sent message: ServerMessage {serverAction = Get, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=SUM(A2:A5,15)", language = Excel}, cellValue = ValueI 55, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.006] Message: "ClientMessage {clientAction = Get, clientPayload = PayloadLL [Index {locSheetId = \"INIT_SHEET_ID\", index = (2,3)}]}"

[2015-12-13 05:10:46.007] Server sent message: ServerMessage {serverAction = Get, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=SUM(\"5\", 15, TRUE)", language = Excel}, cellValue = ValueI 21, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.057] Message: "ClientMessage {clientAction = Get, clientPayload = PayloadLL [Index {locSheetId = \"INIT_SHEET_ID\", index = (2,4)}]}"

[2015-12-13 05:10:46.058] Server sent message: ServerMessage {serverAction = Get, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "=SUM(A5,A6, 2)", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.108] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"Sheet1\", sheetPermissions = Blacklist []})}"

[2015-12-13 05:10:46.109] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:46.110] Set cell ancestors: []

[2015-12-13 05:10:46.110] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:46.110] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:46.159] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}, cellExpression = Expression {expression = \"Data1\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:46.160] about to start dispatch

[2015-12-13 05:10:46.160] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "Data1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.160] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:46.160] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:46.161] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},[])]

[2015-12-13 05:10:46.161] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:46.162] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}]

[2015-12-13 05:10:46.162] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "Data1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.163] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:46.163] Got ancestor locs: []

[2015-12-13 05:10:46.163] Starting eval chain

[2015-12-13 05:10:46.163] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "Data1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.163] Starting eval code

[2015-12-13 05:10:46.164] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "Data1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:46.164] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "Data1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:46.164] the context insert has value CellValue (ValueS "Data1")

[2015-12-13 05:10:46.164] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:46.164] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:46.164] DECOUPLED CELLS: []

[2015-12-13 05:10:46.165] empty dispatch

[2015-12-13 05:10:46.165] empty evalchain

[2015-12-13 05:10:46.165] finished dispatch

[2015-12-13 05:10:46.171] updated DB after dispatch

[2015-12-13 05:10:46.171] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "Data1", language = Excel}, cellValue = ValueS "Data1", cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.171] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "Data1", language = Excel}, cellValue = ValueS "Data1", cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.172] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:46.210] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (1,2)}, cellExpression = Expression {expression = \"3\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:46.211] about to start dispatch

[2015-12-13 05:10:46.211] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.211] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:46.211] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(1,2)\""

[2015-12-13 05:10:46.212] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},[])]

[2015-12-13 05:10:46.212] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(1,2)\""

[2015-12-13 05:10:46.216] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}]

[2015-12-13 05:10:46.216] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.216] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(1,2)\""

[2015-12-13 05:10:46.217] Got ancestor locs: []

[2015-12-13 05:10:46.217] Starting eval chain

[2015-12-13 05:10:46.217] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.217] Starting eval code

[2015-12-13 05:10:46.218] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:46.222] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:46.222] the context insert has value CellValue (ValueI 3)

[2015-12-13 05:10:46.223] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:46.223] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:46.223] DECOUPLED CELLS: []

[2015-12-13 05:10:46.223] empty dispatch

[2015-12-13 05:10:46.223] empty evalchain

[2015-12-13 05:10:46.223] finished dispatch

[2015-12-13 05:10:46.224] updated DB after dispatch

[2015-12-13 05:10:46.225] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.225] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.225] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:46.261] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (1,3)}, cellExpression = Expression {expression = \"2\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:46.262] about to start dispatch

[2015-12-13 05:10:46.262] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.262] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:46.262] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(1,3)\""

[2015-12-13 05:10:46.263] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (1,3)},[])]

[2015-12-13 05:10:46.263] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(1,3)\""

[2015-12-13 05:10:46.271] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}]

[2015-12-13 05:10:46.271] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.271] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(1,3)\""

[2015-12-13 05:10:46.272] Got ancestor locs: []

[2015-12-13 05:10:46.272] Starting eval chain

[2015-12-13 05:10:46.272] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.272] Starting eval code

[2015-12-13 05:10:46.272] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:46.273] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:46.273] the context insert has value CellValue (ValueI 2)

[2015-12-13 05:10:46.273] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:46.273] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:46.273] DECOUPLED CELLS: []

[2015-12-13 05:10:46.274] empty dispatch

[2015-12-13 05:10:46.274] empty evalchain

[2015-12-13 05:10:46.274] finished dispatch

[2015-12-13 05:10:46.275] updated DB after dispatch

[2015-12-13 05:10:46.278] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.278] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.278] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:46.313] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (1,4)}, cellExpression = Expression {expression = \"4\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:46.313] about to start dispatch

[2015-12-13 05:10:46.314] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "4", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.314] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:46.314] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(1,4)\""

[2015-12-13 05:10:46.315] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (1,4)},[])]

[2015-12-13 05:10:46.315] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(1,4)\""

[2015-12-13 05:10:46.318] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}]

[2015-12-13 05:10:46.319] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "4", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.319] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(1,4)\""

[2015-12-13 05:10:46.319] Got ancestor locs: []

[2015-12-13 05:10:46.320] Starting eval chain

[2015-12-13 05:10:46.320] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "4", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.320] Starting eval code

[2015-12-13 05:10:46.320] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "4", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:46.320] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "4", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:46.320] the context insert has value CellValue (ValueI 4)

[2015-12-13 05:10:46.321] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:46.321] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:46.321] DECOUPLED CELLS: []

[2015-12-13 05:10:46.321] empty dispatch

[2015-12-13 05:10:46.321] empty evalchain

[2015-12-13 05:10:46.321] finished dispatch

[2015-12-13 05:10:46.322] updated DB after dispatch

[2015-12-13 05:10:46.322] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "4", language = Excel}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.322] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "4", language = Excel}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.323] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:46.363] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (1,5)}, cellExpression = Expression {expression = \"5\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:46.364] about to start dispatch

[2015-12-13 05:10:46.364] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "5", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.364] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:46.364] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(1,5)\""

[2015-12-13 05:10:46.365] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (1,5)},[])]

[2015-12-13 05:10:46.365] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(1,5)\""

[2015-12-13 05:10:46.366] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}]

[2015-12-13 05:10:46.366] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "5", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.366] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(1,5)\""

[2015-12-13 05:10:46.367] Got ancestor locs: []

[2015-12-13 05:10:46.370] Starting eval chain

[2015-12-13 05:10:46.370] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "5", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.371] Starting eval code

[2015-12-13 05:10:46.371] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "5", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:46.371] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "5", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:46.371] the context insert has value CellValue (ValueI 5)

[2015-12-13 05:10:46.371] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:46.371] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:46.371] DECOUPLED CELLS: []

[2015-12-13 05:10:46.373] empty dispatch

[2015-12-13 05:10:46.373] empty evalchain

[2015-12-13 05:10:46.374] finished dispatch

[2015-12-13 05:10:46.374] updated DB after dispatch

[2015-12-13 05:10:46.375] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "5", language = Excel}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.375] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "5", language = Excel}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.375] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:46.415] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (1,6)}, cellExpression = Expression {expression = \"6\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:46.415] about to start dispatch

[2015-12-13 05:10:46.415] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,6)}, cellExpression = Expression {expression = "6", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.415] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:46.416] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(1,6)\""

[2015-12-13 05:10:46.416] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (1,6)},[])]

[2015-12-13 05:10:46.418] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(1,6)\""

[2015-12-13 05:10:46.419] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (1,6)}]

[2015-12-13 05:10:46.419] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,6)}, cellExpression = Expression {expression = "6", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.419] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(1,6)\""

[2015-12-13 05:10:46.420] Got ancestor locs: []

[2015-12-13 05:10:46.420] Starting eval chain

[2015-12-13 05:10:46.420] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,6)}, cellExpression = Expression {expression = "6", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.420] Starting eval code

[2015-12-13 05:10:46.420] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,6)}, cellExpression = Expression {expression = "6", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:46.420] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,6)}, cellExpression = Expression {expression = "6", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:46.420] the context insert has value CellValue (ValueI 6)

[2015-12-13 05:10:46.421] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:46.421] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:46.421] DECOUPLED CELLS: []

[2015-12-13 05:10:46.422] empty dispatch

[2015-12-13 05:10:46.422] empty evalchain

[2015-12-13 05:10:46.423] finished dispatch

[2015-12-13 05:10:46.423] updated DB after dispatch

[2015-12-13 05:10:46.424] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,6)}, cellExpression = Expression {expression = "6", language = Excel}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.424] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,6)}, cellExpression = Expression {expression = "6", language = Excel}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.424] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:46.466] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (1,7)}, cellExpression = Expression {expression = \"Formula\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:46.466] about to start dispatch

[2015-12-13 05:10:46.466] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,7)}, cellExpression = Expression {expression = "Formula", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.467] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:46.467] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(1,7)\""

[2015-12-13 05:10:46.467] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (1,7)},[])]

[2015-12-13 05:10:46.468] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(1,7)\""

[2015-12-13 05:10:46.468] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (1,7)}]

[2015-12-13 05:10:46.469] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,7)}, cellExpression = Expression {expression = "Formula", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.469] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(1,7)\""

[2015-12-13 05:10:46.469] Got ancestor locs: []

[2015-12-13 05:10:46.469] Starting eval chain

[2015-12-13 05:10:46.469] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,7)}, cellExpression = Expression {expression = "Formula", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.470] Starting eval code

[2015-12-13 05:10:46.470] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,7)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,7)}, cellExpression = Expression {expression = "Formula", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:46.470] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,7)}, cellExpression = Expression {expression = "Formula", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:46.470] the context insert has value CellValue (ValueS "Formula")

[2015-12-13 05:10:46.470] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:46.470] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:46.470] DECOUPLED CELLS: []

[2015-12-13 05:10:46.471] empty dispatch

[2015-12-13 05:10:46.471] empty evalchain

[2015-12-13 05:10:46.471] finished dispatch

[2015-12-13 05:10:46.471] updated DB after dispatch

[2015-12-13 05:10:46.472] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,7)}, cellExpression = Expression {expression = "Formula", language = Excel}, cellValue = ValueS "Formula", cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.472] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,7)}, cellExpression = Expression {expression = "Formula", language = Excel}, cellValue = ValueS "Formula", cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.472] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:46.517] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (1,8)}, cellExpression = Expression {expression = \"=COVAR(A2:A6, B2:B6)\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:46.517] about to start dispatch

[2015-12-13 05:10:46.518] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.518] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:46.518] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(1,8)&R/INIT_SHEET_ID/((1,2),(1,6))&R/INIT_SHEET_ID/((2,2),(2,6))\""

[2015-12-13 05:10:46.519] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (1,8)},[RangeRef (Range {rangeSheetId = "INIT_SHEET_ID", range = ((1,2),(1,6))}),RangeRef (Range {rangeSheetId = "INIT_SHEET_ID", range = ((2,2),(2,6))})])]

[2015-12-13 05:10:46.520] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(1,8)\""

[2015-12-13 05:10:46.520] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}]

[2015-12-13 05:10:46.520] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.521] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(1,8)\""

[2015-12-13 05:10:46.521] Got ancestor locs: [RangeRef (Range {rangeSheetId = "INIT_SHEET_ID", range = ((2,2),(2,6))}),RangeRef (Range {rangeSheetId = "INIT_SHEET_ID", range = ((1,2),(1,6))})]

[2015-12-13 05:10:46.522] Starting eval chain

[2015-12-13 05:10:46.522] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.522] Starting eval code

[2015-12-13 05:10:46.522] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "4", language = Excel}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "5", language = Excel}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,6)}, cellExpression = Expression {expression = "6", language = Excel}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,8)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:46.524] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:46.524] the context insert has value CellValue (ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"})

[2015-12-13 05:10:46.524] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:46.524] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:46.524] DECOUPLED CELLS: []

[2015-12-13 05:10:46.525] empty dispatch

[2015-12-13 05:10:46.525] empty evalchain

[2015-12-13 05:10:46.525] finished dispatch

[2015-12-13 05:10:46.525] updated DB after dispatch

[2015-12-13 05:10:46.526] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.526] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.526] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:46.568] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (2,1)}, cellExpression = Expression {expression = \"Data2\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:46.569] about to start dispatch

[2015-12-13 05:10:46.569] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "Data2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.569] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:46.569] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(2,1)\""

[2015-12-13 05:10:46.570] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (2,1)},[])]

[2015-12-13 05:10:46.570] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(2,1)\""

[2015-12-13 05:10:46.571] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}]

[2015-12-13 05:10:46.571] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "Data2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.571] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(2,1)\""

[2015-12-13 05:10:46.573] Got ancestor locs: []

[2015-12-13 05:10:46.573] Starting eval chain

[2015-12-13 05:10:46.573] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "Data2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.573] Starting eval code

[2015-12-13 05:10:46.573] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (2,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "Data2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:46.575] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "Data2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:46.575] the context insert has value CellValue (ValueS "Data2")

[2015-12-13 05:10:46.576] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:46.576] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:46.576] DECOUPLED CELLS: []

[2015-12-13 05:10:46.576] empty dispatch

[2015-12-13 05:10:46.576] empty evalchain

[2015-12-13 05:10:46.576] finished dispatch

[2015-12-13 05:10:46.577] updated DB after dispatch

[2015-12-13 05:10:46.578] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "Data2", language = Excel}, cellValue = ValueS "Data2", cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.578] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "Data2", language = Excel}, cellValue = ValueS "Data2", cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.579] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:46.619] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (2,2)}, cellExpression = Expression {expression = \"9\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:46.625] about to start dispatch

[2015-12-13 05:10:46.625] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "9", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.625] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:46.626] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(2,2)\""

[2015-12-13 05:10:46.626] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (2,2)},[])]

[2015-12-13 05:10:46.627] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(2,2)\""

[2015-12-13 05:10:46.627] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (2,2)},Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}]

[2015-12-13 05:10:46.629] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "9", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.629] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(2,2)`I/INIT_SHEET_ID/(1,8)\""

[2015-12-13 05:10:46.630] Got ancestor locs: [RangeRef (Range {rangeSheetId = "INIT_SHEET_ID", range = ((2,2),(2,6))}),RangeRef (Range {rangeSheetId = "INIT_SHEET_ID", range = ((1,2),(1,6))})]

[2015-12-13 05:10:46.631] Starting eval chain

[2015-12-13 05:10:46.631] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "9", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.634] Starting eval code

[2015-12-13 05:10:46.634] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "4", language = Excel}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "5", language = Excel}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,6)}, cellExpression = Expression {expression = "6", language = Excel}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "9", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:46.643] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "9", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:46.645] the context insert has value CellValue (ValueI 9)

[2015-12-13 05:10:46.645] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:46.645] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:46.645] DECOUPLED CELLS: []

[2015-12-13 05:10:46.645] empty dispatch

[2015-12-13 05:10:46.646] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.646] Starting eval code

[2015-12-13 05:10:46.646] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "4", language = Excel}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "5", language = Excel}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,6)}, cellExpression = Expression {expression = "6", language = Excel}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "9", language = Excel}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:46.647] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:46.647] the context insert has value CellValue (ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"})

[2015-12-13 05:10:46.647] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:46.647] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:46.647] DECOUPLED CELLS: []

[2015-12-13 05:10:46.647] empty dispatch

[2015-12-13 05:10:46.648] empty evalchain

[2015-12-13 05:10:46.648] finished dispatch

[2015-12-13 05:10:46.649] updated DB after dispatch

[2015-12-13 05:10:46.649] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "9", language = Excel}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.649] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "9", language = Excel}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.650] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:46.670] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (2,3)}, cellExpression = Expression {expression = \"7\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:46.673] about to start dispatch

[2015-12-13 05:10:46.673] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "7", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.673] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:46.673] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(2,3)\""

[2015-12-13 05:10:46.674] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (2,3)},[])]

[2015-12-13 05:10:46.674] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(2,3)\""

[2015-12-13 05:10:46.675] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (2,3)},Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}]

[2015-12-13 05:10:46.678] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "7", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.679] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(2,3)`I/INIT_SHEET_ID/(1,8)\""

[2015-12-13 05:10:46.679] Got ancestor locs: [RangeRef (Range {rangeSheetId = "INIT_SHEET_ID", range = ((2,2),(2,6))}),RangeRef (Range {rangeSheetId = "INIT_SHEET_ID", range = ((1,2),(1,6))})]

[2015-12-13 05:10:46.685] Starting eval chain

[2015-12-13 05:10:46.685] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "7", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.685] Starting eval code

[2015-12-13 05:10:46.685] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "4", language = Excel}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "5", language = Excel}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,6)}, cellExpression = Expression {expression = "6", language = Excel}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "9", language = Excel}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "7", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:46.686] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "7", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:46.687] the context insert has value CellValue (ValueI 7)

[2015-12-13 05:10:46.687] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:46.687] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:46.687] DECOUPLED CELLS: []

[2015-12-13 05:10:46.687] empty dispatch

[2015-12-13 05:10:46.687] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.690] Starting eval code

[2015-12-13 05:10:46.690] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "4", language = Excel}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "5", language = Excel}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,6)}, cellExpression = Expression {expression = "6", language = Excel}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "9", language = Excel}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "7", language = Excel}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:46.695] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:46.695] the context insert has value CellValue (ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"})

[2015-12-13 05:10:46.695] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:46.695] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:46.695] DECOUPLED CELLS: []

[2015-12-13 05:10:46.696] empty dispatch

[2015-12-13 05:10:46.696] empty evalchain

[2015-12-13 05:10:46.696] finished dispatch

[2015-12-13 05:10:46.697] updated DB after dispatch

[2015-12-13 05:10:46.697] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "7", language = Excel}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.698] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "7", language = Excel}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.698] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:46.721] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (2,4)}, cellExpression = Expression {expression = \"12\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:46.723] about to start dispatch

[2015-12-13 05:10:46.723] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "12", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.723] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:46.723] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(2,4)\""

[2015-12-13 05:10:46.724] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (2,4)},[])]

[2015-12-13 05:10:46.725] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(2,4)\""

[2015-12-13 05:10:46.725] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (2,4)},Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}]

[2015-12-13 05:10:46.726] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "12", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.735] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(2,4)`I/INIT_SHEET_ID/(1,8)\""

[2015-12-13 05:10:46.735] Got ancestor locs: [RangeRef (Range {rangeSheetId = "INIT_SHEET_ID", range = ((2,2),(2,6))}),RangeRef (Range {rangeSheetId = "INIT_SHEET_ID", range = ((1,2),(1,6))})]

[2015-12-13 05:10:46.736] Starting eval chain

[2015-12-13 05:10:46.736] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "12", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.736] Starting eval code

[2015-12-13 05:10:46.736] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "4", language = Excel}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "5", language = Excel}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,6)}, cellExpression = Expression {expression = "6", language = Excel}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "9", language = Excel}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "7", language = Excel}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "12", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:46.738] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "12", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:46.738] the context insert has value CellValue (ValueI 12)

[2015-12-13 05:10:46.738] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:46.738] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:46.738] DECOUPLED CELLS: []

[2015-12-13 05:10:46.738] empty dispatch

[2015-12-13 05:10:46.739] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.739] Starting eval code

[2015-12-13 05:10:46.739] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "4", language = Excel}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "5", language = Excel}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,6)}, cellExpression = Expression {expression = "6", language = Excel}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "9", language = Excel}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "7", language = Excel}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "12", language = Excel}, cellValue = ValueI 12, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:46.739] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:46.740] the context insert has value CellValue (ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"})

[2015-12-13 05:10:46.740] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:46.740] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:46.740] DECOUPLED CELLS: []

[2015-12-13 05:10:46.740] empty dispatch

[2015-12-13 05:10:46.740] empty evalchain

[2015-12-13 05:10:46.740] finished dispatch

[2015-12-13 05:10:46.742] updated DB after dispatch

[2015-12-13 05:10:46.742] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "12", language = Excel}, cellValue = ValueI 12, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.742] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "12", language = Excel}, cellValue = ValueI 12, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.746] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:46.772] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (2,5)}, cellExpression = Expression {expression = \"15\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:46.773] about to start dispatch

[2015-12-13 05:10:46.773] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "15", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.773] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:46.773] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(2,5)\""

[2015-12-13 05:10:46.774] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (2,5)},[])]

[2015-12-13 05:10:46.774] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(2,5)\""

[2015-12-13 05:10:46.775] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (2,5)},Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}]

[2015-12-13 05:10:46.776] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "15", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.782] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(2,5)`I/INIT_SHEET_ID/(1,8)\""

[2015-12-13 05:10:46.784] Got ancestor locs: [RangeRef (Range {rangeSheetId = "INIT_SHEET_ID", range = ((2,2),(2,6))}),RangeRef (Range {rangeSheetId = "INIT_SHEET_ID", range = ((1,2),(1,6))})]

[2015-12-13 05:10:46.791] Starting eval chain

[2015-12-13 05:10:46.791] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "15", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.791] Starting eval code

[2015-12-13 05:10:46.791] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "4", language = Excel}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "5", language = Excel}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,6)}, cellExpression = Expression {expression = "6", language = Excel}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "9", language = Excel}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "7", language = Excel}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "12", language = Excel}, cellValue = ValueI 12, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "15", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:46.793] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "15", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:46.793] the context insert has value CellValue (ValueI 15)

[2015-12-13 05:10:46.793] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:46.794] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:46.794] DECOUPLED CELLS: []

[2015-12-13 05:10:46.794] empty dispatch

[2015-12-13 05:10:46.794] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.794] Starting eval code

[2015-12-13 05:10:46.794] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "4", language = Excel}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "5", language = Excel}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,6)}, cellExpression = Expression {expression = "6", language = Excel}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "9", language = Excel}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "7", language = Excel}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "12", language = Excel}, cellValue = ValueI 12, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "15", language = Excel}, cellValue = ValueI 15, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:46.795] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:46.795] the context insert has value CellValue (ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"})

[2015-12-13 05:10:46.795] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:46.795] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:46.795] DECOUPLED CELLS: []

[2015-12-13 05:10:46.796] empty dispatch

[2015-12-13 05:10:46.796] empty evalchain

[2015-12-13 05:10:46.796] finished dispatch

[2015-12-13 05:10:46.797] updated DB after dispatch

[2015-12-13 05:10:46.797] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "15", language = Excel}, cellValue = ValueI 15, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.805] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "15", language = Excel}, cellValue = ValueI 15, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.805] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:46.823] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (2,6)}, cellExpression = Expression {expression = \"17\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:46.824] about to start dispatch

[2015-12-13 05:10:46.824] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "17", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.824] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:46.824] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(2,6)\""

[2015-12-13 05:10:46.825] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (2,6)},[])]

[2015-12-13 05:10:46.825] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(2,6)\""

[2015-12-13 05:10:46.826] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (2,6)},Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}]

[2015-12-13 05:10:46.827] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "17", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.827] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(2,6)`I/INIT_SHEET_ID/(1,8)\""

[2015-12-13 05:10:46.828] Got ancestor locs: [RangeRef (Range {rangeSheetId = "INIT_SHEET_ID", range = ((2,2),(2,6))}),RangeRef (Range {rangeSheetId = "INIT_SHEET_ID", range = ((1,2),(1,6))})]

[2015-12-13 05:10:46.836] Starting eval chain

[2015-12-13 05:10:46.836] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "17", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.837] Starting eval code

[2015-12-13 05:10:46.837] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "4", language = Excel}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "5", language = Excel}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,6)}, cellExpression = Expression {expression = "6", language = Excel}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "9", language = Excel}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "7", language = Excel}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "12", language = Excel}, cellValue = ValueI 12, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "15", language = Excel}, cellValue = ValueI 15, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "17", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:46.842] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "17", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:46.842] the context insert has value CellValue (ValueI 17)

[2015-12-13 05:10:46.842] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:46.842] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:46.843] DECOUPLED CELLS: []

[2015-12-13 05:10:46.843] empty dispatch

[2015-12-13 05:10:46.843] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.843] Starting eval code

[2015-12-13 05:10:46.843] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "4", language = Excel}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "5", language = Excel}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,6)}, cellExpression = Expression {expression = "6", language = Excel}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "9", language = Excel}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "7", language = Excel}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "12", language = Excel}, cellValue = ValueI 12, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "15", language = Excel}, cellValue = ValueI 15, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "17", language = Excel}, cellValue = ValueI 17, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:46.844] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #DIV/0! error, possibly due to dividing by zero (come on now!)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:46.845] the context insert has value CellValue (ValueD 5.2)

[2015-12-13 05:10:46.845] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:46.845] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:46.845] DECOUPLED CELLS: []

[2015-12-13 05:10:46.845] empty dispatch

[2015-12-13 05:10:46.845] empty evalchain

[2015-12-13 05:10:46.845] finished dispatch

[2015-12-13 05:10:46.847] updated DB after dispatch

[2015-12-13 05:10:46.847] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueD 5.2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "17", language = Excel}, cellValue = ValueI 17, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.848] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueD 5.2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "17", language = Excel}, cellValue = ValueI 17, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.882] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:46.883] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (2,7)}, cellExpression = Expression {expression = \"Description\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:46.883] about to start dispatch

[2015-12-13 05:10:46.883] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,7)}, cellExpression = Expression {expression = "Description", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.886] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:46.886] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(2,7)\""

[2015-12-13 05:10:46.887] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (2,7)},[])]

[2015-12-13 05:10:46.887] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(2,7)\""

[2015-12-13 05:10:46.888] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (2,7)}]

[2015-12-13 05:10:46.896] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,7)}, cellExpression = Expression {expression = "Description", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.897] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(2,7)\""

[2015-12-13 05:10:46.897] Got ancestor locs: []

[2015-12-13 05:10:46.897] Starting eval chain

[2015-12-13 05:10:46.897] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,7)}, cellExpression = Expression {expression = "Description", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.897] Starting eval code

[2015-12-13 05:10:46.898] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (2,7)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,7)}, cellExpression = Expression {expression = "Description", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:46.898] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,7)}, cellExpression = Expression {expression = "Description", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:46.898] the context insert has value CellValue (ValueS "Description")

[2015-12-13 05:10:46.898] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:46.898] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:46.898] DECOUPLED CELLS: []

[2015-12-13 05:10:46.898] empty dispatch

[2015-12-13 05:10:46.899] empty evalchain

[2015-12-13 05:10:46.902] finished dispatch

[2015-12-13 05:10:46.903] updated DB after dispatch

[2015-12-13 05:10:46.903] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,7)}, cellExpression = Expression {expression = "Description", language = Excel}, cellValue = ValueS "Description", cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.931] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,7)}, cellExpression = Expression {expression = "Description", language = Excel}, cellValue = ValueS "Description", cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.931] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:46.976] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (2,8)}, cellExpression = Expression {expression = \"Covariance, the average of the products of deviations for each data point pair above.\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:46.977] about to start dispatch

[2015-12-13 05:10:46.977] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,8)}, cellExpression = Expression {expression = "Covariance, the average of the products of deviations for each data point pair above.", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.977] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:46.977] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(2,8)\""

[2015-12-13 05:10:46.978] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (2,8)},[])]

[2015-12-13 05:10:46.983] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(2,8)\""

[2015-12-13 05:10:46.992] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (2,8)}]

[2015-12-13 05:10:46.992] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,8)}, cellExpression = Expression {expression = "Covariance, the average of the products of deviations for each data point pair above.", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.992] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(2,8)\""

[2015-12-13 05:10:46.993] Got ancestor locs: []

[2015-12-13 05:10:46.993] Starting eval chain

[2015-12-13 05:10:46.993] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,8)}, cellExpression = Expression {expression = "Covariance, the average of the products of deviations for each data point pair above.", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:46.993] Starting eval code

[2015-12-13 05:10:46.994] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (2,8)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,8)}, cellExpression = Expression {expression = "Covariance, the average of the products of deviations for each data point pair above.", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:46.994] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,8)}, cellExpression = Expression {expression = "Covariance, the average of the products of deviations for each data point pair above.", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:46.994] the context insert has value CellValue (ValueS "Covariance, the average of the products of deviations for each data point pair above.")

[2015-12-13 05:10:46.994] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:46.994] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:46.995] DECOUPLED CELLS: []

[2015-12-13 05:10:46.995] empty dispatch

[2015-12-13 05:10:46.995] empty evalchain

[2015-12-13 05:10:46.995] finished dispatch

[2015-12-13 05:10:46.996] updated DB after dispatch

[2015-12-13 05:10:46.996] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,8)}, cellExpression = Expression {expression = "Covariance, the average of the products of deviations for each data point pair above.", language = Excel}, cellValue = ValueS "Covariance, the average of the products of deviations for each data point pair above.", cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:46.996] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,8)}, cellExpression = Expression {expression = "Covariance, the average of the products of deviations for each data point pair above.", language = Excel}, cellValue = ValueS "Covariance, the average of the products of deviations for each data point pair above.", cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:47.004] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:47.027] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (3,7)}, cellExpression = Expression {expression = \"Result\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:47.029] about to start dispatch

[2015-12-13 05:10:47.029] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,7)}, cellExpression = Expression {expression = "Result", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:47.029] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:47.029] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(3,7)\""

[2015-12-13 05:10:47.030] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (3,7)},[])]

[2015-12-13 05:10:47.030] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(3,7)\""

[2015-12-13 05:10:47.031] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (3,7)}]

[2015-12-13 05:10:47.031] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,7)}, cellExpression = Expression {expression = "Result", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:47.032] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(3,7)\""

[2015-12-13 05:10:47.032] Got ancestor locs: []

[2015-12-13 05:10:47.032] Starting eval chain

[2015-12-13 05:10:47.032] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,7)}, cellExpression = Expression {expression = "Result", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:47.032] Starting eval code

[2015-12-13 05:10:47.032] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (3,7)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,7)}, cellExpression = Expression {expression = "Result", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:47.033] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,7)}, cellExpression = Expression {expression = "Result", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:47.033] the context insert has value CellValue (ValueS "Result")

[2015-12-13 05:10:47.033] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:47.033] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:47.033] DECOUPLED CELLS: []

[2015-12-13 05:10:47.033] empty dispatch

[2015-12-13 05:10:47.034] empty evalchain

[2015-12-13 05:10:47.034] finished dispatch

[2015-12-13 05:10:47.034] updated DB after dispatch

[2015-12-13 05:10:47.035] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,7)}, cellExpression = Expression {expression = "Result", language = Excel}, cellValue = ValueS "Result", cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:47.035] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,7)}, cellExpression = Expression {expression = "Result", language = Excel}, cellValue = ValueS "Result", cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:47.043] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:47.079] Message: "ClientMessage {clientAction = Get, clientPayload = PayloadLL [Index {locSheetId = \"INIT_SHEET_ID\", index = (1,8)}]}"

[2015-12-13 05:10:47.079] Server sent message: ServerMessage {serverAction = Get, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "=COVAR(A2:A6, B2:B6)", language = Excel}, cellValue = ValueD 5.2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:47.130] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"Sheet1\", sheetPermissions = Blacklist []})}"

[2015-12-13 05:10:47.130] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:47.132] Set cell ancestors: []

[2015-12-13 05:10:47.132] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:47.132] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:47.181] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}, cellExpression = Expression {expression = \"range(10)\", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:47.190] about to start dispatch

[2015-12-13 05:10:47.190] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(10)", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:47.190] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:47.191] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:47.191] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},[])]

[2015-12-13 05:10:47.192] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:47.192] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}]

[2015-12-13 05:10:47.192] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(10)", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:47.193] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:47.198] Got ancestor locs: []

[2015-12-13 05:10:47.199] Starting eval chain

[2015-12-13 05:10:47.199] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(10)", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:47.199] Starting eval code

[2015-12-13 05:10:47.199] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(10)", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:47.199] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(10)", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:47.200] the context insert has value CellValue (ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"})

[2015-12-13 05:10:47.201] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:47.201] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:47.201] DECOUPLED CELLS: []

[2015-12-13 05:10:47.201] empty dispatch

[2015-12-13 05:10:47.203] empty evalchain

[2015-12-13 05:10:47.203] finished dispatch

[2015-12-13 05:10:47.204] updated DB after dispatch

[2015-12-13 05:10:47.204] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(10)", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:47.205] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(10)", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:47.205] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:47.232] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (2,1)}, cellExpression = Expression {expression = \"=A1+A2\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:47.232] about to start dispatch

[2015-12-13 05:10:47.233] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A1+A2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:47.233] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:47.233] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(2,1)&I/INIT_SHEET_ID/(1,1)&I/INIT_SHEET_ID/(1,2)\""

[2015-12-13 05:10:47.234] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (2,1)},[IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}),IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,2)})])]

[2015-12-13 05:10:47.234] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(2,1)\""

[2015-12-13 05:10:47.237] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}]

[2015-12-13 05:10:47.238] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A1+A2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:47.238] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(2,1)\""

[2015-12-13 05:10:47.239] Got ancestor locs: [IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}),IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,1)})]

[2015-12-13 05:10:47.248] Starting eval chain

[2015-12-13 05:10:47.249] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A1+A2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:47.249] Starting eval code

[2015-12-13 05:10:47.249] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(10)", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A1+A2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:47.250] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A1+A2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:47.250] the context insert has value CellValue (ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"})

[2015-12-13 05:10:47.250] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:47.250] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:47.251] DECOUPLED CELLS: []

[2015-12-13 05:10:47.251] empty dispatch

[2015-12-13 05:10:47.251] empty evalchain

[2015-12-13 05:10:47.251] finished dispatch

[2015-12-13 05:10:47.252] updated DB after dispatch

[2015-12-13 05:10:47.252] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A1+A2", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:47.252] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A1+A2", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:47.252] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:47.283] Message: "ClientMessage {clientAction = Get, clientPayload = PayloadLL [Index {locSheetId = \"INIT_SHEET_ID\", index = (2,1)}]}"

[2015-12-13 05:10:47.285] Server sent message: ServerMessage {serverAction = Get, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A1+A2", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:47.334] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"Sheet1\", sheetPermissions = Blacklist []})}"

[2015-12-13 05:10:47.334] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:47.335] Set cell ancestors: []

[2015-12-13 05:10:47.336] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:47.336] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:47.385] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}, cellExpression = Expression {expression = \"5\", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:47.386] about to start dispatch

[2015-12-13 05:10:47.386] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "5", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:47.393] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:47.393] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:47.394] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},[])]

[2015-12-13 05:10:47.394] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:47.395] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}]

[2015-12-13 05:10:47.395] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "5", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:47.395] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:47.396] Got ancestor locs: []

[2015-12-13 05:10:47.396] Starting eval chain

[2015-12-13 05:10:47.399] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "5", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:47.400] Starting eval code

[2015-12-13 05:10:47.400] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "5", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:47.400] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "5", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:47.405] the context insert has value CellValue (ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"})

[2015-12-13 05:10:47.405] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:47.405] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:47.405] DECOUPLED CELLS: []

[2015-12-13 05:10:47.405] empty dispatch

[2015-12-13 05:10:47.406] empty evalchain

[2015-12-13 05:10:47.406] finished dispatch

[2015-12-13 05:10:47.407] updated DB after dispatch

[2015-12-13 05:10:47.408] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "5", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:47.408] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "5", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:47.408] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:47.436] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (2,1)}, cellExpression = Expression {expression = \"=A2+A3\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:47.437] about to start dispatch

[2015-12-13 05:10:47.437] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A2+A3", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:47.437] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:47.438] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(2,1)&I/INIT_SHEET_ID/(1,2)&I/INIT_SHEET_ID/(1,3)\""

[2015-12-13 05:10:47.438] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (2,1)},[IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}),IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,3)})])]

[2015-12-13 05:10:47.439] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(2,1)\""

[2015-12-13 05:10:47.439] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}]

[2015-12-13 05:10:47.439] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A2+A3", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:47.439] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(2,1)\""

[2015-12-13 05:10:47.440] Got ancestor locs: [IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}),IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,2)})]

[2015-12-13 05:10:47.440] Starting eval chain

[2015-12-13 05:10:47.440] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A2+A3", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:47.441] Starting eval code

[2015-12-13 05:10:47.441] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A2+A3", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:47.441] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A2+A3", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:47.441] the context insert has value CellValue (ValueI 0)

[2015-12-13 05:10:47.442] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:47.442] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:47.442] DECOUPLED CELLS: []

[2015-12-13 05:10:47.442] empty dispatch

[2015-12-13 05:10:47.442] empty evalchain

[2015-12-13 05:10:47.442] finished dispatch

[2015-12-13 05:10:47.453] updated DB after dispatch

[2015-12-13 05:10:47.453] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A2+A3", language = Excel}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:47.453] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A2+A3", language = Excel}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:47.453] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:47.487] Message: "ClientMessage {clientAction = Get, clientPayload = PayloadLL [Index {locSheetId = \"INIT_SHEET_ID\", index = (2,1)}]}"

[2015-12-13 05:10:47.490] Server sent message: ServerMessage {serverAction = Get, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A2+A3", language = Excel}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:47.539] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (2,2)}, cellExpression = Expression {expression = \"=A1+A3\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:47.539] about to start dispatch

[2015-12-13 05:10:47.539] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=A1+A3", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:47.539] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:47.540] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(2,2)&I/INIT_SHEET_ID/(1,1)&I/INIT_SHEET_ID/(1,3)\""

[2015-12-13 05:10:47.540] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (2,2)},[IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}),IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,3)})])]

[2015-12-13 05:10:47.541] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(2,2)\""

[2015-12-13 05:10:47.541] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}]

[2015-12-13 05:10:47.551] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=A1+A3", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:47.551] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(2,2)\""

[2015-12-13 05:10:47.552] Got ancestor locs: [IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}),IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,1)})]

[2015-12-13 05:10:47.552] Starting eval chain

[2015-12-13 05:10:47.552] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=A1+A3", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:47.552] Starting eval code

[2015-12-13 05:10:47.557] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "5", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=A1+A3", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:47.558] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=A1+A3", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:47.558] the context insert has value CellValue (ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"})

[2015-12-13 05:10:47.558] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:47.558] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:47.558] DECOUPLED CELLS: []

[2015-12-13 05:10:47.559] empty dispatch

[2015-12-13 05:10:47.559] empty evalchain

[2015-12-13 05:10:47.559] finished dispatch

[2015-12-13 05:10:47.560] updated DB after dispatch

[2015-12-13 05:10:47.560] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=A1+A3", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:47.560] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=A1+A3", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:47.560] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:47.590] Message: "ClientMessage {clientAction = Get, clientPayload = PayloadLL [Index {locSheetId = \"INIT_SHEET_ID\", index = (2,2)}]}"

[2015-12-13 05:10:47.591] Server sent message: ServerMessage {serverAction = Get, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=A1+A3", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:47.641] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (2,3)}, cellExpression = Expression {expression = \"=A1*A2\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:47.642] about to start dispatch

[2015-12-13 05:10:47.642] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=A1*A2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:47.643] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:47.643] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(2,3)&I/INIT_SHEET_ID/(1,1)&I/INIT_SHEET_ID/(1,2)\""

[2015-12-13 05:10:47.644] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (2,3)},[IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}),IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,2)})])]

[2015-12-13 05:10:47.644] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(2,3)\""

[2015-12-13 05:10:47.651] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}]

[2015-12-13 05:10:47.651] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=A1*A2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:47.651] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(2,3)\""

[2015-12-13 05:10:47.652] Got ancestor locs: [IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}),IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,1)})]

[2015-12-13 05:10:47.655] Starting eval chain

[2015-12-13 05:10:47.655] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=A1*A2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:47.655] Starting eval code

[2015-12-13 05:10:47.655] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "5", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=A1*A2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:47.658] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=A1*A2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:47.658] the context insert has value CellValue (ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"})

[2015-12-13 05:10:47.658] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:47.658] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:47.658] DECOUPLED CELLS: []

[2015-12-13 05:10:47.658] empty dispatch

[2015-12-13 05:10:47.659] empty evalchain

[2015-12-13 05:10:47.659] finished dispatch

[2015-12-13 05:10:47.659] updated DB after dispatch

[2015-12-13 05:10:47.660] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=A1*A2", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:47.660] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=A1*A2", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:47.660] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:47.692] Message: "ClientMessage {clientAction = Get, clientPayload = PayloadLL [Index {locSheetId = \"INIT_SHEET_ID\", index = (2,3)}]}"

[2015-12-13 05:10:47.693] Server sent message: ServerMessage {serverAction = Get, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=A1*A2", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:47.743] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"Sheet1\", sheetPermissions = Blacklist []})}"

[2015-12-13 05:10:47.743] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:47.744] Set cell ancestors: []

[2015-12-13 05:10:47.745] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:47.745] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:47.794] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}, cellExpression = Expression {expression = \"1\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:47.794] about to start dispatch

[2015-12-13 05:10:47.795] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:47.795] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:47.795] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:47.796] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},[])]

[2015-12-13 05:10:47.797] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:47.798] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}]

[2015-12-13 05:10:47.798] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:47.798] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:47.806] Got ancestor locs: []

[2015-12-13 05:10:47.806] Starting eval chain

[2015-12-13 05:10:47.806] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:47.807] Starting eval code

[2015-12-13 05:10:47.807] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:47.807] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:47.807] the context insert has value CellValue (ValueI 1)

[2015-12-13 05:10:47.807] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:47.808] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:47.808] DECOUPLED CELLS: []

[2015-12-13 05:10:47.808] empty dispatch

[2015-12-13 05:10:47.808] empty evalchain

[2015-12-13 05:10:47.808] finished dispatch

[2015-12-13 05:10:47.809] updated DB after dispatch

[2015-12-13 05:10:47.809] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:47.809] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:47.810] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:47.845] Message: "ClientMessage {clientAction = Get, clientPayload = PayloadLL [Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}]}"

[2015-12-13 05:10:47.846] Server sent message: ServerMessage {serverAction = Get, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:47.898] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"Sheet1\", sheetPermissions = Blacklist []})}"

[2015-12-13 05:10:47.899] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:47.900] Set cell ancestors: []

[2015-12-13 05:10:47.900] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:47.900] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:47.947] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}, cellExpression = Expression {expression = \"\\\"hello\\\"hello\\\"hello\\\"\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:47.948] about to start dispatch

[2015-12-13 05:10:47.948] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "\"hello\"hello\"hello\"", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:47.948] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:47.949] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:47.949] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},[])]

[2015-12-13 05:10:47.950] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:47.950] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}]

[2015-12-13 05:10:47.958] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "\"hello\"hello\"hello\"", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:47.958] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:47.958] Got ancestor locs: []

[2015-12-13 05:10:47.959] Starting eval chain

[2015-12-13 05:10:47.962] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "\"hello\"hello\"hello\"", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:47.962] Starting eval code

[2015-12-13 05:10:47.962] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "\"hello\"hello\"hello\"", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:47.963] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "\"hello\"hello\"hello\"", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:47.963] the context insert has value CellValue (ValueS "\"hello\"hello\"hello\"")

[2015-12-13 05:10:47.963] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:47.963] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:47.963] DECOUPLED CELLS: []

[2015-12-13 05:10:47.963] empty dispatch

[2015-12-13 05:10:47.964] empty evalchain

[2015-12-13 05:10:47.964] finished dispatch

[2015-12-13 05:10:47.965] updated DB after dispatch

[2015-12-13 05:10:47.965] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "\"hello\"hello\"hello\"", language = Excel}, cellValue = ValueS "\"hello\"hello\"hello\"", cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:47.970] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "\"hello\"hello\"hello\"", language = Excel}, cellValue = ValueS "\"hello\"hello\"hello\"", cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:47.970] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:47.998] Message: "ClientMessage {clientAction = Get, clientPayload = PayloadLL [Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}]}"

[2015-12-13 05:10:47.999] Server sent message: ServerMessage {serverAction = Get, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "\"hello\"hello\"hello\"", language = Excel}, cellValue = ValueS "\"hello\"hello\"hello\"", cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:48.049] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"Sheet1\", sheetPermissions = Blacklist []})}"

[2015-12-13 05:10:48.050] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:48.052] Set cell ancestors: []

[2015-12-13 05:10:48.053] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:48.053] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:48.101] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}, cellExpression = Expression {expression = \"\\\"hello\\\"\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:48.101] about to start dispatch

[2015-12-13 05:10:48.102] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "\"hello\"", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:48.102] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:48.103] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:48.103] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},[])]

[2015-12-13 05:10:48.104] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:48.104] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}]

[2015-12-13 05:10:48.105] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "\"hello\"", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:48.105] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:48.105] Got ancestor locs: []

[2015-12-13 05:10:48.111] Starting eval chain

[2015-12-13 05:10:48.111] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "\"hello\"", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:48.111] Starting eval code

[2015-12-13 05:10:48.111] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "\"hello\"", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:48.111] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "\"hello\"", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:48.111] the context insert has value CellValue (ValueS "\"hello\"")

[2015-12-13 05:10:48.111] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:48.112] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:48.112] DECOUPLED CELLS: []

[2015-12-13 05:10:48.115] empty dispatch

[2015-12-13 05:10:48.115] empty evalchain

[2015-12-13 05:10:48.115] finished dispatch

[2015-12-13 05:10:48.116] updated DB after dispatch

[2015-12-13 05:10:48.116] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "\"hello\"", language = Excel}, cellValue = ValueS "\"hello\"", cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:48.116] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "\"hello\"", language = Excel}, cellValue = ValueS "\"hello\"", cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:48.117] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:48.152] Message: "ClientMessage {clientAction = Get, clientPayload = PayloadLL [Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}]}"

[2015-12-13 05:10:48.153] Server sent message: ServerMessage {serverAction = Get, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "\"hello\"", language = Excel}, cellValue = ValueS "\"hello\"", cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:48.203] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"Sheet1\", sheetPermissions = Blacklist []})}"

[2015-12-13 05:10:48.203] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:48.204] Set cell ancestors: []

[2015-12-13 05:10:48.204] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:48.204] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:48.254] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}, cellExpression = Expression {expression = \"=SUM(1,2)ASDF\\\"sadf\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:48.254] about to start dispatch

[2015-12-13 05:10:48.254] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "=SUM(1,2)ASDF\"sadf", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:48.255] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:48.255] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:48.256] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},[])]

[2015-12-13 05:10:48.256] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:48.256] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}]

[2015-12-13 05:10:48.257] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "=SUM(1,2)ASDF\"sadf", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:48.257] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:48.257] Got ancestor locs: []

[2015-12-13 05:10:48.257] Starting eval chain

[2015-12-13 05:10:48.258] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "=SUM(1,2)ASDF\"sadf", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:48.258] Starting eval code

[2015-12-13 05:10:48.258] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "=SUM(1,2)ASDF\"sadf", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:48.258] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "=SUM(1,2)ASDF\"sadf", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:48.258] the context insert has value CellValue (ValueError {errorMsg = "Excel #N/A error, possibly due to an error in syntax", errorType = "Excel"})

[2015-12-13 05:10:48.258] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:48.259] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:48.259] DECOUPLED CELLS: []

[2015-12-13 05:10:48.259] empty dispatch

[2015-12-13 05:10:48.259] empty evalchain

[2015-12-13 05:10:48.259] finished dispatch

[2015-12-13 05:10:48.260] updated DB after dispatch

[2015-12-13 05:10:48.260] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "=SUM(1,2)ASDF\"sadf", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an error in syntax", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:48.261] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "=SUM(1,2)ASDF\"sadf", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an error in syntax", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:48.261] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:48.305] Message: "ClientMessage {clientAction = Get, clientPayload = PayloadLL [Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}]}"

[2015-12-13 05:10:48.307] Server sent message: ServerMessage {serverAction = Get, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "=SUM(1,2)ASDF\"sadf", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an error in syntax", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:48.359] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"Sheet1\", sheetPermissions = Blacklist []})}"

[2015-12-13 05:10:48.359] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:48.360] Set cell ancestors: []

[2015-12-13 05:10:48.360] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:48.360] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:48.407] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}, cellExpression = Expression {expression = \"=SUM(1,SUM(2,3))\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:48.408] about to start dispatch

[2015-12-13 05:10:48.408] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "=SUM(1,SUM(2,3))", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:48.409] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:48.410] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:48.411] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},[])]

[2015-12-13 05:10:48.418] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:48.419] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}]

[2015-12-13 05:10:48.419] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "=SUM(1,SUM(2,3))", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:48.419] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:48.428] Got ancestor locs: []

[2015-12-13 05:10:48.428] Starting eval chain

[2015-12-13 05:10:48.428] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "=SUM(1,SUM(2,3))", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:48.428] Starting eval code

[2015-12-13 05:10:48.429] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "=SUM(1,SUM(2,3))", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:48.435] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "=SUM(1,SUM(2,3))", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:48.435] the context insert has value CellValue (ValueI 6)

[2015-12-13 05:10:48.435] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:48.435] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:48.435] DECOUPLED CELLS: []

[2015-12-13 05:10:48.436] empty dispatch

[2015-12-13 05:10:48.436] empty evalchain

[2015-12-13 05:10:48.436] finished dispatch

[2015-12-13 05:10:48.437] updated DB after dispatch

[2015-12-13 05:10:48.437] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "=SUM(1,SUM(2,3))", language = Excel}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:48.437] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "=SUM(1,SUM(2,3))", language = Excel}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:48.437] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:48.458] Message: "ClientMessage {clientAction = Get, clientPayload = PayloadLL [Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}]}"

[2015-12-13 05:10:48.459] Server sent message: ServerMessage {serverAction = Get, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "=SUM(1,SUM(2,3))", language = Excel}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:48.509] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"Sheet1\", sheetPermissions = Blacklist []})}"

[2015-12-13 05:10:48.510] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:48.511] Set cell ancestors: []

[2015-12-13 05:10:48.514] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:48.515] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:48.561] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}, cellExpression = Expression {expression = \"1\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:48.561] about to start dispatch

[2015-12-13 05:10:48.561] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:48.561] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:48.562] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:48.562] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},[])]

[2015-12-13 05:10:48.562] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:48.563] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}]

[2015-12-13 05:10:48.564] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:48.564] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:48.564] Got ancestor locs: []

[2015-12-13 05:10:48.564] Starting eval chain

[2015-12-13 05:10:48.570] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:48.571] Starting eval code

[2015-12-13 05:10:48.571] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:48.571] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:48.573] the context insert has value CellValue (ValueI 1)

[2015-12-13 05:10:48.573] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:48.573] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:48.573] DECOUPLED CELLS: []

[2015-12-13 05:10:48.573] empty dispatch

[2015-12-13 05:10:48.574] empty evalchain

[2015-12-13 05:10:48.574] finished dispatch

[2015-12-13 05:10:48.574] updated DB after dispatch

[2015-12-13 05:10:48.575] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:48.575] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:48.575] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:48.612] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (1,2)}, cellExpression = Expression {expression = \"2\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:48.612] about to start dispatch

[2015-12-13 05:10:48.612] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:48.612] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:48.613] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(1,2)\""

[2015-12-13 05:10:48.613] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},[])]

[2015-12-13 05:10:48.614] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(1,2)\""

[2015-12-13 05:10:48.618] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}]

[2015-12-13 05:10:48.618] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:48.619] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(1,2)\""

[2015-12-13 05:10:48.619] Got ancestor locs: []

[2015-12-13 05:10:48.619] Starting eval chain

[2015-12-13 05:10:48.620] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:48.620] Starting eval code

[2015-12-13 05:10:48.620] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:48.620] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:48.620] the context insert has value CellValue (ValueI 2)

[2015-12-13 05:10:48.620] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:48.620] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:48.621] DECOUPLED CELLS: []

[2015-12-13 05:10:48.621] empty dispatch

[2015-12-13 05:10:48.621] empty evalchain

[2015-12-13 05:10:48.621] finished dispatch

[2015-12-13 05:10:48.622] updated DB after dispatch

[2015-12-13 05:10:48.622] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:48.624] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:48.624] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:48.663] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (1,3)}, cellExpression = Expression {expression = \"=sUm(A1,A2)\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:48.663] about to start dispatch

[2015-12-13 05:10:48.663] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "=sUm(A1,A2)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:48.664] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:48.664] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(1,3)&I/INIT_SHEET_ID/(1,1)&I/INIT_SHEET_ID/(1,2)\""

[2015-12-13 05:10:48.665] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (1,3)},[IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}),IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,2)})])]

[2015-12-13 05:10:48.665] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(1,3)\""

[2015-12-13 05:10:48.675] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}]

[2015-12-13 05:10:48.676] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "=sUm(A1,A2)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:48.676] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(1,3)\""

[2015-12-13 05:10:48.676] Got ancestor locs: [IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}),IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,1)})]

[2015-12-13 05:10:48.679] Starting eval chain

[2015-12-13 05:10:48.679] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "=sUm(A1,A2)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:48.679] Starting eval code

[2015-12-13 05:10:48.679] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "=sUm(A1,A2)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:48.687] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "=sUm(A1,A2)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:48.687] the context insert has value CellValue (ValueI 3)

[2015-12-13 05:10:48.688] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:48.688] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:48.688] DECOUPLED CELLS: []

[2015-12-13 05:10:48.688] empty dispatch

[2015-12-13 05:10:48.688] empty evalchain

[2015-12-13 05:10:48.688] finished dispatch

[2015-12-13 05:10:48.691] updated DB after dispatch

[2015-12-13 05:10:48.691] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "=sUm(A1,A2)", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:48.691] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "=sUm(A1,A2)", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:48.692] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:48.714] Message: "ClientMessage {clientAction = Get, clientPayload = PayloadLL [Index {locSheetId = \"INIT_SHEET_ID\", index = (1,3)}]}"

[2015-12-13 05:10:48.714] Server sent message: ServerMessage {serverAction = Get, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "=sUm(A1,A2)", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:48.765] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"Sheet1\", sheetPermissions = Blacklist []})}"

[2015-12-13 05:10:48.765] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:48.766] Set cell ancestors: []

[2015-12-13 05:10:48.770] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:48.771] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:48.816] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}, cellExpression = Expression {expression = \"TrUe\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:48.817] about to start dispatch

[2015-12-13 05:10:48.817] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "TrUe", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:48.817] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:48.817] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:48.818] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},[])]

[2015-12-13 05:10:48.818] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:48.819] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}]

[2015-12-13 05:10:48.823] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "TrUe", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:48.823] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:48.823] Got ancestor locs: []

[2015-12-13 05:10:48.823] Starting eval chain

[2015-12-13 05:10:48.824] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "TrUe", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:48.824] Starting eval code

[2015-12-13 05:10:48.824] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "TrUe", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:48.824] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "TrUe", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:48.824] the context insert has value CellValue (ValueB True)

[2015-12-13 05:10:48.824] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:48.825] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:48.825] DECOUPLED CELLS: []

[2015-12-13 05:10:48.825] empty dispatch

[2015-12-13 05:10:48.825] empty evalchain

[2015-12-13 05:10:48.825] finished dispatch

[2015-12-13 05:10:48.826] updated DB after dispatch

[2015-12-13 05:10:48.826] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "TrUe", language = Excel}, cellValue = ValueB True, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:48.827] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "TrUe", language = Excel}, cellValue = ValueB True, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:48.827] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:48.867] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (1,2)}, cellExpression = Expression {expression = \"false\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:48.867] about to start dispatch

[2015-12-13 05:10:48.868] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "false", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:48.872] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:48.872] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(1,2)\""

[2015-12-13 05:10:48.873] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},[])]

[2015-12-13 05:10:48.873] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(1,2)\""

[2015-12-13 05:10:48.877] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}]

[2015-12-13 05:10:48.878] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "false", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:48.878] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(1,2)\""

[2015-12-13 05:10:48.878] Got ancestor locs: []

[2015-12-13 05:10:48.879] Starting eval chain

[2015-12-13 05:10:48.879] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "false", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:48.879] Starting eval code

[2015-12-13 05:10:48.880] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "false", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:48.880] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "false", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:48.880] the context insert has value CellValue (ValueB False)

[2015-12-13 05:10:48.880] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:48.880] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:48.880] DECOUPLED CELLS: []

[2015-12-13 05:10:48.881] empty dispatch

[2015-12-13 05:10:48.881] empty evalchain

[2015-12-13 05:10:48.881] finished dispatch

[2015-12-13 05:10:48.882] updated DB after dispatch

[2015-12-13 05:10:48.882] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "false", language = Excel}, cellValue = ValueB False, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:48.882] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "false", language = Excel}, cellValue = ValueB False, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:48.882] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:48.918] Message: "ClientMessage {clientAction = Get, clientPayload = PayloadLL [Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}]}"

[2015-12-13 05:10:48.922] Server sent message: ServerMessage {serverAction = Get, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "TrUe", language = Excel}, cellValue = ValueB True, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:48.969] Message: "ClientMessage {clientAction = Get, clientPayload = PayloadLL [Index {locSheetId = \"INIT_SHEET_ID\", index = (1,2)}]}"

[2015-12-13 05:10:48.970] Server sent message: ServerMessage {serverAction = Get, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "false", language = Excel}, cellValue = ValueB False, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:49.020] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"Sheet1\", sheetPermissions = Blacklist []})}"

[2015-12-13 05:10:49.022] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:49.023] Set cell ancestors: []

[2015-12-13 05:10:49.023] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:49.023] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:49.071] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}, cellExpression = Expression {expression = \"   \", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:49.072] about to start dispatch

[2015-12-13 05:10:49.072] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "   ", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.072] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:49.076] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:49.076] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},[])]

[2015-12-13 05:10:49.077] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:49.077] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}]

[2015-12-13 05:10:49.077] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "   ", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.078] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:49.078] Got ancestor locs: []

[2015-12-13 05:10:49.078] Starting eval chain

[2015-12-13 05:10:49.078] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "   ", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.079] Starting eval code

[2015-12-13 05:10:49.079] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "   ", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:49.079] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "   ", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:49.079] the context insert has value CellValue (ValueS "   ")

[2015-12-13 05:10:49.079] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:49.079] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:49.079] DECOUPLED CELLS: []

[2015-12-13 05:10:49.080] empty dispatch

[2015-12-13 05:10:49.080] empty evalchain

[2015-12-13 05:10:49.080] finished dispatch

[2015-12-13 05:10:49.080] updated DB after dispatch

[2015-12-13 05:10:49.081] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "   ", language = Excel}, cellValue = ValueS "   ", cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:49.081] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "   ", language = Excel}, cellValue = ValueS "   ", cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:49.082] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:49.122] Message: "ClientMessage {clientAction = Get, clientPayload = PayloadLL [Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}]}"

[2015-12-13 05:10:49.129] Server sent message: ServerMessage {serverAction = Get, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "   ", language = Excel}, cellValue = ValueS "   ", cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:49.174] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"Sheet1\", sheetPermissions = Blacklist []})}"

[2015-12-13 05:10:49.174] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:49.175] Set cell ancestors: []

[2015-12-13 05:10:49.175] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:49.175] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:49.225] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}, cellExpression = Expression {expression = \"=++--+-2\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:49.225] about to start dispatch

[2015-12-13 05:10:49.225] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "=++--+-2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.226] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:49.226] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:49.227] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},[])]

[2015-12-13 05:10:49.227] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:49.227] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}]

[2015-12-13 05:10:49.230] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "=++--+-2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.231] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:49.231] Got ancestor locs: []

[2015-12-13 05:10:49.231] Starting eval chain

[2015-12-13 05:10:49.231] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "=++--+-2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.232] Starting eval code

[2015-12-13 05:10:49.232] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "=++--+-2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:49.232] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "=++--+-2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:49.232] the context insert has value CellValue (ValueI (-2))

[2015-12-13 05:10:49.232] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:49.232] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:49.237] DECOUPLED CELLS: []

[2015-12-13 05:10:49.237] empty dispatch

[2015-12-13 05:10:49.237] empty evalchain

[2015-12-13 05:10:49.237] finished dispatch

[2015-12-13 05:10:49.238] updated DB after dispatch

[2015-12-13 05:10:49.238] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "=++--+-2", language = Excel}, cellValue = ValueI (-2), cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:49.239] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "=++--+-2", language = Excel}, cellValue = ValueI (-2), cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:49.239] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:49.276] Message: "ClientMessage {clientAction = Get, clientPayload = PayloadLL [Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}]}"

[2015-12-13 05:10:49.276] Server sent message: ServerMessage {serverAction = Get, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "=++--+-2", language = Excel}, cellValue = ValueI (-2), cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:49.327] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"Sheet1\", sheetPermissions = Blacklist []})}"

[2015-12-13 05:10:49.327] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:49.329] Set cell ancestors: []

[2015-12-13 05:10:49.329] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:49.329] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:49.378] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}, cellExpression = Expression {expression = \"range(10)\", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:49.379] about to start dispatch

[2015-12-13 05:10:49.379] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(10)", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.379] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:49.379] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:49.380] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},[])]

[2015-12-13 05:10:49.387] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:49.388] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}]

[2015-12-13 05:10:49.388] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(10)", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.389] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:49.394] Got ancestor locs: []

[2015-12-13 05:10:49.395] Starting eval chain

[2015-12-13 05:10:49.395] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(10)", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.395] Starting eval code

[2015-12-13 05:10:49.395] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(10)", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:49.395] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(10)", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:49.395] the context insert has value CellValue (ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"})

[2015-12-13 05:10:49.398] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:49.398] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:49.398] DECOUPLED CELLS: []

[2015-12-13 05:10:49.398] empty dispatch

[2015-12-13 05:10:49.398] empty evalchain

[2015-12-13 05:10:49.399] finished dispatch

[2015-12-13 05:10:49.399] updated DB after dispatch

[2015-12-13 05:10:49.400] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(10)", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:49.400] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(10)", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:49.400] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:49.429] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (2,1)}, cellExpression = Expression {expression = \"=abs(A2)\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:49.430] about to start dispatch

[2015-12-13 05:10:49.430] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=abs(A2)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.430] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:49.439] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(2,1)&I/INIT_SHEET_ID/(1,2)\""

[2015-12-13 05:10:49.440] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (2,1)},[IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,2)})])]

[2015-12-13 05:10:49.440] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(2,1)\""

[2015-12-13 05:10:49.441] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}]

[2015-12-13 05:10:49.441] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=abs(A2)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.442] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(2,1)\""

[2015-12-13 05:10:49.442] Got ancestor locs: [IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,2)})]

[2015-12-13 05:10:49.442] Starting eval chain

[2015-12-13 05:10:49.443] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=abs(A2)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.443] Starting eval code

[2015-12-13 05:10:49.443] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=abs(A2)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:49.443] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=abs(A2)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:49.443] the context insert has value CellValue (ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"})

[2015-12-13 05:10:49.444] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:49.444] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:49.444] DECOUPLED CELLS: []

[2015-12-13 05:10:49.444] empty dispatch

[2015-12-13 05:10:49.446] empty evalchain

[2015-12-13 05:10:49.446] finished dispatch

[2015-12-13 05:10:49.447] updated DB after dispatch

[2015-12-13 05:10:49.450] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=abs(A2)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:49.450] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=abs(A2)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:49.451] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:49.482] Message: "ClientMessage {clientAction = Get, clientPayload = PayloadLL [Index {locSheetId = \"INIT_SHEET_ID\", index = (2,1)}]}"

[2015-12-13 05:10:49.483] Server sent message: ServerMessage {serverAction = Get, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=abs(A2)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:49.531] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"Sheet1\", sheetPermissions = Blacklist []})}"

[2015-12-13 05:10:49.531] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:49.533] Set cell ancestors: []

[2015-12-13 05:10:49.533] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:49.533] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:49.582] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}, cellExpression = Expression {expression = \"range(10)\", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:49.587] about to start dispatch

[2015-12-13 05:10:49.587] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(10)", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.587] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:49.588] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:49.588] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},[])]

[2015-12-13 05:10:49.589] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:49.589] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}]

[2015-12-13 05:10:49.589] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(10)", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.597] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:49.598] Got ancestor locs: []

[2015-12-13 05:10:49.598] Starting eval chain

[2015-12-13 05:10:49.598] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(10)", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.598] Starting eval code

[2015-12-13 05:10:49.602] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(10)", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:49.610] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(10)", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:49.611] the context insert has value CellValue (ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"})

[2015-12-13 05:10:49.611] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:49.611] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:49.611] DECOUPLED CELLS: []

[2015-12-13 05:10:49.611] empty dispatch

[2015-12-13 05:10:49.612] empty evalchain

[2015-12-13 05:10:49.612] finished dispatch

[2015-12-13 05:10:49.613] updated DB after dispatch

[2015-12-13 05:10:49.613] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(10)", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:49.613] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(10)", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:49.613] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:49.633] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (2,1)}, cellExpression = Expression {expression = \"=abs(A$1:A$10)\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:49.636] about to start dispatch

[2015-12-13 05:10:49.636] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.637] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:49.637] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(2,1)&R/INIT_SHEET_ID/((1,1),(1,10))\""

[2015-12-13 05:10:49.638] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (2,1)},[RangeRef (Range {rangeSheetId = "INIT_SHEET_ID", range = ((1,1),(1,10))})])]

[2015-12-13 05:10:49.638] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(2,1)\""

[2015-12-13 05:10:49.638] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}]

[2015-12-13 05:10:49.639] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.639] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(2,1)\""

[2015-12-13 05:10:49.639] Got ancestor locs: [RangeRef (Range {rangeSheetId = "INIT_SHEET_ID", range = ((1,1),(1,10))})]

[2015-12-13 05:10:49.640] Starting eval chain

[2015-12-13 05:10:49.640] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.640] Starting eval code

[2015-12-13 05:10:49.645] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(10)", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,6)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,7)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,7)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,8)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,9)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,9)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,10)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,10)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:49.647] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:49.647] the context insert has value CellValue (ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"})

[2015-12-13 05:10:49.647] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:49.647] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:49.647] DECOUPLED CELLS: []

[2015-12-13 05:10:49.648] empty dispatch

[2015-12-13 05:10:49.648] empty evalchain

[2015-12-13 05:10:49.648] finished dispatch

[2015-12-13 05:10:49.649] updated DB after dispatch

[2015-12-13 05:10:49.649] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:49.652] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:49.652] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:49.684] Message: "ClientMessage {clientAction = Copy, clientPayload = PayloadPaste {copyRange = Range {rangeSheetId = \"INIT_SHEET_ID\", range = ((2,1),(2,1))}, copyTo = Range {rangeSheetId = \"INIT_SHEET_ID\", range = ((2,2),(2,10))}}}"

[2015-12-13 05:10:49.686] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:49.689] about to start dispatch

[2015-12-13 05:10:49.689] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,7)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,8)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,9)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,10)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.689] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:49.691] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(2,2)&R/INIT_SHEET_ID/((1,1),(1,10))`I/INIT_SHEET_ID/(2,3)&R/INIT_SHEET_ID/((1,1),(1,10))`I/INIT_SHEET_ID/(2,4)&R/INIT_SHEET_ID/((1,1),(1,10))`I/INIT_SHEET_ID/(2,5)&R/INIT_SHEET_ID/((1,1),(1,10))`I/INIT_SHEET_ID/(2,6)&R/INIT_SHEET_ID/((1,1),(1,10))`I/INIT_SHEET_ID/(2,7)&R/INIT_SHEET_ID/((1,1),(1,10))`I/INIT_SHEET_ID/(2,8)&R/INIT_SHEET_ID/((1,1),(1,10))`I/INIT_SHEET_ID/(2,9)&R/INIT_SHEET_ID/((1,1),(1,10))`I/INIT_SHEET_ID/(2,10)&R/INIT_SHEET_ID/((1,1),(1,10))\""

[2015-12-13 05:10:49.696] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (2,2)},[RangeRef (Range {rangeSheetId = "INIT_SHEET_ID", range = ((1,1),(1,10))})]),(Index {locSheetId = "INIT_SHEET_ID", index = (2,3)},[RangeRef (Range {rangeSheetId = "INIT_SHEET_ID", range = ((1,1),(1,10))})]),(Index {locSheetId = "INIT_SHEET_ID", index = (2,4)},[RangeRef (Range {rangeSheetId = "INIT_SHEET_ID", range = ((1,1),(1,10))})]),(Index {locSheetId = "INIT_SHEET_ID", index = (2,5)},[RangeRef (Range {rangeSheetId = "INIT_SHEET_ID", range = ((1,1),(1,10))})]),(Index {locSheetId = "INIT_SHEET_ID", index = (2,6)},[RangeRef (Range {rangeSheetId = "INIT_SHEET_ID", range = ((1,1),(1,10))})]),(Index {locSheetId = "INIT_SHEET_ID", index = (2,7)},[RangeRef (Range {rangeSheetId = "INIT_SHEET_ID", range = ((1,1),(1,10))})]),(Index {locSheetId = "INIT_SHEET_ID", index = (2,8)},[RangeRef (Range {rangeSheetId = "INIT_SHEET_ID", range = ((1,1),(1,10))})]),(Index {locSheetId = "INIT_SHEET_ID", index = (2,9)},[RangeRef (Range {rangeSheetId = "INIT_SHEET_ID", range = ((1,1),(1,10))})]),(Index {locSheetId = "INIT_SHEET_ID", index = (2,10)},[RangeRef (Range {rangeSheetId = "INIT_SHEET_ID", range = ((1,1),(1,10))})])]

[2015-12-13 05:10:49.698] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(2,2)`I/INIT_SHEET_ID/(2,3)`I/INIT_SHEET_ID/(2,4)`I/INIT_SHEET_ID/(2,5)`I/INIT_SHEET_ID/(2,6)`I/INIT_SHEET_ID/(2,7)`I/INIT_SHEET_ID/(2,8)`I/INIT_SHEET_ID/(2,9)`I/INIT_SHEET_ID/(2,10)\""

[2015-12-13 05:10:49.699] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (2,10)},Index {locSheetId = "INIT_SHEET_ID", index = (2,9)},Index {locSheetId = "INIT_SHEET_ID", index = (2,8)},Index {locSheetId = "INIT_SHEET_ID", index = (2,7)},Index {locSheetId = "INIT_SHEET_ID", index = (2,6)},Index {locSheetId = "INIT_SHEET_ID", index = (2,5)},Index {locSheetId = "INIT_SHEET_ID", index = (2,4)},Index {locSheetId = "INIT_SHEET_ID", index = (2,3)},Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}]

[2015-12-13 05:10:49.708] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,10)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,9)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,8)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,7)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.708] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(2,10)`I/INIT_SHEET_ID/(2,9)`I/INIT_SHEET_ID/(2,8)`I/INIT_SHEET_ID/(2,7)`I/INIT_SHEET_ID/(2,6)`I/INIT_SHEET_ID/(2,5)`I/INIT_SHEET_ID/(2,4)`I/INIT_SHEET_ID/(2,3)`I/INIT_SHEET_ID/(2,2)\""

[2015-12-13 05:10:49.709] Got ancestor locs: [RangeRef (Range {rangeSheetId = "INIT_SHEET_ID", range = ((1,1),(1,10))})]

[2015-12-13 05:10:49.711] Starting eval chain

[2015-12-13 05:10:49.711] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,10)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,9)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,8)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,7)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.712] Starting eval code

[2015-12-13 05:10:49.712] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(10)", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,6)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,7)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,7)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,8)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,9)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,9)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,10)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,10)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,7)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,7)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,8)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,8)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,9)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,9)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,10)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,10)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:49.716] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,10)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:49.716] the context insert has value CellValue (ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"})

[2015-12-13 05:10:49.716] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:49.716] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:49.716] DECOUPLED CELLS: []

[2015-12-13 05:10:49.716] empty dispatch

[2015-12-13 05:10:49.717] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,9)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,8)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,7)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.717] Starting eval code

[2015-12-13 05:10:49.717] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(10)", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,6)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,7)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,7)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,8)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,9)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,9)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,10)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,10)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,7)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,7)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,8)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,8)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,9)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,9)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,10)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,10)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:49.718] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,9)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:49.718] the context insert has value CellValue (ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"})

[2015-12-13 05:10:49.718] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:49.718] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:49.718] DECOUPLED CELLS: []

[2015-12-13 05:10:49.722] empty dispatch

[2015-12-13 05:10:49.722] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,8)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,7)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.722] Starting eval code

[2015-12-13 05:10:49.722] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(10)", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,6)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,7)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,7)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,8)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,9)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,9)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,10)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,10)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,7)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,7)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,8)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,8)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,9)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,9)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,10)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,10)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:49.723] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,8)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:49.723] the context insert has value CellValue (ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"})

[2015-12-13 05:10:49.723] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:49.724] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:49.724] DECOUPLED CELLS: []

[2015-12-13 05:10:49.724] empty dispatch

[2015-12-13 05:10:49.724] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,7)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.724] Starting eval code

[2015-12-13 05:10:49.724] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(10)", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,6)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,7)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,7)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,8)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,9)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,9)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,10)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,10)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,7)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,7)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,8)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,8)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,9)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,9)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,10)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,10)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:49.725] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,7)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:49.725] the context insert has value CellValue (ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"})

[2015-12-13 05:10:49.725] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:49.726] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:49.726] DECOUPLED CELLS: []

[2015-12-13 05:10:49.726] empty dispatch

[2015-12-13 05:10:49.726] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.726] Starting eval code

[2015-12-13 05:10:49.726] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(10)", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,6)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,7)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,7)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,8)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,9)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,9)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,10)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,10)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,7)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,7)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,8)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,8)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,9)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,9)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,10)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,10)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:49.727] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:49.727] the context insert has value CellValue (ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"})

[2015-12-13 05:10:49.728] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:49.728] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:49.728] DECOUPLED CELLS: []

[2015-12-13 05:10:49.728] empty dispatch

[2015-12-13 05:10:49.728] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.728] Starting eval code

[2015-12-13 05:10:49.728] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(10)", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,6)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,7)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,7)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,8)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,9)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,9)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,10)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,10)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,7)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,7)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,8)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,8)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,9)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,9)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,10)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,10)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:49.729] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:49.729] the context insert has value CellValue (ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"})

[2015-12-13 05:10:49.730] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:49.730] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:49.730] DECOUPLED CELLS: []

[2015-12-13 05:10:49.730] empty dispatch

[2015-12-13 05:10:49.730] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.730] Starting eval code

[2015-12-13 05:10:49.730] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(10)", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,6)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,7)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,7)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,8)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,9)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,9)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,10)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,10)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,7)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,7)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,8)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,8)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,9)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,9)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,10)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,10)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:49.731] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:49.731] the context insert has value CellValue (ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"})

[2015-12-13 05:10:49.732] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:49.732] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:49.732] DECOUPLED CELLS: []

[2015-12-13 05:10:49.732] empty dispatch

[2015-12-13 05:10:49.732] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.732] Starting eval code

[2015-12-13 05:10:49.732] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(10)", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,6)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,7)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,7)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,8)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,9)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,9)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,10)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,10)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,7)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,7)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,8)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,8)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,9)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,9)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,10)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,10)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:49.733] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:49.733] the context insert has value CellValue (ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"})

[2015-12-13 05:10:49.733] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:49.734] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:49.734] DECOUPLED CELLS: []

[2015-12-13 05:10:49.734] empty dispatch

[2015-12-13 05:10:49.734] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.734] Starting eval code

[2015-12-13 05:10:49.734] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(10)", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,3)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,4)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,5)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,6)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,7)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,7)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,8)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,8)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,9)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,9)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,10)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,10)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,6)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,7)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,7)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,8)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,8)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,9)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,9)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,10)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,10)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:49.735] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:49.735] the context insert has value CellValue (ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"})

[2015-12-13 05:10:49.735] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:49.736] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:49.736] DECOUPLED CELLS: []

[2015-12-13 05:10:49.736] empty dispatch

[2015-12-13 05:10:49.736] empty evalchain

[2015-12-13 05:10:49.736] finished dispatch

[2015-12-13 05:10:49.738] updated DB after dispatch

[2015-12-13 05:10:49.738] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,7)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,8)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,9)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,10)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:49.739] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,7)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,8)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,9)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,10)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:49.739] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:49.788] Message: "ClientMessage {clientAction = Get, clientPayload = PayloadLL [Index {locSheetId = \"INIT_SHEET_ID\", index = (2,1)},Index {locSheetId = \"INIT_SHEET_ID\", index = (2,2)},Index {locSheetId = \"INIT_SHEET_ID\", index = (2,3)},Index {locSheetId = \"INIT_SHEET_ID\", index = (2,4)},Index {locSheetId = \"INIT_SHEET_ID\", index = (2,5)},Index {locSheetId = \"INIT_SHEET_ID\", index = (2,6)},Index {locSheetId = \"INIT_SHEET_ID\", index = (2,7)},Index {locSheetId = \"INIT_SHEET_ID\", index = (2,8)},Index {locSheetId = \"INIT_SHEET_ID\", index = (2,9)},Index {locSheetId = \"INIT_SHEET_ID\", index = (2,10)}]}"

[2015-12-13 05:10:49.794] Server sent message: ServerMessage {serverAction = Get, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,5)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,6)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,7)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,8)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,9)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,10)}, cellExpression = Expression {expression = "=abs(A$1:A$10)", language = Excel}, cellValue = ValueError {errorMsg = "Excel #VALUE! error, possibly due to a function, abs, which expected argument number 1 to be a numeric, not matrix", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:49.838] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"Sheet1\", sheetPermissions = Blacklist []})}"

[2015-12-13 05:10:49.838] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:49.839] Set cell ancestors: []

[2015-12-13 05:10:49.840] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:49.840] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:49.889] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}, cellExpression = Expression {expression = \"1\", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:49.890] about to start dispatch

[2015-12-13 05:10:49.890] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.890] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:49.891] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:49.891] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},[])]

[2015-12-13 05:10:49.892] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:49.892] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}]

[2015-12-13 05:10:49.892] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.893] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:49.893] Got ancestor locs: []

[2015-12-13 05:10:49.893] Starting eval chain

[2015-12-13 05:10:49.893] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.893] Starting eval code

[2015-12-13 05:10:49.893] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:49.894] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:49.894] the context insert has value CellValue (ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"})

[2015-12-13 05:10:49.894] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:49.894] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:49.902] DECOUPLED CELLS: []

[2015-12-13 05:10:49.903] empty dispatch

[2015-12-13 05:10:49.903] empty evalchain

[2015-12-13 05:10:49.903] finished dispatch

[2015-12-13 05:10:49.904] updated DB after dispatch

[2015-12-13 05:10:49.904] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:49.904] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:49.905] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:49.941] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (2,1)}, cellExpression = Expression {expression = \"=A1=1\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:49.942] about to start dispatch

[2015-12-13 05:10:49.942] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A1=1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.942] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:49.942] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(2,1)&I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:49.943] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (2,1)},[IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,1)})])]

[2015-12-13 05:10:49.943] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(2,1)\""

[2015-12-13 05:10:49.943] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}]

[2015-12-13 05:10:49.944] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A1=1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.944] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(2,1)\""

[2015-12-13 05:10:49.945] Got ancestor locs: [IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,1)})]

[2015-12-13 05:10:49.945] Starting eval chain

[2015-12-13 05:10:49.945] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A1=1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:49.945] Starting eval code

[2015-12-13 05:10:49.945] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A1=1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:49.948] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A1=1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:49.948] the context insert has value CellValue (ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"})

[2015-12-13 05:10:49.948] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:49.948] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:49.948] DECOUPLED CELLS: []

[2015-12-13 05:10:49.949] empty dispatch

[2015-12-13 05:10:49.949] empty evalchain

[2015-12-13 05:10:49.949] finished dispatch

[2015-12-13 05:10:49.950] updated DB after dispatch

[2015-12-13 05:10:49.950] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A1=1", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:49.950] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A1=1", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:49.950] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:49.993] Message: "ClientMessage {clientAction = Get, clientPayload = PayloadLL [Index {locSheetId = \"INIT_SHEET_ID\", index = (2,1)}]}"

[2015-12-13 05:10:49.995] Server sent message: ServerMessage {serverAction = Get, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A1=1", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:50.042] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"Sheet1\", sheetPermissions = Blacklist []})}"

[2015-12-13 05:10:50.043] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:50.044] Set cell ancestors: []

[2015-12-13 05:10:50.044] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:50.044] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:10:50.093] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}, cellExpression = Expression {expression = \"range(2)\", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:50.094] about to start dispatch

[2015-12-13 05:10:50.094] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(2)", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:50.094] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:50.094] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:50.095] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},[])]

[2015-12-13 05:10:50.097] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:50.097] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}]

[2015-12-13 05:10:50.097] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(2)", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:50.098] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:10:50.098] Got ancestor locs: []

[2015-12-13 05:10:50.098] Starting eval chain

[2015-12-13 05:10:50.099] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(2)", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:50.099] Starting eval code

[2015-12-13 05:10:50.099] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(2)", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:50.099] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(2)", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:50.100] the context insert has value CellValue (ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"})

[2015-12-13 05:10:50.100] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:50.100] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:50.100] DECOUPLED CELLS: []

[2015-12-13 05:10:50.101] empty dispatch

[2015-12-13 05:10:50.101] empty evalchain

[2015-12-13 05:10:50.101] finished dispatch

[2015-12-13 05:10:50.103] updated DB after dispatch

[2015-12-13 05:10:50.103] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(2)", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:50.111] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(2)", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:50.112] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:50.144] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (2,1)}, cellExpression = Expression {expression = \"{=A1:A2=1}\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:10:50.145] about to start dispatch

[2015-12-13 05:10:50.145] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "{=A1:A2=1}", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:50.145] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:10:50.146] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(2,1)&R/INIT_SHEET_ID/((1,1),(1,2))\""

[2015-12-13 05:10:50.146] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (2,1)},[RangeRef (Range {rangeSheetId = "INIT_SHEET_ID", range = ((1,1),(1,2))})])]

[2015-12-13 05:10:50.147] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(2,1)\""

[2015-12-13 05:10:50.147] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}]

[2015-12-13 05:10:50.148] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "{=A1:A2=1}", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:50.148] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(2,1)\""

[2015-12-13 05:10:50.149] Got ancestor locs: [RangeRef (Range {rangeSheetId = "INIT_SHEET_ID", range = ((1,1),(1,2))})]

[2015-12-13 05:10:50.149] Starting eval chain

[2015-12-13 05:10:50.149] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "{=A1:A2=1}", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:10:50.149] Starting eval code

[2015-12-13 05:10:50.149] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(2)", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (1,2)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,2)}, cellExpression = Expression {expression = "", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "{=A1:A2=1}", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:10:50.151] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "{=A1:A2=1}", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:10:50.151] the context insert has value CellValue (ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at RangeRef (Range {rangeSheetId = \"INIT_SHEET_ID\", range = ((1,1),(1,2))}) to an Excel value (check languages)", errorType = "Excel"})

[2015-12-13 05:10:50.151] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:10:50.151] got decoupled descriptors in contextInsert: []

[2015-12-13 05:10:50.151] DECOUPLED CELLS: []

[2015-12-13 05:10:50.161] empty dispatch

[2015-12-13 05:10:50.161] empty evalchain

[2015-12-13 05:10:50.162] finished dispatch

[2015-12-13 05:10:50.171] updated DB after dispatch

[2015-12-13 05:10:50.171] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "{=A1:A2=1}", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at RangeRef (Range {rangeSheetId = \"INIT_SHEET_ID\", range = ((1,1),(1,2))}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:50.171] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "{=A1:A2=1}", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at RangeRef (Range {rangeSheetId = \"INIT_SHEET_ID\", range = ((1,1),(1,2))}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:50.175] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 05:10:50.196] Message: "ClientMessage {clientAction = Get, clientPayload = PayloadLL [Index {locSheetId = \"INIT_SHEET_ID\", index = (2,1)},Index {locSheetId = \"INIT_SHEET_ID\", index = (2,2)}]}"

[2015-12-13 05:10:50.200] Server sent message: ServerMessage {serverAction = Get, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "{=A1:A2=1}", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at RangeRef (Range {rangeSheetId = \"INIT_SHEET_ID\", range = ((1,1),(1,2))}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:10:50.204] Client disconnected

[2015-12-13 05:20:50.697] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 05:20:50.698] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "", language = Python},Expression {expression = "", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 05:20:50.699] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (26,79)})}"

[2015-12-13 05:20:51.039] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(2)", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "{=A1:A2=1}", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at RangeRef (Range {rangeSheetId = \"INIT_SHEET_ID\", range = ((1,1),(1,2))}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:23:35.720] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"Sheet1\", sheetPermissions = Blacklist []})}"

[2015-12-13 05:23:35.720] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "", language = Python},Expression {expression = "", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 05:23:35.771] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (0,0), bottomRight = (100,100)})}"

[2015-12-13 05:23:35.942] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "range(2)", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "{=A1:A2=1}", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at RangeRef (Range {rangeSheetId = \"INIT_SHEET_ID\", range = ((1,1),(1,2))}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:23:35.975] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"Sheet1\", sheetPermissions = Blacklist []})}"

[2015-12-13 05:23:35.975] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:23:35.977] Set cell ancestors: []

[2015-12-13 05:23:35.977] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:23:35.977] Server sent message: ServerMessage {serverAction = Clear, serverResult = Success, serverPayload = PayloadS (Sheet {sheetId = "INIT_SHEET_ID", sheetName = "Sheet1", sheetPermissions = Blacklist []})}

[2015-12-13 05:23:36.035] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}, cellExpression = Expression {expression = \"1\", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:23:36.035] about to start dispatch

[2015-12-13 05:23:36.039] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:23:36.039] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:23:36.040] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:23:36.040] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},[])]

[2015-12-13 05:23:36.043] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:23:36.043] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}]

[2015-12-13 05:23:36.044] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:23:36.044] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:23:36.044] Got ancestor locs: []

[2015-12-13 05:23:36.046] Starting eval chain

[2015-12-13 05:23:36.046] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:23:36.047] Starting eval code

[2015-12-13 05:23:36.047] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:23:36.047] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:23:36.047] the context insert has value CellValue (ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"})

[2015-12-13 05:23:36.047] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:23:36.047] got decoupled descriptors in contextInsert: []

[2015-12-13 05:23:36.048] DECOUPLED CELLS: []

[2015-12-13 05:23:36.054] empty dispatch

[2015-12-13 05:23:36.054] empty evalchain

[2015-12-13 05:23:36.054] finished dispatch

[2015-12-13 05:23:36.055] updated DB after dispatch

[2015-12-13 05:23:36.055] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:23:36.055] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:23:36.056] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:23:36.078] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (2,1)}, cellExpression = Expression {expression = \"=A1=1\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 05:23:36.078] about to start dispatch

[2015-12-13 05:23:36.078] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A1=1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:23:36.079] Settings: Descendants: DescendantsWithParent

[2015-12-13 05:23:36.079] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(2,1)&I/INIT_SHEET_ID/(1,1)\""

[2015-12-13 05:23:36.080] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (2,1)},[IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,1)})])]

[2015-12-13 05:23:36.081] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(2,1)\""

[2015-12-13 05:23:36.081] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}]

[2015-12-13 05:23:36.082] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A1=1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:23:36.082] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(2,1)\""

[2015-12-13 05:23:36.083] Got ancestor locs: [IndexRef (Index {locSheetId = "INIT_SHEET_ID", index = (1,1)})]

[2015-12-13 05:23:36.083] Starting eval chain

[2015-12-13 05:23:36.083] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A1=1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 05:23:36.084] Starting eval code

[2015-12-13 05:23:36.084] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (1,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (1,1)}, cellExpression = Expression {expression = "1", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}),(Index {locSheetId = "INIT_SHEET_ID", index = (2,1)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A1=1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 05:23:36.087] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A1=1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 05:23:36.087] the context insert has value CellValue (ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"})

[2015-12-13 05:23:36.088] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 05:23:36.088] got decoupled descriptors in contextInsert: []

[2015-12-13 05:23:36.088] DECOUPLED CELLS: []

[2015-12-13 05:23:36.088] empty dispatch

[2015-12-13 05:23:36.088] empty evalchain

[2015-12-13 05:23:36.088] finished dispatch

[2015-12-13 05:23:36.089] updated DB after dispatch

[2015-12-13 05:23:36.089] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A1=1", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:23:36.093] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A1=1", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:23:36.093] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A1=1", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:23:36.129] Message: "ClientMessage {clientAction = Get, clientPayload = PayloadLL [Index {locSheetId = \"INIT_SHEET_ID\", index = (2,1)}]}"

[2015-12-13 05:23:36.131] Server sent message: ServerMessage {serverAction = Get, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,1)}, cellExpression = Expression {expression = "=A1=1", language = Excel}, cellValue = ValueError {errorMsg = "Excel #N/A error, possibly due to an inability to convert a value at IndexRef (Index {locSheetId = \"INIT_SHEET_ID\", index = (1,1)}) to an Excel value (check languages)", errorType = "Excel"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 05:23:36.174] Client disconnected

[2015-12-13 05:24:00.611] Client disconnected

[2015-12-13 08:57:38.935] Server sent message: ServerMessage {serverAction = EvaluateHeader, serverResult = Success, serverPayload = PayloadValue (CellValue (ValueError {errorMsg = "R Runtime Error: Error in file(file, \"rt\") : cannot open the connection\n", errorType = "R error"}))}

[2015-12-13 08:57:39.000] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:39.051] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:39.051] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:39.053] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:39.053] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:39.054] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:39.055] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:39.158] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:39.163] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:39.342] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:39.382] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:39.383] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:39.394] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:39.345] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:39.490] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:39.506] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:39.540] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:39.540] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:39.549] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:39.575] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:39.578] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:39.630] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:39.630] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:39.644] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:39.653] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:39.654] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:39.655] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:39.713] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:39.726] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:40.029] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:40.036] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:40.029] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:40.108] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:40.110] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:40.111] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:40.175] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:40.213] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:40.247] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:40.247] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:40.253] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:40.259] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:40.272] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:40.274] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:40.399] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:40.512] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:40.726] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:40.726] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:40.737] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:40.738] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:40.769] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:40.786] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:40.925] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:40.959] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:41.025] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:41.025] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:41.095] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:41.107] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:41.118] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:41.160] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:41.165] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:41.198] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:41.198] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:41.211] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:41.211] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:41.212] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:41.213] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:41.253] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:41.259] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:41.388] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:41.388] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:41.394] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:41.395] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:41.395] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:41.405] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:41.460] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:41.464] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:42.017] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:42.042] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:42.017] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:42.169] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:42.188] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:42.235] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:42.370] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:42.435] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:42.522] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:42.522] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:42.599] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:42.632] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:42.651] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:42.667] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:42.900] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:43.006] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:43.197] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:43.197] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:43.283] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:43.301] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:43.319] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:43.361] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:43.609] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:43.670] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:44.251] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:44.251] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:44.270] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:44.403] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:44.403] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:44.439] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:44.593] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:44.632] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:44.775] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:44.776] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:44.802] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:44.802] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:44.820] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:44.825] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:44.896] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:44.911] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (7,3)}, cellExpression = Expression {expression = \"1\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 08:57:44.940] about to start dispatch

[2015-12-13 08:57:44.940] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 08:57:44.940] Settings: Descendants: DescendantsWithParent

[2015-12-13 08:57:44.941] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(7,3)\""

[2015-12-13 08:57:44.944] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (7,3)},[])]

[2015-12-13 08:57:44.952] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(7,3)\""

[2015-12-13 08:57:44.989] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}]

[2015-12-13 08:57:44.989] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 08:57:44.989] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(7,3)\""

[2015-12-13 08:57:45.002] Got ancestor locs: []

[2015-12-13 08:57:45.004] Starting eval chain

[2015-12-13 08:57:45.014] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 08:57:45.014] Starting eval code

[2015-12-13 08:57:45.015] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (7,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 08:57:45.015] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 08:57:45.016] the context insert has value CellValue (ValueI 1)

[2015-12-13 08:57:45.016] GOT RANGEKEYS IN SHEET: : ["I/INIT_SHEET_ID/(5,9)?(1,10)?RANGEKEY","I/INIT_SHEET_ID/(4,9)?(1,10)?RANGEKEY","I/INIT_SHEET_ID/(6,9)?(1,10)?RANGEKEY"]

[2015-12-13 08:57:45.025] got decoupled descriptors in contextInsert: []

[2015-12-13 08:57:45.038] DECOUPLED CELLS: []

[2015-12-13 08:57:45.048] empty dispatch

[2015-12-13 08:57:45.063] empty evalchain

[2015-12-13 08:57:45.063] finished dispatch

[2015-12-13 08:57:45.105] updated DB after dispatch

[2015-12-13 08:57:45.106] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:45.139] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:45.139] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:45.182] Message: "ClientMessage {clientAction = EvaluateHeader, clientPayload = PayloadXp (Expression {expression = \"import math\\nx = range(10)\\ny = [math.sin(h) for h in x]\\n\\n\\n\\ny\", language = Python})}"

[2015-12-13 08:57:45.182] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:45.183] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "import math\nx = range(10)\ny = [math.sin(h) for h in x]\n\n\n\ny", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:45.185] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:45.227] Undoing last commit

[2015-12-13 08:57:45.236] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(7,3)\""

[2015-12-13 08:57:45.237] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (7,3)},[])]

[2015-12-13 08:57:45.254] Set cell ancestors: []

[2015-12-13 08:57:45.269] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:45.270] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "import math\nx = range(10)\ny = [math.sin(h) for h in x]\n\n\n\ny", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:45.278] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:45.316] Undoing last commit

[2015-12-13 08:57:45.345] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(7,9)`I/INIT_SHEET_ID/(7,11)`I/INIT_SHEET_ID/(7,13)`I/INIT_SHEET_ID/(7,15)`I/INIT_SHEET_ID/(7,17)`I/INIT_SHEET_ID/(7,10)`I/INIT_SHEET_ID/(7,12)`I/INIT_SHEET_ID/(7,14)`I/INIT_SHEET_ID/(7,16)`I/INIT_SHEET_ID/(7,18)\""

[2015-12-13 08:57:45.349] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (7,9)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (7,11)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (7,13)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (7,15)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (7,17)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (7,10)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (7,12)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (7,14)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (7,16)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (7,18)},[])]

[2015-12-13 08:57:45.372] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(7,9)`I/INIT_SHEET_ID/(7,10)\""

[2015-12-13 08:57:45.375] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (7,9)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (7,10)},[])]

[2015-12-13 08:57:45.382] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:45.383] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "import math\nx = range(10)\ny = [math.sin(h) for h in x]\n\n\n\ny", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:45.384] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:45.395] Undoing last commit

[2015-12-13 08:57:45.397] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(7,10)\""

[2015-12-13 08:57:45.399] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (7,10)},[])]

[2015-12-13 08:57:45.399] Set cell ancestors: []

[2015-12-13 08:57:45.400] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:45.406] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "import math\nx = range(10)\ny = [math.sin(h) for h in x]\n\n\n\ny", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:45.410] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:45.416] Undoing last commit

[2015-12-13 08:57:45.417] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(7,9)\""

[2015-12-13 08:57:45.418] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (7,9)},[])]

[2015-12-13 08:57:45.418] Set cell ancestors: []

[2015-12-13 08:57:45.419] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:45.419] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "import math\nx = range(10)\ny = [math.sin(h) for h in x]\n\n\n\ny", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:45.420] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:45.435] Undoing last commit

[2015-12-13 08:57:45.443] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(6,8)\""

[2015-12-13 08:57:45.444] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (6,8)},[])]

[2015-12-13 08:57:45.444] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(6,8)\""

[2015-12-13 08:57:45.445] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (6,8)},[])]

[2015-12-13 08:57:45.446] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:45.447] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "import math\nx = range(10)\ny = [math.sin(h) for h in x]\n\n\n\ny", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:45.448] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:45.472] Undoing last commit

[2015-12-13 08:57:45.475] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(6,8)\""

[2015-12-13 08:57:45.476] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (6,8)},[])]

[2015-12-13 08:57:45.484] Set cell ancestors: []

[2015-12-13 08:57:45.486] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:45.487] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "import math\nx = range(10)\ny = [math.sin(h) for h in x]\n\n\n\ny", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:45.516] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:45.552] Undoing last commit

[2015-12-13 08:57:45.568] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(6,9)`I/INIT_SHEET_ID/(6,10)`I/INIT_SHEET_ID/(6,11)`I/INIT_SHEET_ID/(6,12)`I/INIT_SHEET_ID/(6,13)`I/INIT_SHEET_ID/(6,14)`I/INIT_SHEET_ID/(6,15)`I/INIT_SHEET_ID/(6,16)`I/INIT_SHEET_ID/(6,17)`I/INIT_SHEET_ID/(6,18)\""

[2015-12-13 08:57:45.573] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (6,9)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (6,10)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (6,11)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (6,12)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (6,13)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (6,14)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (6,15)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (6,16)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (6,17)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (6,18)},[])]

[2015-12-13 08:57:45.579] Set cell ancestors: []

[2015-12-13 08:57:45.58 ] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:45.580] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "import math\nx = range(10)\ny = [math.sin(h) for h in x]\n\n\n\ny", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:45.613] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:45.613] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "import math\nx = range(10)\ny = [math.sin(h) for h in x]\n\n\n\ny", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:45.630] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:45.635] Undoing last commit

[2015-12-13 08:57:45.709] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(5,9)`I/INIT_SHEET_ID/(5,10)`I/INIT_SHEET_ID/(5,11)`I/INIT_SHEET_ID/(5,12)`I/INIT_SHEET_ID/(5,13)`I/INIT_SHEET_ID/(5,14)`I/INIT_SHEET_ID/(5,15)`I/INIT_SHEET_ID/(5,16)`I/INIT_SHEET_ID/(5,17)`I/INIT_SHEET_ID/(5,18)\""

[2015-12-13 08:57:45.711] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (5,9)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,10)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,11)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,12)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,13)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,14)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,15)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,16)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,17)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,18)},[])]

[2015-12-13 08:57:45.712] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(5,9)\""

[2015-12-13 08:57:45.712] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (5,9)},[])]

[2015-12-13 08:57:45.733] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:45.746] Undoing last commit

[2015-12-13 08:57:45.753] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(6,9)\""

[2015-12-13 08:57:45.754] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (6,9)},[])]

[2015-12-13 08:57:45.754] Set cell ancestors: []

[2015-12-13 08:57:45.759] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:45.759] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "import math\nx = range(10)\ny = [math.sin(h) for h in x]\n\n\n\ny", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:45.760] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:45.760] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "import math\nx = range(10)\ny = [math.sin(h) for h in x]\n\n\n\ny", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:45.761] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:45.768] Undoing last commit

[2015-12-13 08:57:45.769] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(6,9)\""

[2015-12-13 08:57:45.774] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (6,9)},[])]

[2015-12-13 08:57:45.774] Set cell ancestors: []

[2015-12-13 08:57:45.775] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:45.838] Undoing last commit

[2015-12-13 08:57:45.858] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(5,9)`I/INIT_SHEET_ID/(5,10)`I/INIT_SHEET_ID/(5,11)`I/INIT_SHEET_ID/(5,12)`I/INIT_SHEET_ID/(5,13)`I/INIT_SHEET_ID/(5,14)`I/INIT_SHEET_ID/(5,15)`I/INIT_SHEET_ID/(5,16)`I/INIT_SHEET_ID/(5,17)`I/INIT_SHEET_ID/(5,18)\""

[2015-12-13 08:57:45.859] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (5,9)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,10)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,11)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,12)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,13)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,14)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,15)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,16)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,17)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,18)},[])]

[2015-12-13 08:57:45.867] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(5,9)\""

[2015-12-13 08:57:45.868] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (5,9)},[])]

[2015-12-13 08:57:45.869] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:45.869] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "import math\nx = range(10)\ny = [math.sin(h) for h in x]\n\n\n\ny", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:45.871] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:45.871] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "import math\nx = range(10)\ny = [math.sin(h) for h in x]\n\n\n\ny", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:45.875] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:45.888] Undoing last commit

[2015-12-13 08:57:45.914] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(6,9)\""

[2015-12-13 08:57:45.914] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (6,9)},[])]

[2015-12-13 08:57:45.921] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(6,9)\""

[2015-12-13 08:57:45.921] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (6,9)},[])]

[2015-12-13 08:57:45.922] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:45.964] Undoing last commit

[2015-12-13 08:57:45.967] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(6,9)\""

[2015-12-13 08:57:45.968] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (6,9)},[])]

[2015-12-13 08:57:45.980] Set cell ancestors: []

[2015-12-13 08:57:45.995] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:45.995] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "import math\nx = range(10)\ny = [math.sin(h) for h in x]\n\n\n\ny", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:46.009] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:46.040] Undoing last commit

[2015-12-13 08:57:46.067] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(5,9)`I/INIT_SHEET_ID/(5,10)`I/INIT_SHEET_ID/(5,11)`I/INIT_SHEET_ID/(5,12)`I/INIT_SHEET_ID/(5,13)`I/INIT_SHEET_ID/(5,14)`I/INIT_SHEET_ID/(5,15)`I/INIT_SHEET_ID/(5,16)`I/INIT_SHEET_ID/(5,17)`I/INIT_SHEET_ID/(5,18)\""

[2015-12-13 08:57:46.069] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (5,9)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,10)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,11)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,12)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,13)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,14)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,15)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,16)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,17)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,18)},[])]

[2015-12-13 08:57:46.070] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(5,9)\""

[2015-12-13 08:57:46.070] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (5,9)},[])]

[2015-12-13 08:57:46.072] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:46.076] Undoing last commit

[2015-12-13 08:57:46.096] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(5,9)`I/INIT_SHEET_ID/(5,10)`I/INIT_SHEET_ID/(5,11)`I/INIT_SHEET_ID/(5,12)`I/INIT_SHEET_ID/(5,13)`I/INIT_SHEET_ID/(5,14)`I/INIT_SHEET_ID/(5,15)`I/INIT_SHEET_ID/(5,16)`I/INIT_SHEET_ID/(5,17)`I/INIT_SHEET_ID/(5,18)\""

[2015-12-13 08:57:46.097] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (5,9)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,10)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,11)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,12)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,13)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,14)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,15)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,16)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,17)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (5,18)},[])]

[2015-12-13 08:57:46.106] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(5,9)\""

[2015-12-13 08:57:46.107] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (5,9)},[])]

[2015-12-13 08:57:46.108] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:46.108] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "import math\nx = range(10)\ny = [math.sin(h) for h in x]\n\n\n\ny", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:46.151] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:46.192] Undoing last commit

[2015-12-13 08:57:46.207] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(4,9)`I/INIT_SHEET_ID/(4,10)`I/INIT_SHEET_ID/(4,11)`I/INIT_SHEET_ID/(4,12)`I/INIT_SHEET_ID/(4,13)`I/INIT_SHEET_ID/(4,14)`I/INIT_SHEET_ID/(4,15)`I/INIT_SHEET_ID/(4,16)`I/INIT_SHEET_ID/(4,17)`I/INIT_SHEET_ID/(4,18)\""

[2015-12-13 08:57:46.21 ] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (4,9)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (4,10)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (4,11)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (4,12)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (4,13)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (4,14)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (4,15)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (4,16)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (4,17)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (4,18)},[])]

[2015-12-13 08:57:46.210] Set cell ancestors: []

[2015-12-13 08:57:46.220] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:46.220] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "import math\nx = range(10)\ny = [math.sin(h) for h in x]\n\n\n\ny", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:46.259] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:46.264] Undoing last commit

[2015-12-13 08:57:46.265] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(3,6)\""

[2015-12-13 08:57:46.267] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (3,6)},[])]

[2015-12-13 08:57:46.267] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(3,6)\""

[2015-12-13 08:57:46.274] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (3,6)},[])]

[2015-12-13 08:57:46.277] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:46.278] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "import math\nx = range(10)\ny = [math.sin(h) for h in x]\n\n\n\ny", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:46.279] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:46.285] Undoing last commit

[2015-12-13 08:57:46.287] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(3,6)\""

[2015-12-13 08:57:46.287] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (3,6)},[])]

[2015-12-13 08:57:46.295] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(3,6)\""

[2015-12-13 08:57:46.295] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (3,6)},[])]

[2015-12-13 08:57:46.302] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:46.302] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "import math\nx = range(10)\ny = [math.sin(h) for h in x]\n\n\n\ny", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:46.306] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:46.311] Undoing last commit

[2015-12-13 08:57:46.312] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(3,6)\""

[2015-12-13 08:57:46.313] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (3,6)},[])]

[2015-12-13 08:57:46.313] Set cell ancestors: []

[2015-12-13 08:57:46.322] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:46.322] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "import math\nx = range(10)\ny = [math.sin(h) for h in x]\n\n\n\ny", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:46.323] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:46.333] Undoing last commit

[2015-12-13 08:57:46.335] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(5,9)\""

[2015-12-13 08:57:46.335] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (5,9)},[])]

[2015-12-13 08:57:46.344] Set cell ancestors: []

[2015-12-13 08:57:46.344] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:46.345] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "import math\nx = range(10)\ny = [math.sin(h) for h in x]\n\n\n\ny", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:46.346] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:46.366] Undoing last commit

[2015-12-13 08:57:46.371] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(3,6)`I/INIT_SHEET_ID/(4,6)`I/INIT_SHEET_ID/(3,7)`I/INIT_SHEET_ID/(4,7)`I/INIT_SHEET_ID/(3,8)`I/INIT_SHEET_ID/(4,8)`I/INIT_SHEET_ID/(3,9)`I/INIT_SHEET_ID/(4,9)`I/INIT_SHEET_ID/(3,10)`I/INIT_SHEET_ID/(4,10)`I/INIT_SHEET_ID/(3,11)`I/INIT_SHEET_ID/(4,11)`I/INIT_SHEET_ID/(3,12)`I/INIT_SHEET_ID/(4,12)\""

[2015-12-13 08:57:46.375] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (3,6)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (4,6)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (3,7)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (4,7)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (3,8)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (4,8)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (3,9)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (4,9)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (3,10)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (4,10)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (3,11)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (4,11)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (3,12)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (4,12)},[])]

[2015-12-13 08:57:46.375] Set cell ancestors: []

[2015-12-13 08:57:46.383] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:46.386] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "import math\nx = range(10)\ny = [math.sin(h) for h in x]\n\n\n\ny", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:46.392] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:46.399] Undoing last commit

[2015-12-13 08:57:46.400] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(4,20)\""

[2015-12-13 08:57:46.401] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (4,20)},[])]

[2015-12-13 08:57:46.401] Set cell ancestors: []

[2015-12-13 08:57:46.402] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:57:46.403] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "import math\nx = range(10)\ny = [math.sin(h) for h in x]\n\n\n\ny", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:57:46.404] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:57:46.411] Undoing last commit

[2015-12-13 08:57:46.419] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(3,2)`I/INIT_SHEET_ID/(3,3)`I/INIT_SHEET_ID/(3,4)\""

[2015-12-13 08:57:46.420] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (3,2)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (3,3)},[]),(Index {locSheetId = "INIT_SHEET_ID", index = (3,4)},[])]

[2015-12-13 08:57:46.422] Set cell ancestors: []

[2015-12-13 08:57:46.429] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (5,9)}, cellExpression = Expression {expression = \"x\", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 08:57:46.429] about to start dispatch

[2015-12-13 08:57:46.430] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 08:57:46.430] Settings: Descendants: DescendantsWithParent

[2015-12-13 08:57:46.430] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(5,9)\""

[2015-12-13 08:57:46.431] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (5,9)},[])]

[2015-12-13 08:57:46.431] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(5,9)\""

[2015-12-13 08:57:46.431] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}]

[2015-12-13 08:57:46.445] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 08:57:46.445] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(5,9)\""

[2015-12-13 08:57:46.445] Got ancestor locs: []

[2015-12-13 08:57:46.446] Starting eval chain

[2015-12-13 08:57:46.446] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 08:57:46.446] Starting eval code

[2015-12-13 08:57:46.446] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (5,9)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 08:57:46.446] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 08:57:46.447] the context insert has value CellValue (ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"})

[2015-12-13 08:57:46.472] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 08:57:46.472] got decoupled descriptors in contextInsert: []

[2015-12-13 08:57:46.472] DECOUPLED CELLS: []

[2015-12-13 08:57:46.472] empty dispatch

[2015-12-13 08:57:46.472] empty evalchain

[2015-12-13 08:57:46.472] finished dispatch

[2015-12-13 08:57:46.473] updated DB after dispatch

[2015-12-13 08:57:46.473] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueError {errorMsg = "/home/alex/workspace/AlphaSheets/alpha-sheets/eval_files/py/template.py: openFile: does not exist (No such file or directory)", errorType = "StdErr"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:57:46.652] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:46.852] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:47.125] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:47.275] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:47.432] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:47.590] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:47.734] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:47.878] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:48.010] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:48.087] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:48.230] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:48.382] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:48.532] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:48.686] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:48.833] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:48.996] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:49.147] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:49.351] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:49.515] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:49.672] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:49.823] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:49.971] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:50.116] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:50.266] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:50.441] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:50.591] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:50.748] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:50.888] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:50.984] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:51.065] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:51.267] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:51.473] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:51.625] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:51.778] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:51.920] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:52.070] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:52.241] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:52.414] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:52.579] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:52.732] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:52.893] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:53.043] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:53.198] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:53.353] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:53.504] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:53.651] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:53.847] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:53.987] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:53.996] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:54.161] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:54.297] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:54.451] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:54.599] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:54.751] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:54.913] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:55.059] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:55.217] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:55.369] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:55.520] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:55.680] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:55.830] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:56.007] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:56.152] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:56.329] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:56.465] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:56.616] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:56.771] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:56.916] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:57.014] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:57.117] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:57.273] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:57.418] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:57.569] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:57.726] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:57.870] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:58.021] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:58.179] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:58.326] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:58.474] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:58.623] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:58.775] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:58.924] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:59.125] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:59.275] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:59.433] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:59.576] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:59.735] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:57:59.883] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:00.016] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:00.128] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:00.279] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:00.481] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:00.653] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:00.805] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:00.962] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:01.140] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:01.260] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:01.410] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:01.569] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:01.712] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:01.913] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:02.113] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:02.271] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:02.414] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:02.574] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:02.728] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:02.881] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:02.985] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:03.020] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:03.179] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:03.370] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:03.600] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:03.759] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:03.901] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:04.054] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:04.212] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:04.355] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:04.516] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:04.663] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:04.806] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:04.986] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:05.129] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:05.292] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:05.438] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:05.612] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:05.763] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:05.945] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:05.984] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:06.107] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:06.256] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:06.441] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:06.594] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:06.736] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:06.897] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:07.044] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:07.199] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:07.339] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:07.497] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:07.656] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:07.803] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:07.944] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:08.099] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:08.253] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:08.400] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:08.571] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:08.741] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:08.881] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:08.986] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:09.049] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:09.204] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:09.382] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:09.528] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:09.678] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:09.848] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:09.993] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:10.132] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:10.305] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:10.480] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:10.644] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:10.799] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:10.931] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:11.186] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:11.337] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:11.487] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:11.644] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:11.788] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:11.938] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:11.997] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:12.103] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:12.247] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:12.391] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:12.565] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:12.692] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:12.901] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:13.049] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:13.199] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:13.343] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:13.550] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:13.750] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:13.913] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:14.159] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:14.297] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:14.465] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:14.613] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:14.748] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:14.975] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:15.010] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:15.308] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:15.845] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:16.450] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:17.131] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:17.636] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:17.799] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:17.952] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:18.001] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:18.145] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:18.286] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:18.430] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:18.582] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:18.740] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:18.892] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:19.036] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:19.245] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:19.462] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:19.927] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:20.432] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:20.870] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:20.987] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:21.286] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:21.768] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:22.134] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:22.314] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:22.478] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:22.667] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:22.826] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:22.982] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:23.143] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:23.289] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:23.441] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:23.589] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:23.760] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:23.921] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:23.984] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:24.071] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:24.222] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:24.372] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:24.531] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:24.693] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:24.850] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:25.000] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:25.135] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:25.300] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:25.444] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:25.587] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:25.738] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:25.895] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:26.043] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:26.193] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:26.350] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:26.501] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:26.659] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:26.796] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:26.954] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:26.983] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:27.126] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:27.285] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:27.428] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:27.599] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:27.777] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:27.932] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:28.082] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:28.236] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:28.376] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:28.538] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:28.740] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:28.921] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:29.067] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:29.234] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:29.394] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:29.539] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:29.728] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:29.938] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:29.991] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:30.131] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:30.304] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:30.460] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:30.643] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:30.808] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:30.967] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:31.176] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:31.412] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:31.571] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:31.906] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:32.695] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:32.845] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:33.004] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:33.026] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:33.166] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:33.320] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:33.535] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:33.676] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:33.874] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:34.323] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:34.483] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:37.389] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:58:37.663] Message: "ClientMessage {clientAction = Clear, clientPayload = PayloadN ()}"

[2015-12-13 08:59:24.754] Server sent message: ServerMessage {serverAction = EvaluateHeader, serverResult = Success, serverPayload = PayloadValue (CellValue (ValueError {errorMsg = "R Runtime Error: Error in file(file, \"rt\") : cannot open the connection\n", errorType = "R error"}))}

[2015-12-13 08:59:24.755] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:59:24.756] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:59:24.756] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:59:24.813] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:59:24.853] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:59:24.854] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:59:24.855] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:59:25.047] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:59:25.050] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:59:25.051] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:59:25.051] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:59:25.186] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:59:25.188] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:59:25.189] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:59:25.190] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:59:25.281] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:59:25.286] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:59:25.286] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:59:25.288] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:59:25.381] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:59:25.384] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:59:25.384] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:59:25.385] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:59:25.467] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:59:25.511] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:59:25.511] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:59:25.611] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:59:25.759] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:59:25.761] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:59:25.762] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:59:25.763] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:59:25.818] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:59:25.820] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:59:25.820] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:59:25.821] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:59:26.086] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:59:26.091] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:59:26.091] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:59:26.092] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:59:26.152] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:59:26.157] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:59:26.185] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:59:26.196] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:59:26.387] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:59:26.391] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:59:26.391] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:59:26.393] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:59:26.540] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:59:26.571] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:59:26.572] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:59:26.573] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:59:26.634] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:59:26.717] Message: "ClientMessage {clientAction = Open, clientPayload = PayloadS (Sheet {sheetId = \"INIT_SHEET_ID\", sheetName = \"\", sheetPermissions = Blacklist []})}"

[2015-12-13 08:59:26.718] Server sent message: ServerMessage {serverAction = Open, serverResult = Success, serverPayload = PayloadOpen {initHeaderExpressions = [Expression {expression = "x = range(10)\n\n", language = Python},Expression {expression = "x=read.table(\"test.csv\", sep=\",\")\n", language = R}], initCondFormatRules = [], initRowCols = []}}

[2015-12-13 08:59:26.727] Message: "ClientMessage {clientAction = UpdateWindow, clientPayload = PayloadW (Window {windowSheetId = \"INIT_SHEET_ID\", topLeft = (1,1), bottomRight = (19,29)})}"

[2015-12-13 08:59:26.814] Server sent message: ServerMessage {serverAction = UpdateWindow, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,2)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,3)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (2,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,4)}, cellExpression = Expression {expression = "3", language = Excel}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (3,6)}, cellExpression = Expression {expression = "x", language = Python}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I0\\nI0\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,9)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,10)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,10)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I1\\nI1\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,10)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,11)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,11)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I2\\nI2\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,11)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,12)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 3, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,12)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I3\\nI3\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,12)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,13)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 4, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,13)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I4\\nI4\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,13)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,14)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 5, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,14)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I5\\nI5\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,14)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,15)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 6, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,15)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I6\\nI6\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,15)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,16)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 7, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,16)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I7\\nI7\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,16)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,17)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 8, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,17)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I8\\nI8\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,17)}, cellExpression = Expression {expression = "x[0]*x[8]", language = Python}, cellValue = ValueI 0, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (4,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,18)}, cellExpression = Coupled {cExpression = "x", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (5,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,18)}, cellExpression = Coupled {cExpression = "zip(x,x)", cLanguage = Python, cType = List, cRangeKey = RangeKey {keyIndex = Index {locSheetId = "INIT_SHEET_ID", index = (6,9)}, keyDimensions = Dimensions {width = 1, height = 10}}}, cellValue = ValueSerialized {serializedValue = "cPickle.loads(\"(I9\\nI9\\ntp1\\n.\")", displayName = "GENERIC"}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,18)}, cellExpression = Expression {expression = "x[1]*x[9]", language = Python}, cellValue = ValueI 9, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (4,20)}, cellExpression = Expression {expression = "\n\n", language = Python}, cellValue = ValueError {errorMsg = "NameError: name 'export' is not defined", errorType = "Syntax error."}, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:59:26.816] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (7,3)}, cellExpression = Expression {expression = \"1\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 08:59:26.817] about to start dispatch

[2015-12-13 08:59:26.817] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 08:59:26.817] Settings: Descendants: DescendantsWithParent

[2015-12-13 08:59:26.817] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(7,3)\""

[2015-12-13 08:59:26.818] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (7,3)},[])]

[2015-12-13 08:59:26.818] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(7,3)\""

[2015-12-13 08:59:26.819] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}]

[2015-12-13 08:59:26.823] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 08:59:26.823] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(7,3)\""

[2015-12-13 08:59:26.823] Got ancestor locs: []

[2015-12-13 08:59:26.823] Starting eval chain

[2015-12-13 08:59:26.823] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 08:59:26.824] Starting eval code

[2015-12-13 08:59:26.824] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (7,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 08:59:26.824] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 08:59:26.824] the context insert has value CellValue (ValueI 1)

[2015-12-13 08:59:26.825] GOT RANGEKEYS IN SHEET: : ["I/INIT_SHEET_ID/(5,9)?(1,10)?RANGEKEY","I/INIT_SHEET_ID/(4,9)?(1,10)?RANGEKEY","I/INIT_SHEET_ID/(6,9)?(1,10)?RANGEKEY"]

[2015-12-13 08:59:26.825] got decoupled descriptors in contextInsert: []

[2015-12-13 08:59:26.826] DECOUPLED CELLS: []

[2015-12-13 08:59:26.826] empty dispatch

[2015-12-13 08:59:26.826] empty evalchain

[2015-12-13 08:59:26.826] finished dispatch

[2015-12-13 08:59:26.827] updated DB after dispatch

[2015-12-13 08:59:26.827] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:59:26.827] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 08:59:26.828] Message: "ClientMessage {clientAction = EvaluateHeader, clientPayload = PayloadXp (Expression {expression = \"import math\\nx = range(10)\\ny = [math.sin(h) for h in x]\\n\\n\\n\\ny\", language = Python})}"

[2015-12-13 09:01:05.441] Server sent message: ServerMessage {serverAction = EvaluateHeader, serverResult = Success, serverPayload = PayloadValue (CellValue (ValueError {errorMsg = "R Runtime Error: Error in file(file, \"rt\") : cannot open the connection\n", errorType = "R error"}))}

[2015-12-13 09:01:05.454] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (7,3)}, cellExpression = Expression {expression = \"1\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 09:01:05.455] about to start dispatch

[2015-12-13 09:01:05.455] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 09:01:05.455] Settings: Descendants: DescendantsWithParent

[2015-12-13 09:01:05.456] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(7,3)\""

[2015-12-13 09:01:05.457] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (7,3)},[])]

[2015-12-13 09:01:05.458] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(7,3)\""

[2015-12-13 09:01:05.461] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}]

[2015-12-13 09:01:05.470] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 09:01:05.470] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(7,3)\""

[2015-12-13 09:01:05.472] Got ancestor locs: []

[2015-12-13 09:01:05.472] Starting eval chain

[2015-12-13 09:01:05.472] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 09:01:05.472] Starting eval code

[2015-12-13 09:01:05.472] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (7,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 09:01:05.472] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 09:01:05.472] the context insert has value CellValue (ValueI 1)

[2015-12-13 09:01:05.473] GOT RANGEKEYS IN SHEET: : ["I/INIT_SHEET_ID/(5,9)?(1,10)?RANGEKEY","I/INIT_SHEET_ID/(4,9)?(1,10)?RANGEKEY","I/INIT_SHEET_ID/(6,9)?(1,10)?RANGEKEY"]

[2015-12-13 09:01:05.473] got decoupled descriptors in contextInsert: []

[2015-12-13 09:01:05.482] DECOUPLED CELLS: []

[2015-12-13 09:01:05.482] empty dispatch

[2015-12-13 09:01:05.483] empty evalchain

[2015-12-13 09:01:05.483] finished dispatch

[2015-12-13 09:01:05.484] updated DB after dispatch

[2015-12-13 09:01:05.484] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 09:01:05.484] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 09:01:05.486] Message: "ClientMessage {clientAction = EvaluateHeader, clientPayload = PayloadXp (Expression {expression = \"import math\\nx = range(10)\\ny = [math.sin(h) for h in x]\\n\\n\\n\\ny\", language = Python})}"

[2015-12-13 09:01:50.489] Server sent message: ServerMessage {serverAction = EvaluateHeader, serverResult = Success, serverPayload = PayloadValue (CellValue (ValueError {errorMsg = "R Runtime Error: Error in file(file, \"rt\") : cannot open the connection\n", errorType = "R error"}))}

[2015-12-13 09:01:50.503] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (7,3)}, cellExpression = Expression {expression = \"1\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 09:01:50.508] about to start dispatch

[2015-12-13 09:01:50.510] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 09:01:50.511] Settings: Descendants: DescendantsWithParent

[2015-12-13 09:01:50.513] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(7,3)\""

[2015-12-13 09:01:50.515] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (7,3)},[])]

[2015-12-13 09:01:50.520] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(7,3)\""

[2015-12-13 09:01:50.522] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}]

[2015-12-13 09:01:50.522] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 09:01:50.522] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(7,3)\""

[2015-12-13 09:01:50.523] Got ancestor locs: []

[2015-12-13 09:01:50.523] Starting eval chain

[2015-12-13 09:01:50.523] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 09:01:50.523] Starting eval code

[2015-12-13 09:01:50.523] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (7,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 09:01:50.524] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 09:01:50.524] the context insert has value CellValue (ValueI 1)

[2015-12-13 09:01:50.525] GOT RANGEKEYS IN SHEET: : ["I/INIT_SHEET_ID/(5,9)?(1,10)?RANGEKEY","I/INIT_SHEET_ID/(4,9)?(1,10)?RANGEKEY","I/INIT_SHEET_ID/(6,9)?(1,10)?RANGEKEY"]

[2015-12-13 09:01:50.532] got decoupled descriptors in contextInsert: []

[2015-12-13 09:01:50.533] DECOUPLED CELLS: []

[2015-12-13 09:01:50.533] empty dispatch

[2015-12-13 09:01:50.533] empty evalchain

[2015-12-13 09:01:50.533] finished dispatch

[2015-12-13 09:01:50.534] updated DB after dispatch

[2015-12-13 09:01:50.534] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 09:01:50.535] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 09:01:50.536] Message: "ClientMessage {clientAction = EvaluateHeader, clientPayload = PayloadXp (Expression {expression = \"import math\\nx = range(10)\\ny = [math.sin(h) for h in x]\\n\\n\\n\\ny\", language = Python})}"

[2015-12-13 09:03:00.563] Server sent message: ServerMessage {serverAction = EvaluateHeader, serverResult = Success, serverPayload = PayloadValue (CellValue (ValueError {errorMsg = "R Runtime Error: Error in file(file, \"rt\") : cannot open the connection\n", errorType = "R error"}))}

[2015-12-13 09:03:00.575] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (7,3)}, cellExpression = Expression {expression = \"1\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 09:03:00.576] about to start dispatch

[2015-12-13 09:03:00.576] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 09:03:00.576] Settings: Descendants: DescendantsWithParent

[2015-12-13 09:03:00.577] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(7,3)\""

[2015-12-13 09:03:00.578] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (7,3)},[])]

[2015-12-13 09:03:00.578] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(7,3)\""

[2015-12-13 09:03:00.579] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}]

[2015-12-13 09:03:00.602] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 09:03:00.602] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(7,3)\""

[2015-12-13 09:03:00.602] Got ancestor locs: []

[2015-12-13 09:03:00.603] Starting eval chain

[2015-12-13 09:03:00.603] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 09:03:00.626] Starting eval code

[2015-12-13 09:03:00.626] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (7,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 09:03:00.627] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 09:03:00.627] the context insert has value CellValue (ValueI 1)

[2015-12-13 09:03:00.637] GOT RANGEKEYS IN SHEET: : ["I/INIT_SHEET_ID/(5,9)?(1,10)?RANGEKEY","I/INIT_SHEET_ID/(6,9)?(1,10)?RANGEKEY"]

[2015-12-13 09:03:00.638] got decoupled descriptors in contextInsert: []

[2015-12-13 09:03:00.641] DECOUPLED CELLS: []

[2015-12-13 09:03:00.641] empty dispatch

[2015-12-13 09:03:00.642] empty evalchain

[2015-12-13 09:03:00.650] finished dispatch

[2015-12-13 09:03:00.651] updated DB after dispatch

[2015-12-13 09:03:00.651] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 09:03:00.652] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 09:03:00.667] Message: "ClientMessage {clientAction = EvaluateHeader, clientPayload = PayloadXp (Expression {expression = \"import math\\nx = range(10)\\ny = [math.sin(h) for h in x]\\n\\n\\n\\ny\", language = Python})}"

[2015-12-13 09:05:25.674] Server sent message: ServerMessage {serverAction = EvaluateHeader, serverResult = Success, serverPayload = PayloadValue (CellValue (ValueError {errorMsg = "R Runtime Error: Error in file(file, \"rt\") : cannot open the connection\n", errorType = "R error"}))}

[2015-12-13 09:05:25.719] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (7,3)}, cellExpression = Expression {expression = \"1\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 09:05:25.720] about to start dispatch

[2015-12-13 09:05:25.720] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 09:05:25.720] Settings: Descendants: DescendantsWithParent

[2015-12-13 09:05:25.721] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(7,3)\""

[2015-12-13 09:05:25.722] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (7,3)},[])]

[2015-12-13 09:05:25.722] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(7,3)\""

[2015-12-13 09:05:25.723] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}]

[2015-12-13 09:05:25.732] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 09:05:25.732] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(7,3)\""

[2015-12-13 09:05:25.733] Got ancestor locs: []

[2015-12-13 09:05:25.733] Starting eval chain

[2015-12-13 09:05:25.733] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 09:05:25.738] Starting eval code

[2015-12-13 09:05:25.738] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (7,3)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 09:05:25.738] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 09:05:25.739] the context insert has value CellValue (ValueI 1)

[2015-12-13 09:05:25.739] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 09:05:25.739] got decoupled descriptors in contextInsert: []

[2015-12-13 09:05:25.739] DECOUPLED CELLS: []

[2015-12-13 09:05:25.740] empty dispatch

[2015-12-13 09:05:25.740] empty evalchain

[2015-12-13 09:05:25.758] finished dispatch

[2015-12-13 09:05:25.759] updated DB after dispatch

[2015-12-13 09:05:25.759] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (7,3)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 09:05:25.767] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL []}

[2015-12-13 09:05:25.771] Message: "ClientMessage {clientAction = EvaluateHeader, clientPayload = PayloadXp (Expression {expression = \"import math\\nx = range(10)\\ny = [math.sin(h) for h in x]\\n\\n\\n\\ny\", language = Python})}"

[2015-12-13 09:07:26.897] Server sent message: ServerMessage {serverAction = EvaluateHeader, serverResult = Success, serverPayload = PayloadValue (CellValue (ValueError {errorMsg = "R Runtime Error: Error in file(file, \"rt\") : cannot open the connection\n", errorType = "R error"}))}

[2015-12-13 09:07:42.227] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (5,4)}, cellExpression = Expression {expression = \"1\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 09:07:42.227] about to start dispatch

[2015-12-13 09:07:42.227] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,4)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 09:07:42.227] Settings: Descendants: DescendantsWithParent

[2015-12-13 09:07:42.228] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(5,4)\""

[2015-12-13 09:07:42.229] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (5,4)},[])]

[2015-12-13 09:07:42.230] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(5,4)\""

[2015-12-13 09:07:42.230] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (5,4)}]

[2015-12-13 09:07:42.231] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,4)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 09:07:42.233] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(5,4)\""

[2015-12-13 09:07:42.234] Got ancestor locs: []

[2015-12-13 09:07:42.234] Starting eval chain

[2015-12-13 09:07:42.234] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,4)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 09:07:42.234] Starting eval code

[2015-12-13 09:07:42.234] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (5,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,4)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 09:07:42.234] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,4)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 09:07:42.234] the context insert has value CellValue (ValueI 1)

[2015-12-13 09:07:42.235] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 09:07:42.235] got decoupled descriptors in contextInsert: []

[2015-12-13 09:07:42.235] DECOUPLED CELLS: []

[2015-12-13 09:07:42.235] empty dispatch

[2015-12-13 09:07:42.235] empty evalchain

[2015-12-13 09:07:42.235] finished dispatch

[2015-12-13 09:07:42.236] updated DB after dispatch

[2015-12-13 09:07:42.236] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,4)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 09:07:42.237] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,4)}, cellExpression = Expression {expression = "1", language = Excel}, cellValue = ValueI 1, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 09:07:46.551] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (5,5)}, cellExpression = Expression {expression = \"2\", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 09:07:46.555] about to start dispatch

[2015-12-13 09:07:46.555] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,5)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 09:07:46.555] Settings: Descendants: DescendantsWithParent

[2015-12-13 09:07:46.556] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(5,5)\""

[2015-12-13 09:07:46.556] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (5,5)},[])]

[2015-12-13 09:07:46.557] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(5,5)\""

[2015-12-13 09:07:46.558] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (5,5)}]

[2015-12-13 09:07:46.558] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,5)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 09:07:46.567] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(5,5)\""

[2015-12-13 09:07:46.567] Got ancestor locs: []

[2015-12-13 09:07:46.567] Starting eval chain

[2015-12-13 09:07:46.567] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,5)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 09:07:46.570] Starting eval code

[2015-12-13 09:07:46.570] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (5,5)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,5)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 09:07:46.570] running context insert with old cell Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,5)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}

[2015-12-13 09:07:46.570] the context insert has value CellValue (ValueI 2)

[2015-12-13 09:07:46.570] GOT RANGEKEYS IN SHEET: : []

[2015-12-13 09:07:46.574] got decoupled descriptors in contextInsert: []

[2015-12-13 09:07:46.574] DECOUPLED CELLS: []

[2015-12-13 09:07:46.574] empty dispatch

[2015-12-13 09:07:46.574] empty evalchain

[2015-12-13 09:07:46.575] finished dispatch

[2015-12-13 09:07:46.576] updated DB after dispatch

[2015-12-13 09:07:46.576] made message: : ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,5)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 09:07:46.576] Server sent message: ServerMessage {serverAction = Update, serverResult = Success, serverPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (5,5)}, cellExpression = Expression {expression = "2", language = Excel}, cellValue = ValueI 2, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}

[2015-12-13 09:07:50.539] Message: "ClientMessage {clientAction = EvaluateHeader, clientPayload = PayloadXp (Expression {expression = \"1+1\", language = R})}"

[2015-12-13 09:07:50.539] starting R eval

[2015-12-13 09:07:50.540] Server sent message: ServerMessage {serverAction = EvaluateHeader, serverResult = Success, serverPayload = PayloadValue (CellValue (ValueI 2))}

[2015-12-13 09:07:56.859] Message: "ClientMessage {clientAction = EvaluateHeader, clientPayload = PayloadXp (Expression {expression = \"x=read.table(\\\"test.csv\\\", sep=\\\",\\\")\\n\", language = R})}"

[2015-12-13 09:07:56.859] starting R eval

[2015-12-13 09:36:03.145] Server sent message: ServerMessage {serverAction = EvaluateHeader, serverResult = Success, serverPayload = PayloadValue (CellValue (ValueError {errorMsg = "R Runtime Error: Error in eval(expr, envir, enclos) : object 'x' not found\n", errorType = "R error"}))}

[2015-12-13 09:36:13.186] Message: "ClientMessage {clientAction = EvaluateHeader, clientPayload = PayloadXp (Expression {expression = \"345\", language = R})}"

[2015-12-13 09:36:13.189] starting R eval

[2015-12-13 09:36:13.194] Server sent message: ServerMessage {serverAction = EvaluateHeader, serverResult = Success, serverPayload = PayloadValue (CellValue (ValueI 345))}

[2015-12-13 09:36:16.055] Message: "ClientMessage {clientAction = EvaluateHeader, clientPayload = PayloadXp (Expression {expression = \"x<-5\\nx\", language = R})}"

[2015-12-13 09:36:16.055] starting R eval

[2015-12-13 09:36:16.056] Server sent message: ServerMessage {serverAction = EvaluateHeader, serverResult = Success, serverPayload = PayloadValue (CellValue (ValueI 5))}

[2015-12-13 09:36:21.457] Message: "ClientMessage {clientAction = Evaluate, clientPayload = PayloadCL [Cell {cellLocation = Index {locSheetId = \"INIT_SHEET_ID\", index = (6,4)}, cellExpression = Expression {expression = \"x\", language = R}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]}"

[2015-12-13 09:36:21.457] about to start dispatch

[2015-12-13 09:36:21.457] STARTING DISPATCH CYCLE WITH CELLS: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,4)}, cellExpression = Expression {expression = "x", language = R}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 09:36:21.457] Settings: Descendants: DescendantsWithParent

[2015-12-13 09:36:21.458] sent message to graph db: "\"SetRelations`I/INIT_SHEET_ID/(6,4)\""

[2015-12-13 09:36:21.472] Set cell ancestors: [(Index {locSheetId = "INIT_SHEET_ID", index = (6,4)},[])]

[2015-12-13 09:36:21.473] sent message to graph db: "\"GetDescendants`I/INIT_SHEET_ID/(6,4)\""

[2015-12-13 09:36:21.473] Got eval locations: [Index {locSheetId = "INIT_SHEET_ID", index = (6,4)}]

[2015-12-13 09:36:21.474] Got cells to evaluate: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,4)}, cellExpression = Expression {expression = "x", language = R}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 09:36:21.477] sent message to graph db: "\"GetImmediateAncestors`I/INIT_SHEET_ID/(6,4)\""

[2015-12-13 09:36:21.477] Got ancestor locs: []

[2015-12-13 09:36:21.477] Starting eval chain

[2015-12-13 09:36:21.477] running eval chain with cells: [Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,4)}, cellExpression = Expression {expression = "x", language = R}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}}]

[2015-12-13 09:36:21.478] Starting eval code

[2015-12-13 09:36:21.499] eval language with cells in context: : fromList [(Index {locSheetId = "INIT_SHEET_ID", index = (6,4)},Cell {cellLocation = Index {locSheetId = "INIT_SHEET_ID", index = (6,4)}, cellExpression = Expression {expression = "x", language = R}, cellValue = NoValue, cellProps = ASCellProps {underlyingProps = fromList [], condFormatProps = fromList []}})]

[2015-12-13 09:36:21.500] starting R eval